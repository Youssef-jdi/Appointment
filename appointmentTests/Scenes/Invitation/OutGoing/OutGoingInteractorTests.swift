//
//  OutGoingInteractorTests.swift
//  appointment
//
//  Created by Youssef Jdidi on 3/3/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import appointment
import XCTest
import SwiftyMocky
import Moya
import CoreData

class OutGoingInteractorTests: XCTestCase {

    // MARK: Mocks
    private let mockPresenter = OutGoingPresenterProtocolMock()
    private let mockInvitationService = InvitationServiceProtocolMock()
    private let mockUserDataService = CurrentUserDataServiceProtocolMock()
    private let mockErrorHandler = ErrorHandlerProtocolMock()

    private var sut: OutGoingInteractor!

    // MARK: Test lifecycle
    override func setUp()   {
        super.setUp()
        sut = createInteractor()
    }

    override func tearDown() {
        sut = nil
        super.tearDown()
    }

    // MARK: Tests
    func testGetInvitationsSuccess() {
        let user = CurrentUserEntity.init(context: TestCoreDataHelper.share.setUpInMemoryManagedObjectContext())
        user.userId = 1
        let appointments = Array.init(repeating: Appointment.mock(), count: 20)
        Perform(mockUserDataService, .fetchCurrentUser(.any, perform: { completion in
                   completion(.success(user))
               }))
        Perform(mockInvitationService, .getInvitations(.any, perform: { completion in
            completion(.success(appointments))
        }))
        sut.getInvitations()
        Verify(mockInvitationService, .getInvitations(.any))
        Verify(mockPresenter, .present(outGoingDataSource: .value(appointments)))
    }

    func testGetInvitationsFailure() {
        let error: MoyaError = .statusCode(.init(statusCode: 400, data: Data()))
        Perform(mockInvitationService, .getInvitations(.any, perform: { completion in
            completion(.failure(error))
        }))
        sut.getInvitations()
        Verify(mockInvitationService, .getInvitations(.any))
        Verify(mockErrorHandler, .handle(.any))
    }

    // TO DO: test getCurrentUser logic
    // TO DO: test filterOutGoingInvitations
    #warning("why Raluca, those 2 functions are private, Sam")
}

// MARK: Privates
private extension  OutGoingInteractorTests {

    func createInteractor() ->  OutGoingInteractor {
        return .init(
            presenter: mockPresenter,
            invitationService: mockInvitationService,
            errorHandler: mockErrorHandler,
            currentUserDataService: mockUserDataService)
    }
}
