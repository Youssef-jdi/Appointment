//
//  SideMenuInteractorTests.swift
//  appointment
//
//  Created by Raluca Mesterca on 05/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import appointment
import XCTest
import SwiftyMocky
import Moya

class SideMenuInteractorTests: XCTestCase {

    // MARK: Mocks
    private let mockPresenter = SideMenuPresenterProtocolMock()
    private let mockAuthManager = AuthManagerProtocolMock()
    private let mockUserProfileDataService = CurrentUserDataServiceProtocolMock()
    private let mockEventsDataService = EventsDataServiceProtocolMock()
    private let mockAppointmentDataService = AppointmentDataServiceProtocolMock()

    private var sut: SideMenuInteractor!

    // MARK: Test lifecycle
    override func setUp()   {
        super.setUp()

        sut = createInteractor()
    }

    override func tearDown() {
        sut = nil
        super.tearDown()
    }

    // MARK: Tests
    func testInvitationRequiresAuth() {

        //anon user
        Given(mockAuthManager, .isUserLoggedIn(getter: false))
        sut.checkAuthRequired(for: .invitations)
        Verify(mockPresenter, .handleUserIsAnon(error: .value(.authNeeded)))

        // logged in user
        Given(mockAuthManager, .isUserLoggedIn(getter: true))
        sut.checkAuthRequired(for: .invitations)
        Verify(mockPresenter, .handleRoutingEnabled(for: .value(.invitations)))
    }

    func testAuthNotRequired() {
        sut.checkAuthRequired(for: .about) // any value that goes through default
        Verify(mockPresenter, .handleRoutingEnabled(for: .value(.about)))
    }

    // TO DO: fix tests
    func testGetProfileSuccess() {
        let user = CurrentUserEntity.init(context: TestCoreDataHelper.share.setUpInMemoryManagedObjectContext())
        user.lastName = "tran"
        user.firstName = "gh"
        Perform(mockUserProfileDataService, .fetchCurrentUser(.any, perform: { completion in
            completion(.success(user))
        }))
        sut.fetchUserFromLocal()
        Verify(mockPresenter, .present(user: .value(UserProfile.map(from:user))))
    }

    func testGetProfileFail() {
        Perform(mockUserProfileDataService, .fetchCurrentUser(.any, perform: { completion in
            completion(.failure(AuthError.wrongCredentials))
        }))
        sut.fetchUserFromLocal()
        Verify(mockPresenter, .handle(error: .matching({
            // Should create an custom error for this case.
            return $0.localizedDescription == "The operation couldnâ€™t be completed. (appointment.AuthError error 0.)"
        })))
    }

    func testNotificationData() {
        let appointment = AppointmentEntity.init(context: TestCoreDataHelper.share.setUpInMemoryManagedObjectContext())
        appointment.id = 1
        let event = EventEntity.init(context: TestCoreDataHelper.share.setUpInMemoryManagedObjectContext())
        event.appointmentId = 1
        event.isRead = true
        Perform(mockAppointmentDataService, .fetchAppointments(appointmentId: .value(nil), .any, perform: { id, completion in
            completion(.success([appointment]))
        }))
        Perform(mockEventsDataService, .fetchEvents(appointmentId: nil, .any, perform: { id, completion in
            completion(.success([event]))
        }))
        sut.getNotificationData()
        Verify(mockPresenter, .present(events: .value([AppEvent.map(from: event)])))
        Verify(mockPresenter, .present(appointmentData: .value([Appointment.map(from: appointment)])))
    }
}

// MARK: Privates
private extension  SideMenuInteractorTests {

    func createInteractor() ->  SideMenuInteractor {
        return .init(
            presenter: mockPresenter,
            authManager: mockAuthManager,
            currentUserDataService: mockUserProfileDataService,
            eventsDataService: mockEventsDataService,
            appointmentDataService: mockAppointmentDataService
        )
    }
}
