//
//  SideMenuViewControllerTests.swift
//  appointment
//
//  Created by Raluca Mesterca on 05/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import appointment
import XCTest
import SwiftyMocky
import SnapshotTesting

class SideMenuViewControllerTests: XCTestCase {

    // MARK: Mocks
    private let mockRouter = SideMenuRouterProtocolMock()
    private let mockInteractor = SideMenuInteractorProtocolMock()
    private let mockAlertPresenter = AlertPresenterProtocolMock()

    var sut: SideMenuViewController!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()

        // always use simulator for snapshot testing, advisable from iphone 7 higher
        record = SnapshotTestsRecordMode.environmentVariableMappingValue
        sut = createViewController()
    }

    override func tearDown() {
        sut = nil
        super.tearDown()
    }

    // MARK: Tests
    func testNormal() {
        sut.assertSnapshots()
    }

    func testHandleRoutingError() {
        let error: SideMenuError = .authNeeded
        sut.handleUserIsAnon(error)
        Verify(mockAlertPresenter, .presentAlert(title: .value(error.title), description: .value(error.localizedDescription), actions: .any))
    }

    func testRootingEnabled() {
        sut.handleRoutingEnabled(for: .agenda) // one case is enough
        Verify(mockRouter, .route(to: .value(.agenda)))
    }

    func testDidSelectCell() {
        sut.tableView(sut.tableView, didSelectRowAt: IndexPath(row: 1, section: 0)) // one case is enough
        Verify(mockInteractor, .checkAuthRequired(for: .value(.invitations)))
    }

//    func testConfigureUserProfile() {
//
//    }
}

// MARK: Privates
private extension  SideMenuViewControllerTests {

    func createViewController() ->  SideMenuViewController {
        let vc = R.storyboard.sideMenu.sideMenuViewController()!
        vc.view.frame = .init(x: 0, y: 0, width: vc.view.frame.width, height: 1100)
        vc.set(router: mockRouter)
        vc.set(alertPresenter: mockAlertPresenter)
        vc.set(interactor: mockInteractor)
        vc.lifecycle()
        return vc
    }
}
