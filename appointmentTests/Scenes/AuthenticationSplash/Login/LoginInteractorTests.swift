//
//  LoginInteractorTests.swift
//  appointment
//
//  Created by Raluca Mesterca on 18/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import XCTest
import SwiftyMocky

@testable import appointment
class LoginInteractorTests: XCTestCase {
    
    // MARK: - Mocks
    private let mockPresenter = LoginPresenterProtocolMock()
    private let mockDataValidator = DataValidatorProtocolMock()
    private let mockAuthManager = AuthManagerProtocolMock()
    private var sut: LoginInteractor!
    
    // MARK: Setup/Teardown
    override func setUp() {
        super.setUp()
        sut = createInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
        sut = nil
    }
    
    // MARK: Tests
    func testLoginEmailInvalid() {
        let email = "email"
        let password = "password"
        
        Given(mockDataValidator, .validateEmail(.any, willThrow: DataValidationError.invalidEmail))
        sut.validateFields(email: email, password: password)
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.invalidEmail)))
    }
    
    func testLoginPasswordInvalid() {
        let email = "email@email.com"
        let password = "pass"
        
        Given(mockDataValidator, .validatePassword(.value(password), willThrow: DataValidationError.invalidPassword))
        
        sut.validateFields(email: email, password: password)
        
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockDataValidator, .validatePassword(.value(password)))
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.invalidPassword)))
    }

    func testEmptyEmail() {
        let email = ""
        let password = "pass"

        sut.validateFields(email: email, password: password)
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.emptyEmail)))
    }

    func testEmptyPassword() {
        let email = "email@email.com"
        let password = ""

        sut.validateFields(email: email, password: password)
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.emptyPassword)))
    }

    func testEmptyFields() {
        let email = ""
        let password = ""
        
        sut.validateFields(email: email, password: password)
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.emptyFields)))
    }

    func testFieldsAreNil() {
        sut.validateFields(email: nil, password: nil)
        Verify(mockPresenter, .presentInvalidData(.value(DataValidationError.emptyFields)))
    }
    
    func testLoginSuccess() {
        let email = "email@email.com"
        let password = "pass"
        let loginResponse = LoginResponse(accessToken: "", refreshToken: "", expiresIn: 0, tokenType: "")
        
        Perform(mockAuthManager, .login(email: .any, password: .any, completion: .any, perform: { email, password, completion in
            completion(.success(loginResponse))
        }))
        
        sut.validateFields(email: email, password: password)
        
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockDataValidator, .validatePassword(.value(password)))
        Verify(mockPresenter, .presentLoginSuccess())
    }
    
    func testLoginFailure() {
        let email = "email@email.com"
        let password = "pass"
        
        Perform(mockAuthManager, .login(email: .any, password: .any, completion: .any, perform: { email, password, completion in
            completion(.failure(.accessDenied(nil)))
        }))
        
        sut.validateFields(email: email, password: password)
        
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockDataValidator, .validatePassword(.value(password)))
        Verify(mockPresenter, .presentLoginError())
    }
}

// MARK: - Privates
private extension LoginInteractorTests {
    
    func createInteractor() -> LoginInteractor {
        return .init(
            dataValidator: mockDataValidator,
            presenter: mockPresenter,
            authManager: mockAuthManager)
    }
}
