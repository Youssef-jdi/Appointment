//
//  TutorialInteractorTests.swift
//  appointment
//
//  Created by Raluca Mesterca on 03/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import appointment
import XCTest
import SwiftyMocky
import Moya

class TutorialInteractorTests: XCTestCase {

    // MARK: Mocks
    private let mockPresenter = TutorialPresenterProtocolMock()
    private let mockService = TutorialServiceProtocolMock()

    private var sut: TutorialInteractor!

    // MARK: Test lifecycle
    override func setUp()   {
        super.setUp()

        sut = createInteractor()
    }

    override func tearDown() {
        sut = nil
        super.tearDown()
    }

    // MARK: Tests
    func testFetchTutorialPagesSucces() {
        let tutorials = Array(repeating: Tutorial.mock(), count: 5)
        let tutorialResponse =  getTutorialResponse()
        Perform(mockService, .fetchTutorialSlides(completion: .any, perform: { (completion) in
            completion(.success(tutorialResponse))
        }))

        sut.fetchTutorialPages()
        Verify(mockPresenter, .displayTutorialSlides(.value(tutorials)))
    }

    func testFetchTutorialPagesFailure() {
        let error: MoyaError = .statusCode(.init(statusCode: 400, data: Data()))

        Matcher.default.register(Error.self) { (lhs, rhs) -> Bool in
            return lhs.localizedDescription == rhs.localizedDescription
        }

        Perform(mockService, .fetchTutorialSlides(completion: .any, perform: { (completion) in
            completion(.failure(error))
        }))

        sut.fetchTutorialPages()
        Verify(mockPresenter, .handle(error: .value((error))))
    }
}

// MARK: Privates
private extension  TutorialInteractorTests {

    func createInteractor() ->  TutorialInteractor {
        return .init(presenter: mockPresenter, service: mockService)
    }

    func getTutorialResponse() -> TutorialResponse {
        return TutorialResponse(
            titlePage1: Tutorial.mock().title,
            descriptionPage1: Tutorial.mock().description,
            imageUrl1: Tutorial.mock().imageUrl,
            titlePage2: Tutorial.mock().title,
            descriptionPage2: Tutorial.mock().description,
            imageUrl2: Tutorial.mock().imageUrl,
            titlePage3: Tutorial.mock().title,
            descriptionPage3: Tutorial.mock().description,
            imageUrl3: Tutorial.mock().imageUrl,
            titlePage4: Tutorial.mock().title,
            descriptionPage4: Tutorial.mock().description,
            imageUrl4: Tutorial.mock().imageUrl,
            titlePage5: Tutorial.mock().title,
            descriptionPage5: Tutorial.mock().description,
            imageUrl5: Tutorial.mock().imageUrl)
    }
}
