//
//  RegisterInteractorTests.swift
//  appointment
//
//  Created by Rachel Polachova on 27/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import appointment
import XCTest
import SwiftyMocky

class RegisterInteractorTests: XCTestCase {
    
    // MARK: Mocks
    private let mockPresenter = RegisterPresenterProtocolMock()
    private let mockDataValidator = DataValidatorProtocolMock()
    private let mockRegisterService = RegisterServiceProtocolMock()
    private let mockAuthManager = AuthManagerProtocolMock()
    private var sut: RegisterInteractor!
    
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()

        sut = createRegisterInteractor()
    }
    
    override func tearDown() {
        sut = nil

        super.tearDown()
    }
    
    // MARK: Tests
    func testRegisterSuccess() {
        let email = "bruce@batcave.com"
        let password1 = "Robin123"
        let password2 = "Robin123"

        let registerRequest = getRegisterRequest()

        let registerResponse = RegisterResponse(success: true)
        let loginResponse = LoginResponse(accessToken: "", refreshToken: "", expiresIn: 3600, tokenType: "")

        Perform(mockRegisterService, .register(registerRequest: .any, profileImage: .any, .any, perform: { registerRequest, profileImage, completion  in
            completion(.success(registerResponse))
        }))

        Perform(mockAuthManager, .login(email: .any, password: .any, completion: .any, perform: { email, password, completion in
            completion(.success(loginResponse))
        }))

        sut.handleRegister(registerRequest: registerRequest, profileImage: nil)
        
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockDataValidator, .validatePassword(.value(password1)))
        Verify(mockDataValidator, .validatePasswordsMatch(.value(password1), .value(password2)))
        Verify(mockRegisterService, .register(registerRequest: .value(registerRequest), profileImage: .value(nil), .any))
        Verify(mockPresenter, .presentLoginSuccess())
    }

    func testRegisterError() {
         let email = "bruce@batcave.com"
         let password1 = "Robin123"
         let password2 = "Robin123"

        let registerRequest = getRegisterRequest()

        Perform(mockRegisterService, .register(registerRequest: .any, profileImage: .any, .any, perform: { registerRequest, profileImage, completion  in
            completion(.failure(.statusCode(.init(statusCode: 400, data: Data()))))
        }))

        sut.handleRegister(registerRequest: registerRequest, profileImage: nil)

        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockDataValidator, .validatePassword(.value(password1)))
        Verify(mockDataValidator, .validatePasswordsMatch(.value(password1), .value(password2)))
        Verify(mockRegisterService, .register(registerRequest: .value(registerRequest), profileImage: .value(nil), .any))
        Verify(mockPresenter, .presentRegisterError(.value(.statusCode(.init(statusCode: 400, data: Data())))))
     }

    func testInvalidEmail() {
        let email = "bruce"
        let password = "Robin123"

        let registerRequest = RegisterRequest(
            firstName: "",
            lastName: "",
            email: email,
            password: password,
            confirmPassword: password,
            function: nil,
            kvk: nil,
            address: nil,
            postCode: nil)

        Given(mockDataValidator, .validateEmail(.value(email), willThrow: DataValidationError.invalidEmail))

        sut.handleRegister(registerRequest: registerRequest, profileImage: nil)
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockPresenter, .presentInvalidData(.value(.invalidEmail)))
    }

    func testInvalidPassword() {
           let email = "bruce"
           let password = "Robin"

           let registerRequest = RegisterRequest(
               firstName: "",
               lastName: "",
               email: email,
               password: password,
               confirmPassword: password,
               function: nil,
               kvk: nil,
               address: nil,
               postCode: nil)

           Given(mockDataValidator, .validateEmail(.value(email), willThrow: DataValidationError.invalidPassword))

           sut.handleRegister(registerRequest: registerRequest, profileImage: nil)
           Verify(mockDataValidator, .validateEmail(.value(email)))
           Verify(mockPresenter, .presentInvalidData(.value(.invalidPassword)))
       }

    func testPasswordDontMatch() {
        let email = "bruce"
        let password1 = "Robin123"
        let password2 = "Robin123"


        let registerRequest = RegisterRequest(
            firstName: "",
            lastName: "",
            email: email,
            password: password1,
            confirmPassword: password2,
            function: nil,
            kvk: nil,
            address: nil,
            postCode: nil)

        Given(mockDataValidator, .validateEmail(.value(email), willThrow: DataValidationError.passwordsDontMatch))

        sut.handleRegister(registerRequest: registerRequest, profileImage: nil)
        Verify(mockDataValidator, .validateEmail(.value(email)))
        Verify(mockPresenter, .presentInvalidData(.value(.passwordsDontMatch)))
    }

    func testSelectedImage() {
        guard let image = R.image.add_Icon() else {
            XCTFail("Image is nil")
            return
        }

        sut.imageSelected(image: image)
        Verify(mockPresenter, .presentSelectedImage(image: .value(image)))
    }
}

// MARK: Privates
private extension RegisterInteractorTests {

    func createRegisterInteractor() -> RegisterInteractor {
        return .init(presenter: mockPresenter,
                     dataValidator: mockDataValidator,
                     registerService: mockRegisterService,
                     authManager: mockAuthManager)
    }

    func getRegisterRequest() -> RegisterRequest {
        let email = "bruce@batcave.com"
        let password1 = "Robin123"
        let password2 = "Robin123"

        let registerRequest = RegisterRequest(
            firstName: "Bruce",
            lastName: "Wayne",
            email: email,
            password: password1,
            confirmPassword: password2,
            function: nil,
            kvk: nil,
            address: nil,
            postCode: nil)

        return registerRequest
    }
}
