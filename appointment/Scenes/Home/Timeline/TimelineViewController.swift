//
//  TimelineWeeklyViewController.swift
//  appointment
//
//  Created by Raluca Mesterca on 18/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.


import UIKit

protocol TimelineViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: TimelineInteractorProtocol)
    func set(router: TimelineRouterProtocol)

    func display(appointments: [Appointment])
    func display(settings: Settings)
}

/*

Note: -

Month calendar:
- should scroll vertically and horizontally to display the days of the month
- does not have swipe behaviour

Week calendar:
- should only scroll vertically to show the weeks of the year
- can be swiped to change the years

*/

class TimelineViewController: UIViewController, TimelineViewControllerProtocol {

    // MARK: DI
    var interactor: TimelineInteractorProtocol?
    var router: TimelineRouterProtocol?

    func set(interactor: TimelineInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: TimelineRouterProtocol) {
        self.router = router
    }

    // PAGE View Controller
    func set(yearIndex: Int) {
        self.yearIndex = yearIndex
    }

    // MARK: Outlets
    @IBOutlet weak var agendaCollectionView: UICollectionView!
    @IBOutlet weak var headerCollectionView: UICollectionView!

    @IBOutlet var yearView: UIView!
    @IBOutlet weak var yearViewLabel: UILabel!

    // MARK: Properties
    var yearIndex: Int! // PAGE VC

    var agendaDataSource = TimelineAgendaCollectionViewDataSource()
    var headerDataSource = TimelineHeaderDataSource()

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        prepareScene()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        interactor?.handleViewWillAppear()
    }

    // MARK: Actions
    @IBAction func leftArrowButtonTapped(_ sender: UIButton) {
        selectYear(isPreviousYear: true)
    }

    @IBAction func rightArrowButtonTapped(_ sender: UIButton) {
        selectYear(isPreviousYear: false)
    }

    func selectYear(isPreviousYear: Bool) {
        guard let vc = self.parent as? HomePageViewController else { assertionFailure(); return }

        yearIndex = isPreviousYear ? yearIndex - 1 : yearIndex + 1
        vc.year = yearIndex
        setYear()

        agendaCollectionView.reloadData()
        headerCollectionView.reloadData()
    }
}

// MARK: Methods
extension TimelineViewController {

    func display(appointments: [Appointment]) {
        agendaDataSource.set(appointments: appointments)
        agendaCollectionView.reloadData()
    }

    func display(settings: Settings) {
        if let isWeekAgenda = settings.timelineDisplay?.wrappedBool {
            agendaDataSource.set(isMonthAgenda: !isWeekAgenda)
            headerDataSource.set(isMonthAgenda: !isWeekAgenda)

            agendaCollectionView.reloadData()
            headerCollectionView.reloadData()
        }

        if let status = settings.status?.wrappedBool {
            agendaDataSource.set(status: status)
            agendaCollectionView.reloadData()
        }
    }
}

// MARK: Configure Methods
private extension TimelineViewController {

    func setYear() {
          guard let year = yearIndex else { return }
          yearViewLabel.text = String(year)
          agendaDataSource.set(year: year)
      }

    func prepareScene() {
        setYear()
        prepareAgendaCollectionView()
        prepareHeaderCollectionView()
    }

    func prepareAgendaCollectionView() {
        agendaCollectionView.delegate = self
        agendaCollectionView.dataSource = agendaDataSource
        agendaDataSource.handleViewDidLoad()

        agendaCollectionView.register(R.nib.timelineDayCollectionViewCell)
        agendaCollectionView.register(R.nib.weekMonthCollectionViewCell)

        let width = UIScreen.main.bounds.width
        let layout = TimelineLayout(itemWidth: width / 8, itemHeight: 150, space: 0)
        agendaCollectionView.collectionViewLayout = layout
    }

    func prepareHeaderCollectionView() {
        headerCollectionView.delegate = self
        headerCollectionView.dataSource = headerDataSource
        headerDataSource.handleViewDidLoad()

        let width = UIScreen.main.bounds.width
        headerCollectionView.collectionViewLayout = TimelineLayout(itemWidth: width / 8, itemHeight: 30, space: 0)

        headerCollectionView.register(R.nib.timelineHeaderCollectionViewCell)
    }
}

// MARK: UIScrollViewDelegate
extension TimelineViewController: UIScrollViewDelegate {

    // match collection views content offset so that they scroll simultaneously
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if scrollView.isEqual(agendaCollectionView) {
            headerCollectionView.contentOffset.x = agendaCollectionView.contentOffset.x
        }

        if scrollView.isEqual(headerCollectionView) {
            agendaCollectionView.contentOffset.x = headerCollectionView.contentOffset.x
        }
    }
}

// MARK: UICollectionViewDelegate
extension TimelineViewController: UICollectionViewDelegate { }
