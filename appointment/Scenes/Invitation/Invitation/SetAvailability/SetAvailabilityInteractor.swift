//
//  SetAvailabilityInteractor.swift
//  appointment
//
//  Created by Jihen on 09/07/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import Foundation

//sourcery: AutoMockable
protocol SetAvailabilityInteractorProtocol {
    func handleSetAvailability(appointmentId: Int,
                               dateId: Int,
                               comment: String,
                               availability: AvailabilityTypeModel)
    func handleViewDidLoad(date: AppointmentDate?)
}

class SetAvailabilityInteractor: SetAvailabilityInteractorProtocol {
    
    // MARK: Properties
    private var date: AppointmentDate?
    
    // MARK: DI
    private let presenter: SetAvailabilityPresenterProtocol
    private let appointmentDateApiService: AppointmentDateApiService
    private let errorHandler: ErrorHandlerProtocol
    
    init(presenter: SetAvailabilityPresenterProtocol,
         appointmentDateApiService: AppointmentDateApiService,
         errorHandler: ErrorHandlerProtocol) {
        self.presenter = presenter
        self.appointmentDateApiService = appointmentDateApiService
        self.errorHandler = errorHandler
    }
    
    func handleSetAvailability(appointmentId: Int,
                               dateId: Int,
                               comment: String,
                               availability: AvailabilityTypeModel) {
        appointmentDateApiService.setAvailability(appointmentId: appointmentId,
                                                  appointmentDateId: dateId,
                                                  comment: comment,
                                                  availability: availability) {
                                                    [weak self] result in
                                                    print("ðŸ˜ˆ", result)
                                                    switch result {
                                                    case .success:
                                                        print(result)
                                                        self?.presenter.presentSetAvailability()
                                                    case .failure(let error):
                                                        self?.errorHandler.handle(error)
                                                    }
        }
    }
    
    func handleViewDidLoad(date: AppointmentDate?) {
        self.date = date
        guard let date = self.date else { return }
        presenter.presentGetDateTime(date: date)
    }
}
