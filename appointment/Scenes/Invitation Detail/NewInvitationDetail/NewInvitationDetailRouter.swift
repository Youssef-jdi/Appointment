//
//  NewInvitationDetailRouter.swift
//  appointment
//
//  Created by Irina Filkovskaya on 29/06/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewInvitationDetailRouterProtocol {
    func set(viewController: NewInvitationDetailViewControllerProtocol)
    func route(to scene: NewInvitationDetailRouter.Scene)
}

class NewInvitationDetailRouter: NSObject, NewInvitationDetailRouterProtocol {
    private weak var viewController: NewInvitationDetailViewControllerProtocol?
    private let invitationStoryboard: Storyboard
    private let chatStoryboard: Storyboard
    private let popupStoryboard: Storyboard
    private let invitationDetailStoryboard: Storyboard

    init(
        chatStoryboard: Storyboard,
        invitationStoryboard: Storyboard,
        invitationDetailStoryboard: Storyboard,
        popupStoryboard: Storyboard
    ) {
        self.chatStoryboard = chatStoryboard
        self.invitationStoryboard = invitationStoryboard
        self.invitationDetailStoryboard = invitationDetailStoryboard
        self.popupStoryboard = popupStoryboard
    }
    
    enum Scene {
        case cancel(delegate: CustomPopupWithTwoButtonsDelegate)
        case availabilityOverview(appointmentDate: AppointmentDate)
        case setAvailability(appointmentDate: AppointmentDate, pageNumber: String)
        case chat(title: String, invitation: Appointment)
        case addDate(invitation: Appointment)
        case selectDate(appointment: Appointment)
        case backToInvitations
        case todo(title: String)
        case attachments(title: String)
        case newChat(title: String, invitation: Appointment)
        case setReminder
    }

    func set(viewController: NewInvitationDetailViewControllerProtocol) {
        self.viewController = viewController
    }
    
    func route(to scene: NewInvitationDetailRouter.Scene) {
        switch scene {
        case .cancel(let delegate):
            guard let vc = popupStoryboard.viewController(identifier: CustomPopUpStoryboardId.twoButton) as? CustomPopupWithTwoButtonsViewController else { return }
            vc.set(delegate: delegate)
            vc.set(popupType: .cancelAppointment)
            viewController?.present(vc, animated: true, completion: nil)
        case .availabilityOverview(let appointmentDate):
            guard let vc = invitationStoryboard.viewController(identifier: InvitationStoryboardId.availabilityOverview) as? AvailabilityOverviewViewController else { return }
            vc.set(date: appointmentDate)
            viewController?.show(vc, sender: nil)
        case .setAvailability(let appointmentDate, let pageNumber):
            guard let vc = invitationStoryboard.viewController(identifier: InvitationStoryboardId.setAvailability) as? SetAvailabilityViewController else { return }
            vc.set(pageNumber: pageNumber)
            vc.set(date: appointmentDate)
            viewController?.show(vc, sender: nil)
        case .chat(let title, let invitation), .newChat(let title, let invitation):
            guard let vc = chatStoryboard.viewController(identifier: ChatStoryboarddId.chat) as? ChatViewController else { return }
            vc.set(navigationTitle: title)
            vc.set(invitation: invitation)
            viewController?.show(vc, sender: nil)
        case .todo(let title), .attachments(let title):
            guard let vc = chatStoryboard.viewController(identifier: ChatStoryboarddId.chat) as? ChatViewController else { return }
            vc.set(navigationTitle: title)
            viewController?.show(vc, sender: nil) // TODO: Implement routing to proper screens
        case .addDate(let invitation):
            guard let vc = invitationDetailStoryboard.viewController(identifier: InvitationDetailStoryboardId.addDate) as? AddDateViewController else { return }
            vc.set(invitation: invitation)
            vc.set(delegate: viewController)
            viewController?.show(vc, sender: nil)
        case .selectDate(let appointment):
            guard let vc = invitationDetailStoryboard.viewController(identifier: InvitationDetailStoryboardId.selectDate) as? InvitationSelectDateViewController else { return }
            vc.set(appointment: appointment)
            vc.set(delegate: viewController as? FinalDateDelegateProtocol)
            viewController?.show(vc, sender: nil)
        case .backToInvitations:
            viewController?.pop(animated: true)
        case .setReminder:
            guard let vc = invitationDetailStoryboard.viewController(identifier: InvitationDetailStoryboardId.addToAgenda) as? AddToAgendaViewController else { return }
            viewController?.show(vc, sender: nil)
        }
    }
}
