//
//  NewInvitationDetailPresenter.swift
//  appointment
//
//  Created by Irina Filkovskaya on 29/06/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol NewInvitationDetailPresenterProtocol {
    func set(viewController: NewInvitationDetailViewControllerProtocol)
    
    func presentBasicInfo(from invitation: Appointment)
    
    /// Presents a date proposed by an invitee to the ivitation creator.
    func presentProposedDate(startDate: Date, endDate: Date)
    
    /// Presents all possible date suggesetions.
    func presentSuggestedDates(from data: [AppointmentDate])
    
    /// Presents the final date for the invitation.
    func presentSelectedDate(from data: AppointmentDate)
    func presentAddFinalDateToAgenda(creator: Bool, date: AppointmentDate)
    
    func presentCalendarStatusSet(isAdded: Bool)
    
    func presentAddons(_ data: [InvitationAddon])
    func presentChats(_ chats: [InvitationAddon])
    
    func presentLocation(latitude: Double, longitude: Double)
    func presentEmptyLocation()
    
    func presentCancelInvitationSuccess()

    func presentSetIncomingFinalDate(proposed finalDate: AppointmentDate)
}

class NewInvitationDetailPresenter: NewInvitationDetailPresenterProtocol {
    private weak var viewController: NewInvitationDetailViewControllerProtocol?
    private let viewModelProvider: AppointmentViewModelProviderProtocol
    private let dateFormatter: DateFormatterProtocol
    
    init(
        viewModelProvider: AppointmentViewModelProviderProtocol,
        dateFormatter: DateFormatterProtocol
        ) {
        self.viewModelProvider = viewModelProvider
        self.dateFormatter = dateFormatter
    }

    func set(viewController: NewInvitationDetailViewControllerProtocol) {
        self.viewController = viewController
    }
    
    // MARK: - Presentation logic
    
    func presentBasicInfo(from invitation: Appointment) {
        let viewModel = viewModelProvider.basicViewModel(from: invitation)
        viewController?.displayBasicInfo(viewModel)
    }
    
    func presentProposedDate(startDate: Date, endDate: Date) {
        let startDayString = dateFormatter.formatDate(date: startDate,
                                                      format: "dd MMMM yyyy")
        let startTimeString = dateFormatter.formatDate(date: startDate,
                                                       format: " HH:mm")
        let endTimeString = dateFormatter.formatDate(date: endDate,
                                                     format: " HH:mm")
        let dateString = startDayString + " van " + startTimeString + "-" + endTimeString
        // TODO: add loacalisable for eng/dutch later
        viewController?.displayProposedDate(dateString: dateString)
    }
    
    func presentAddons(_ data: [InvitationAddon]) {
        viewController?.displayAddons(data)
    }
    
    func presentChats(_ chats: [InvitationAddon]) {
        viewController?.displayChats(chats)
    }

    func presentCancelInvitationSuccess() {
        viewController?.displayCancelInvitationSuccess()
    }
    
    func presentSuggestedDates(from data: [AppointmentDate]) {
//        let viewModels = data.map {
//            viewModelProvider.dateViewModel(from: $0)
//        }
//        viewController?.displaySuggestedDates(viewModels)
        viewController?.displaySuggestedDates(data)
    }
    
    func presentSelectedDate(from data: AppointmentDate) {
//        viewController?.displaySelectedDate(
//            viewModelProvider.dateViewModel(from: data)
//        )
        viewController?.displaySelectedDate(data)
    }
    
    func presentCalendarStatusSet(isAdded: Bool) {
        viewController?.displayCalendarStatusSet(isAdded: isAdded)
    }

    func presentAddFinalDateToAgenda(creator: Bool, date: AppointmentDate) {
        viewController?.displayAddFinalDateToCalendarDialogue(
            creator: creator,
            title: date.appointmentTitle ?? ""
        )
    }

    func presentLocation(latitude: Double, longitude: Double) {
        viewController?.displayLocation(
            CLLocationCoordinate2D(
                latitude: latitude,
                longitude: longitude
            ))
    }
    
    func presentEmptyLocation() {
        viewController?.displayEmptyLocation()
    }

    func presentSetIncomingFinalDate(proposed finalDate: AppointmentDate) {
        let dateViewModel = viewModelProvider.dateViewModel(from: finalDate)
        viewController?.displayIncomingFinalDate(date: "\(dateViewModel.date) van \(dateViewModel.start) - \(dateViewModel.end)", isConflicted: true, title: finalDate.appointmentTitle ?? "")
    }
}
