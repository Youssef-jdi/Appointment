//
//  DayCalendarInteractor.swift
//  appointment
//
//  Created by Irina Filkovskaya on 08.07.2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DayCalendarInteractorProtocol {
    func handleSet(_ date: Date)
    func handleViewDidLoad()
    func handleDateChanged(_ date: Date)
}

class DayCalendarInteractor: DayCalendarInteractorProtocol {
    // MARK: - Properties
    private var date: Date?
    
    // MARK: - DI
    private let presenter: DayCalendarPresenterProtocol
    private let dateProvider: DateProviderProtocol
    private let dateFormatter: DateFormatterProtocol
    private let appointmentDateDataService: AppointmentDateDataServiceProtocol
    private let errorHandler: ErrorHandlerProtocol
    
    init(
        presenter: DayCalendarPresenterProtocol,
        dateProvider: DateProviderProtocol,
        dateFormatter: DateFormatterProtocol,
        appointmentDateDataService: AppointmentDateDataServiceProtocol,
        errorHandler: ErrorHandlerProtocol
    ) {
        self.presenter = presenter
        self.dateProvider = dateProvider
        self.dateFormatter = dateFormatter
        self.appointmentDateDataService = appointmentDateDataService
        self.errorHandler = errorHandler
    }
//
//    func set(presenter: DayCalendarPresenterProtocol) {
//        self.presenter = presenter
//    }
    
    func handleSet(_ date: Date) {
        self.date = date
        presenter.presentInitial(date: date)
    }
    
    func handleViewDidLoad() {
        guard let date = date else { return }
//        presenter?.presentDate(date, )
        fetchAppointments(for: date, isInitial: true)
    }
    
    func handleDateChanged(_ date: Date) {
        presenter.presentDate(date)
        fetchAppointments(for: date, isInitial: false)
    }
}

// MARK: - Privates
private extension DayCalendarInteractor {
    func fetchAppointments(for date: Date, isInitial: Bool) {
        
        let day = dateProvider.startOfDay(for: date) // TODO: returned 22:00 for the previous day
        let dayAsInt64 = dateFormatter.int64(from: day)
        
        appointmentDateDataService
            .fetchAppointmentDates(for: dayAsInt64) { [weak self] result in
                switch result {
                case .success(let appointments):
                    Console.log(type: .success, "Appointments for the date fetched successfully! Count: \(appointments.count)")
                    let newAppointments = appointments
                        .compactMap { $0 as? AppointmentDateEntity }
                        .map { AppointmentDate.map(from: $0 ) }
                    self?.presenter.presentSchedule(
                        newAppointments,
                        isInitial: isInitial)

                case .failure(let error):
                    self?.errorHandler.handle(error)
                }
            }
    }
}
