//
//  DayCalendarViewController.swift
//  appointment
//
//  Created by Irina Filkovskaya on 08.07.2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DayCalendarViewControllerProtocol: class {
    func set(interactor: DayCalendarInteractorProtocol)
    func set(dataSource: DayCalendarDataSourceProtocol)
    
    func set(title: String?, date: Date)
    func setInitialDate(_ dateString: String)
    func setNew(date: Date)
    
    func displayDate(_ dateString: String)
    func displayCalendar(from model: [Int: [CalendarItem?]], isInitial: Bool)
}

class DayCalendarViewController: UIViewController, DayCalendarViewControllerProtocol {
    // MARK: - Properties
    
    // MARK: - IBOutlets
    @IBOutlet weak var collectionView: UICollectionView!
    
    // MARK: - DI
    private var interactor: DayCalendarInteractorProtocol?
    private var dataSource: DayCalendarDataSourceProtocol?
    
    func set(interactor: DayCalendarInteractorProtocol) {
        self.interactor = interactor
    }
    
    func set(dataSource: DayCalendarDataSourceProtocol) {
        self.dataSource = dataSource
    }

    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectionView()
        interactor?.handleViewDidLoad()
    }
}

// MARK: - Protocol Methods
extension DayCalendarViewController {
    func set(title: String?, date: Date) {
        dataSource?.set(title: title)
        interactor?.handleSet(date)
    }
    
    func setInitialDate(_ dateString: String) {
        dataSource?.set(date: dateString)
    }
    
    func setNew(date: Date) {
        interactor?.handleDateChanged(date)
    }
    
    func displayDate(_ dateString: String) {
        dataSource?.set(date: dateString)
        collectionView.reloadData()
    }

    func displayCalendar(from model: [Int: [CalendarItem?]], isInitial: Bool) {
        dataSource?.set(items: model)
        !isInitial ? collectionView.reloadData() : ()
    }
}

// MARK: - Privates
private extension DayCalendarViewController {
    func setupCollectionView() {
        collectionView.register(
            UINib(
                nibName: "AddDateCollectionCell",
                bundle: nil
            ),
            forCellWithReuseIdentifier: AddDateCollectionCell.identifier
        )
        collectionView.register(
            UINib(
                nibName: "CollectionReusableView",
                bundle: nil
        ),
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: "CollectionReusableView"
        )
        collectionView.dataSource = dataSource
        collectionView.delegate = self
        setupCollectionViewLayout()
    }

    func setupCollectionViewLayout() {
        guard let flow = collectionView.collectionViewLayout as? UICollectionViewFlowLayout else { return }
        flow.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        flow.minimumLineSpacing = 0
        flow.minimumInteritemSpacing = 10
        flow.itemSize = CGSize(width: view.frame.width, height: 60)
        flow.headerReferenceSize = CGSize(width: view.frame.width, height: 100)
    }
}

extension DayCalendarViewController: UICollectionViewDelegate {}
