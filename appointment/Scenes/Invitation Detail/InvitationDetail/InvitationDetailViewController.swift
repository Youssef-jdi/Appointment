//
//  InvitationDetailViewController.swift
//  appointment
//
//  Created by Youssef Jdidi on 3/5/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import MapKit

//sourcery: AutoMockable
protocol InvitationDetailViewControllerProtocol: UIViewControllerRouting, AddDateDelegate {
    func set(interactor: InvitationDetailInteractorProtocol)
    func set(router: InvitationDetailRouterProtocol)
    func set(dataSource: InvitationDetailDataSourceProtocol)
    func set(invitation: Appointment?, isOutgoing: Bool)
    
    // TODO: add the functions that are called from the presenter
    func display(error: Error)
    func displayCancelInvitationSuccess()
    func displayCancelInvitationFailure(error: String)
    func displayProposedDate(dateString: String)
    func displayProposedDatesIsEmpty()
}

class InvitationDetailViewController: UIViewController, InvitationDetailViewControllerProtocol {
    
    // MARK: - Properties
    private var isBeingEdited = false
    private var invitation: Appointment?
    private var isOutgoing: Bool = true

    // MARK: - DI
    var interactor: InvitationDetailInteractorProtocol?
    var router: InvitationDetailRouterProtocol?
    var dataSource: InvitationDetailDataSourceProtocol?
    
    func set(interactor: InvitationDetailInteractorProtocol) {
        self.interactor = interactor
    }
    
    func set(router: InvitationDetailRouterProtocol) {
        self.router = router
    }
    
    func set(dataSource: InvitationDetailDataSourceProtocol) {
        self.dataSource = dataSource
    }
    
    // MARK: - IBOutlets
    
    @IBOutlet weak var topDialogueView: TopDialogueView!
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            setupTableView()
        }
    }
    @IBOutlet weak var bottomButtonsStackView: UIStackView!
    @IBOutlet weak var cancelButton: UIButton!
    @IBOutlet weak var suggestDateButton: UIButton!

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        topDialogueView.delegate = self
        setupDataSource()
        setupTableView()
        setupBottomButtons()
        isOutgoing ? setupNavigationOutGoing() : setupNavigationInComing()
    }
    
    // MARK: - Actions
    @IBAction func cancelClicked(_ sender: Any) {
        router?.route(to: .cancel(delegate: self))
    }
    
    @IBAction func newDateButtonTapped(_ sender: Any) {
        guard let invitation = invitation else { return }
        router?.route(to: .addDate(invitation: invitation))
    }
    
    @objc func pinTapped() {
        guard let appointment = invitation else { return }
        router?.route(to: .selectDate(appointment: appointment))
    }
    
    @objc func menuClicked() {
        sideMenuController?.revealMenu()
    }
    
    @objc func pencilButtonTapped() {
        isBeingEdited = true
        setupNavigationEditing()
        tableView.reloadData()
    }
    
    @objc func saveInvitation() {
        // TODO: saving the edited description and/or location
        isOutgoing ? setupNavigationOutGoing() : setupNavigationInComing()
        isBeingEdited = false
        tableView.reloadData()
    }
}

// MARK: - Protocol Methods
extension InvitationDetailViewController {
    
    func set(invitation: Appointment?, isOutgoing: Bool) {
        self.invitation = invitation
        self.isOutgoing = isOutgoing
        interactor?.handleSetProposedDates(invitation: self.invitation!)
    }

    //TO DO: replace with error handler in interactor
    func display(error: Error) {
        Console.log(type: .error, error.localizedDescription)
    }
    
    func displayCancelInvitationSuccess() {
        router?.route(to: .backToInvitations)
    }
    
    //TO DO: replace with error handler in interactor
    func displayCancelInvitationFailure(error: String) {
        Console.log(type: .error, error)
    }
    
    func displayProposedDate(dateString: String) {
        topDialogueView.isHidden = false
        topDialogueView.configure(title: "Er is een nieuwe datum voorgesteld door job Nijdam in Party op: " + dateString,
                                       description: "Deze datum toevoegen aan beschikbare data in de groepsgesprek?",
                                       cancelButtonTitle: "NIET TOEVOEGEN",
                                       addButtonTitle: "TOEVOEGEN")
        tableView.reloadData()
    }
    
    func displayProposedDatesIsEmpty() {
        topDialogueView.isHidden = true
        tableView.reloadData()
    }
    
    func didAdd(date: AppointmentDate) {
        guard var dates = dataSource?.data() else { return }
        dates.append(date)  
        dataSource?.set(dates: dates)
        tableView.reloadData()
    }
}

// MARK: - Privates
private extension InvitationDetailViewController {
    
    // MARK: - Data source

    func setupDataSource() {
        tableView.dataSource = dataSource
        guard let invitation = invitation,
            let dates = invitation.dates else { return }
        dataSource?.set(invitation: invitation)
        dataSource?.set(dates: dates)
        dataSource?.set(isOutGoing: isOutgoing)
    }
    
    // MARK: - Table View
    func setupTableView() {
        tableView.register(UINib(resource: R.nib.pickedDateView), forCellReuseIdentifier: R.nib.pickedDateView.identifier)
        tableView.register(UINib(resource: R.nib.invitationProposedDateCell), forCellReuseIdentifier: R.nib.invitationProposedDateCell.identifier)
        tableView.register(UINib(resource: R.nib.invitationSetupCell), forCellReuseIdentifier: R.nib.invitationSetupCell.identifier)
        
        tableView.register(UINib(resource: R.nib.invitationDetailHeaderView), forCellReuseIdentifier: R.nib.invitationDetailHeaderView.identifier)
        tableView.register(UINib(resource: R.nib.invitationDetailFooterView), forCellReuseIdentifier: R.nib.invitationDetailFooterView.identifier)
        tableView.register(UINib(resource: R.nib.invitationDetailDateTitleView), forCellReuseIdentifier: R.nib.invitationDetailDateTitleView.identifier )
        tableView.delegate = self
    }
    
    // MARK: - Navigation
    func setupNavigationEditing() {
        navigationItem.title = R.string.localizable.editInvitation()
        let checkItem = UIBarButtonItem(
            image: R.image.invıtationItems.icn_check_white(),
            style: .plain,
            target: self,
            action: #selector(saveInvitation)
        )
        navigationItem.rightBarButtonItems = [checkItem]
        navigationItem.leftBarButtonItems = []
    }
    
    func setupNavigationOutGoing() {
        navigationItem.title = R.string.localizable.outgoing()
        let menuItem = UIBarButtonItem(
            image: R.image.menu_Button(),
            style: .plain,
            target: self,
            action: #selector(menuClicked)) 
        let pinItem = UIBarButtonItem(
            image: R.image.invıtationItems.pin1(),
            style: .plain,
            target: self,
            action: #selector(pinTapped)
        )
        let pencilItem = UIBarButtonItem(
            image: R.image.invıtationItems.icn_pencil(),
            style: .plain,
            target: self,
            action: #selector(pencilButtonTapped)
        )
        navigationItem.leftBarButtonItem = menuItem
        navigationItem.rightBarButtonItems = [pencilItem, pinItem]
    }
    
    func setupNavigationInComing() {
        navigationItem.title = R.string.localizable.incoming()
        let menuItem = UIBarButtonItem(
            image: R.image.menu_Button(),
            style: .plain,
            target: self,
            action: #selector(menuClicked)
        ) // Todo: Open menu
        navigationItem.leftBarButtonItem = menuItem
    }
    
    // MARK: - Buttons
    func setupBottomButtons() {
        cancelButton.setTitle(
            R.string.localizable.denyInvitation().uppercased(),
            for: .normal
        )
        suggestDateButton.setTitle(
            R.string.localizable.suggestDateInvitation().uppercased(),
            for: .normal
        )
        switch invitation?.appointmentStatus {
        case .cancelled:
            bottomButtonsStackView.removeFromSuperview()
        default: break
        }
    }
}

// MARK: - Table View Delegate
extension InvitationDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard section == 0 else { return nil }
        guard let headerView = tableView.dequeueReusableCell(withIdentifier: R.nib.invitationDetailHeaderView.identifier) as? InvitationDetailHeaderView
            else { return UIView(frame: .zero) }

        isBeingEdited ?
            headerView.updateInvitationDetails(invitation: invitation) :
            headerView.setupHeaderView(invitation: invitation)
        return headerView
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        guard let footerView = tableView.dequeueReusableCell(withIdentifier: R.nib.invitationDetailFooterView.identifier) as? InvitationDetailFooterView else { return nil }
        footerView.setupMap(invitation: invitation)
        return section == 2 ? footerView : nil
    }

    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return section == 2 ? view.frame.height * 0.3 : .leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        switch indexPath.section {
        case 1:
            guard let date = dataSource?.data()[indexPath.row] else {
                return assertionFailure("dates is nil")
            }
            router?.route(to: .availabilityOverview(appointmentDate: date))
        case 2:
            guard let invitation = invitation else { return }
            // NOTE: This is a temporary implementation with passing the screen title from the cell to the following screen title
            guard let cell = tableView.cellForRow(at: indexPath) as? InvitationSetupCell else {
                router?.route(to: .chat(title: "", invitation: invitation))
                return
            }
            router?.route(to: .chat(title: cell.titleLabel.text ?? "", invitation: invitation))
        default:
            break
        }
    }
}

// MARK: - CustomPopupWithTwoButtonsDelegate
extension InvitationDetailViewController: CustomPopupWithTwoButtonsDelegate {
    func tappedRightButton() {
        guard let invitation = invitation else { return }
        
        let asAdmin: ()? = interactor?.cancelAsCreator(invitation: invitation)
        let asInvited: ()? = interactor?.cancelAsInvitee(invitation: invitation)
        
        isOutgoing ? asAdmin : asInvited
    }
}

extension InvitationDetailViewController: TopDialogueViewDelegate {
    func cancelButtonTapped(at sender: TopDialogueType?) {
        guard let invitation = invitation else { return }
        switch sender {
        case .newProposedDate:
            interactor?.handleRejectProposedDate(invitation: invitation)
        default: break
        }
    }
    
    func confirmButtonTapped(at sender: TopDialogueType?) {
        guard let invitation = invitation else { return }
        switch sender {
        case .newProposedDate:
            interactor?.handleAcceptProposedDate(invitation: invitation)
        default: break
        }
    }
}
