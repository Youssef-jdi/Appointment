////
//  InvitationDetailRouter.swift
//  appointment
//
//  Created by Youssef Jdidi on 3/5/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol InvitationDetailRouterProtocol {
    func set(viewController: InvitationDetailViewControllerProtocol?)
    func route(to scene: InvitationDetailRouter.Scene)
}

class InvitationDetailRouter: NSObject, InvitationDetailRouterProtocol {
    
    // MARK: - DI
    private weak var viewController: InvitationDetailViewControllerProtocol?
    private let invitationStoryboard: Storyboard
    private let chatStoryboard: Storyboard
    private let popupStoryboard: Storyboard
    private let invitationDetailStoryboard: Storyboard
    
    func set(viewController: InvitationDetailViewControllerProtocol?) {
        self.viewController = viewController
    }

    init(
        chatStoryboard: Storyboard,
        invitationStoryboard: Storyboard,
        invitationDetailStoryboard: Storyboard,
        popupStoryboard: Storyboard
    ) {
        self.chatStoryboard = chatStoryboard
        self.invitationStoryboard = invitationStoryboard
        self.invitationDetailStoryboard = invitationDetailStoryboard
        self.popupStoryboard = popupStoryboard
    }
}

// MARK: Routing logic
extension InvitationDetailRouter {
    
    enum Scene {
        case cancel(delegate: CustomPopupWithTwoButtonsDelegate)
        case availabilityOverview(appointmentDate: AppointmentDate)
        case chat(title: String, invitation: Appointment)
        case addDate(invitation: Appointment)
        case selectDate(appointment: Appointment)
        case backToInvitations
        case todo(title: String)
        case attachments(title: String)
        case newChat(title: String, invitation: Appointment)
    }
    
    func route(to scene: InvitationDetailRouter.Scene) {
        switch scene {
        case .cancel(let delegate):
            guard let vc = popupStoryboard.viewController(identifier: CustomPopUpStoryboardId.twoButton) as? CustomPopupWithTwoButtonsViewController else { return }
            vc.set(delegate: delegate)
            vc.set(popupType: .cancelAppointment)
            viewController?.present(vc, animated: true, completion: nil)
        case .availabilityOverview(let appointmentDate):
            guard let vc = invitationStoryboard.viewController(identifier: InvitationStoryboardId.availabilityOverview) as? AvailabilityOverviewViewController else { return }
            vc.set(date: appointmentDate)
            viewController?.show(vc, sender: nil)
        case .chat(let title, let invitation), .newChat(let title, let invitation):
            guard let vc = chatStoryboard.viewController(identifier: ChatStoryboarddId.chat) as? ChatViewController else { return }
            vc.set(navigationTitle: title)
            vc.set(invitation: invitation)
            viewController?.show(vc, sender: nil)
        case .todo(let title), .attachments(let title):
            guard let vc = chatStoryboard.viewController(identifier: ChatStoryboarddId.chat) as? ChatViewController else { return }
            vc.set(navigationTitle: title)
            viewController?.show(vc, sender: nil) // TODO: Implement routing to proper screens
        case .addDate(let invitation):
            guard let vc = invitationDetailStoryboard.viewController(identifier: InvitationDetailStoryboardId.addDate) as? AddDateViewController else { return }
            vc.set(invitation: invitation)
            vc.set(delegate: viewController)
            viewController?.show(vc, sender: nil)
        case .selectDate(let appointment):
            guard let vc = invitationDetailStoryboard.viewController(identifier: InvitationDetailStoryboardId.selectDate) as? InvitationSelectDateViewController else { return }
            vc.set(appointment: appointment)
            viewController?.show(vc, sender: nil)
        case .backToInvitations:
            viewController?.pop(animated: true)
        }
    }
}
