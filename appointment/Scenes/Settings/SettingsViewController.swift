//
//  SettingsViewController.swift
//  appointment
//
//  Created by Raluca Mesterca on 06/05/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol SettingsViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: SettingsInteractorProtocol)
    func set(router: SettingsRouterProtocol)

    func displayData(authenticatedUserStatus: Bool)
    func display(settings: Settings)
    func displayLogoutPopout(email: String)

    func displayLogout()
}

//TO DO: timeline type + status on timeline
class SettingsViewController: UIViewController, SettingsViewControllerProtocol {

    // MARK: DI
    var interactor: SettingsInteractorProtocol?
    var router: SettingsRouterProtocol?

    func set(interactor: SettingsInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: SettingsRouterProtocol) {
        self.router = router
    }

    // MARK: Outlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var logoutButton: ButtonDoneRight! {
        didSet {
            logoutButton.setTitle(
                R.string.localizable.logout().uppercased(),
                for: .normal)
        }
    }

    // MARK: Properties
    var dataSource = SettingsDataSource()

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setUpNavigationBar()
        configureTableView()
        interactor?.handleViewDidLoad()
    }

    // MARK: Actions
    @IBAction func logoutButtonPressed(_ sender: ButtonDoneRight) {
        interactor?.getUser()
    }
}

// MARK: Configure Methods
extension SettingsViewController {

    func configureTableView() {
        tableView.delegate = self
        tableView.dataSource = dataSource
    }

    // swiftlint:disable discouraged_object_literal
     func setUpNavigationBar() {
        navigationItem.title = R.string.localizable.settings().capitalizingFirstLetter()
         let menuItem = UIBarButtonItem(image: #imageLiteral(resourceName: "Menu_Button"), style: .plain, target: self, action: #selector(menuButtonTapped))
         navigationItem.leftBarButtonItems = [menuItem]
     }

    @objc func menuButtonTapped(_ sender: UIButton) {
        interactor?.update(settings: dataSource.settingsToSave())
        sideMenuController?.revealMenu()
    }
}

extension SettingsViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cellType = dataSource.dataSource[indexPath.row].type
        return cellType == .header ? 30 : 50
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let cellModel = dataSource.dataSource[indexPath.row]
        print("Cell \(cellModel.title) was selected")

        if cellModel.title == R.string.localizable.login().uppercased()
            || cellModel.title == R.string.localizable.register().uppercased() {
            router?.route(to: .loginOverview)
        }
    }
}

// MARK: Methods
extension SettingsViewController {

    func displayData(authenticatedUserStatus: Bool) {
        dataSource.setDataSource(isUserLoggedIn: authenticatedUserStatus)
        logoutButton.isHidden = !authenticatedUserStatus
    }

    func display(settings: Settings) {
        dataSource.set(settings: settings)
        tableView.reloadData()
    }

    func displayLogout() {
        router?.route(to: .loginOverview)
    }

    func displayLogoutPopout(email: String) {
        router?.route(to: .logoutPopup(delegate: self, email: email))
    }
}

// MARK: Logout Delegate
extension SettingsViewController: CustomPopupWithTwoButtonsDelegate {
    func tappedRightButton() {
        interactor?.update(settings: dataSource.settingsToSave())
        interactor?.logoutUser()
    }
}
