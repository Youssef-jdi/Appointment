//
//  SettingsInteractor.swift
//  appointment
//
//  Created by Raluca Mesterca on 06/05/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol SettingsInteractorProtocol {
    func handleViewDidLoad()
    func getUser()
    func update(settings: Settings)
    func logoutUser()
}

class SettingsInteractor: SettingsInteractorProtocol {

    // MARK: DI
    var presenter: SettingsPresenterProtocol
    private let settingsService: SettingsServiceProtocol
    private let settingsDataService: SettingsDataServiceProtocol
    private let authManager: AuthManagerProtocol
    private let userDataService: CurrentUserDataServiceProtocol
    private let errorHandler: ErrorHandlerProtocol

    init(
        presenter: SettingsPresenterProtocol,
        settingsService: SettingsServiceProtocol,
        settingsDataService: SettingsDataServiceProtocol,
        authManager: AuthManagerProtocol,
        userDataService: CurrentUserDataServiceProtocol,
        errorHandler: ErrorHandlerProtocol
    ) {
        self.presenter = presenter
        self.authManager = authManager
        self.userDataService = userDataService
        self.settingsService = settingsService
        self.settingsDataService = settingsDataService
        self.errorHandler = errorHandler
    }
}

// MARK: Methods
extension SettingsInteractor {

    func handleViewDidLoad() {
        guard settingsService.isUserLoggedIn else {
            presenter.presentData(authenticatedUserStatus: false)
            return
        }

        presenter.presentData(authenticatedUserStatus: settingsService.isUserLoggedIn)
        getSettings()
    }

    func getSettings() {
        settingsService.getSettings { [weak self] result in
            switch result {
            case .success(let data):
                self?.saveSettings(settings: data)
            case .failure(let error):
                self?.errorHandler.handle(error)
            }
        }
    }

    func update(settings: Settings) {
        settingsService.updateSettings(settings: settings) { [weak self] result in
            switch result {
            case .success(let data):
                self?.saveSettings(settings: data)
            case .failure(let error):
                self?.errorHandler.handle(error)
            }
        }
    }

    func getUser() {
        userDataService.fetchCurrentUser {[weak self] result in
            switch result {
            case .success(let data):
                guard let user = data as? CurrentUserEntity,
                    let email = user.email else { return }
                self?.presenter.presentUserToLogout(email: email)
            case .failure(let error):
                self?.errorHandler.handle(error)
            }
        }
    }

    func logoutUser() {
        authManager.logout()
        userDataService.deleteUser()
        presenter.presentLogout()
    }

    // Save settings locally
    func saveSettings(settings: Settings) {
        settingsDataService.sync(settings: settings) { [weak self] result in
            switch result {
            case .success:
                Console.log(type: .success, "Settings succesfully saved")
                self?.presenter.present(settings: settings)
            case .failure(let error):
                self?.errorHandler.handle(error)
            }
        }
    }
}
