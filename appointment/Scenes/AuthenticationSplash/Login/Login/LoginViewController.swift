//
//  LoginViewController.swift
//  appointment
//
//  Created by Raluca Mesterca on 13/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol LoginViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: LoginInteractorProtocol)
    func set(router: LoginRouterProtocol)
    func set(alertPresenter: AlertPresenterProtocol)
    
    func displayGeneric(error: String)
    func displayInvalidEmail(error: String)
    func displayInvalidPassword(error: String)
    
    func handleLoginSuccess()
    func handleLoginFailure(error: String)
}

class LoginViewController: UIViewController, LoginViewControllerProtocol {

    // MARK: - DI
    var interactor: LoginInteractorProtocol?
    var router: LoginRouterProtocol?
    var alertPresenter: AlertPresenterProtocol?

    func set(interactor: LoginInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: LoginRouterProtocol) {
        self.router = router
    }

    func set(alertPresenter: AlertPresenterProtocol) {
        self.alertPresenter = alertPresenter
    }
    
    // MARK: - Outlets
    @IBOutlet internal weak var errorLabel: UILabel!
    @IBOutlet private weak var loginButton: ButtonDoneRight! {
        didSet {
            loginButton.setTitle(R.string.localizable.login().uppercased(), for: .normal)
        }
    }
    @IBOutlet internal weak var passwordTextField: CustomTextField! {
        didSet {
            passwordTextField.delegate = self
            passwordTextField.placeholder = R.string.localizable.password()
        }
    }
    @IBOutlet internal weak var emailTextField: UITextField! {
        didSet {
            emailTextField.delegate = self
            emailTextField.placeholder = R.string.localizable.email()
        }
    }
    @IBOutlet private weak var forgotPasswordButton: UIButton! {
        didSet {
            forgotPasswordButton.setTitle(R.string.localizable.forgotPassword().uppercased(), for: .normal)
            forgotPasswordButton.titleLabel?.font = .systemFont(ofSize: 17)
        }
    }
    @IBOutlet private weak var noAccountYetButton: UIButton! {
        didSet { noAccountYetButton.setTitle(R.string.localizable.dontHaveAccount().uppercased(), for: .normal) }
    }

    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

//        emailTextField.text = "ok@ok.ok"
//        passwordTextField.text = "Admin123"

//        emailTextField.text = "lonelyguy@lonely.nl"
//        passwordTextField.text = "qwerty"
        setupNavigationBar()
        setupTapToDismiss()
    }
}

// MARK: - IBActions
extension LoginViewController {
    
    @IBAction func loginButtonTapped(_ sender: Any) {
        enableLoginButton(false)
        interactor?.validateFields(email: emailTextField.text, password: passwordTextField.text)
    }
    
    @IBAction func registerButtonTapped(_ sender: Any) {
        router?.route(to: .register)
    }
    
    @IBAction func forgotPasswordButtonTapped(_ sender: Any) {
        router?.route(to: .forgetPassword)
    }
}

// MARK: - Configure Methods
private extension LoginViewController {
    func setupNavigationBar() {
        navigationItem.title = R.string.localizable.login().capitalizingFirstLetter()
        let button = UIBarButtonItem(title: R.string.localizable.skip().uppercased(), style: .plain, target: self, action: #selector(skipButtonTapped))
        navigationItem.rightBarButtonItem = button
    }

    func resetErrors(for textField: UITextField) {
        enableLoginButton(true)
        UIView.animate(withDuration: 0.15) {
            textField.backgroundColor = .white
            textField.textColor = .black
            self.errorLabel.isHidden = true
        }
    }

    func enableLoginButton(_ isEnabled: Bool) {
        loginButton.isEnabled = isEnabled
        loginButton.alpha = isEnabled ? 1 : 0.5
    }
}

// MARK: - Actions
@objc extension LoginViewController {
    func skipButtonTapped() {
        router?.route(to: .home)
    }
}

// MARK: - Protocol Methods
extension LoginViewController {

    func displayGeneric(error: String) {
        enableLoginButton(true)

        displayInvalidEmail(error: error)
        displayInvalidPassword(error: error)
    }
    
    func displayInvalidEmail(error: String) {
        UIView.animate(withDuration: 0.15) {
            self.emailTextField.shake()
            self.emailTextField.textColor = .systemPink
            self.errorLabel.text = error
            self.errorLabel.isHidden = false
        }
    }
    
    func displayInvalidPassword(error: String) {
        UIView.animate(withDuration: 0.15) {
            self.passwordTextField.shake()
            self.passwordTextField.textColor = .systemPink
            self.errorLabel.text = error
            self.errorLabel.isHidden = false
        }
    }
    
    func handleLoginSuccess() {
        enableLoginButton(true)
        router?.route(to: .sync)
    }
    
    func handleLoginFailure(error: String) {
        alertPresenter?.presentAlert(
            title: "Error",
            description: error,
            actions: [UIAlertAction(title: "OK", style: .default, handler: nil)]
        )
    }
}

// MARK: UITextFieldDelegate
extension LoginViewController: UITextFieldDelegate {
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        resetErrors(for: textField)
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case emailTextField:
            passwordTextField.becomeFirstResponder()
            
        case passwordTextField:
            textField.resignFirstResponder()
            interactor?.validateFields(email: emailTextField.text, password: passwordTextField.text)
            
        default: break
        }
        return true
    }
}
