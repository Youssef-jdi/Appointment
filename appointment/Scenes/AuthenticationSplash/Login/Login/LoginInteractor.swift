//
//  LoginInteractor.swift
//  appointment
//
//  Created by Raluca Mesterca on 13/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import CoreData

//sourcery: AutoMockable
protocol LoginInteractorProtocol {
    func validateFields(email: String?, password: String?)
}

class LoginInteractor: LoginInteractorProtocol {
    
    var presenter: LoginPresenterProtocol
    private let dataValidator: DataValidatorProtocol
    private let authManager: AuthManagerProtocol
    
    init(
        dataValidator: DataValidatorProtocol,
        presenter: LoginPresenterProtocol,
        authManager: AuthManagerProtocol
    ) {
        self.dataValidator = dataValidator
        self.presenter = presenter
        self.authManager = authManager
    }
    
    func validateFields(email: String?, password: String?) {
        do {
            try validateDataLogin(email: email, password: password)
            authManager.login(email: email!, password: password!) {[weak self] result in
                switch result {
                case .success: self?.presenter.presentLoginSuccess()
                case .failure: self?.presenter.presentLoginError()
                }
            }
        } catch {
            guard let error = error as? DataValidationError else { return }
            handleValidationError(error)
        }
    }
}

private extension LoginInteractor {

    func validateDataLogin(email: String?, password: String?) throws {
        guard let email = email, let password = password else { throw DataValidationError.emptyFields }
        
        if email.isEmpty && password.isEmpty { throw DataValidationError.emptyFields }
        if email.isEmpty { throw DataValidationError.emptyEmail }
        if password.isEmpty { throw DataValidationError.emptyPassword }

        try dataValidator.validateEmail(email)

        try dataValidator.validatePassword(password)
    }

    func handleValidationError(_ error: DataValidationError) {
        presenter.presentInvalidData(error)
    }
}
