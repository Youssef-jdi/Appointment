//
//  LoginOverviewRouter.swift
//  appointment
//
//  Created by Raluca Mesterca on 13/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol LoginOverviewRouterProtocol {
    func set(viewController: LoginOverviewViewControllerProtocol)

    func route(to scene: LoginOverviewRouter.Scene)
}

class LoginOverviewRouter: NSObject, LoginOverviewRouterProtocol {

    // MARK: DI
    weak var viewController: LoginOverviewViewControllerProtocol?

    func set(viewController: LoginOverviewViewControllerProtocol) {
        self.viewController = viewController
    }

    // MARK: PROPERTIES
    private let rootNavigator: RootNavigatorProtocol
    private let loginStoryboard: Storyboard
    private let tutorialStoryboard: Storyboard
    private let registerStoryboard: Storyboard

    init(
        rootNavigator: RootNavigatorProtocol,
        loginStoryboard: Storyboard,
        registerStoryboard: Storyboard,
        tutorialStoryboard: Storyboard
        ) {
        self.rootNavigator = rootNavigator
        self.loginStoryboard = loginStoryboard
        self.registerStoryboard = registerStoryboard
        self.tutorialStoryboard = tutorialStoryboard
    }
    
    enum Scene {
        case login
        case register
        case tutorial
    }
    
    func route(to scene: LoginOverviewRouter.Scene) {
        switch scene {
        case .login:
            guard let vc = loginStoryboard.viewController(identifier: LoginStoryboardId.login) as? LoginViewController else { return }
            viewController?.show(vc, sender: nil)
        case .register:
            guard let vc = registerStoryboard.viewController(identifier: RegisterStoryboardId.register) as? RegisterViewController else { return }
            viewController?.show(vc, sender: nil)
        case .tutorial:
            guard let vc = tutorialStoryboard.viewController(identifier: TutorialStoryboardId.tutorial) as? TutorialViewController else { return }
            viewController?.show(vc, sender: nil)
        }
    }
}
