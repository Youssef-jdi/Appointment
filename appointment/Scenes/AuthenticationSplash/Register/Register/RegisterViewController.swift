//
//  RegisterViewController.swift
//  appointment
//
//  Created by Youssef Jdidi on 2/17/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol RegisterViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: RegisterInteractorProtocol)
    func set(router: RegisterRouterProtocol)
    func set(alert: AlertPresenterProtocol)

    func displaySelectedImage(image: UIImage)
    func displayFieldError(_ error: DataValidationError)
    func displayRegisterError(_ title: String?, _ error: String?)
    func displayLoginError(_ error: String)
    func displayLoginSuccess()
}

class RegisterViewController: UIViewController, RegisterViewControllerProtocol {

    // MARK: - DI
    var interactor: RegisterInteractorProtocol?
    var router: RegisterRouterProtocol?
    var alert: AlertPresenterProtocol?

    func set(interactor: RegisterInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: RegisterRouterProtocol) {
        self.router = router
    }
    
    func set(alert: AlertPresenterProtocol) {
        self.alert = alert
    }
    
    // MARK: - Outlets
    @IBOutlet weak var addPhotoLabel: UILabel! {
        didSet {
            addPhotoLabel.text = R.string.localizable.addProfilePhoto()
        }
    }
    @IBOutlet private var buttonContainerView: UIView!
    @IBOutlet private weak var scrollView: UIScrollView!
    @IBOutlet private weak var optionalStackView: UIStackView!
    @IBOutlet weak var profilePictureImageView: RoundedImageView!

    @IBOutlet private weak var registerLabel: UILabel! {
        didSet {
            registerLabel.text = R.string.localizable.register()
        }
    }
    // MARK: - Error Labels
    @IBOutlet private weak var optionalErrorLabel: UILabel!
    @IBOutlet weak var errorLabel: UILabel!

    @IBOutlet private weak var registerButton: ButtonDoneRight! {
        didSet {
            registerButton.isEnabled = false
            registerButton.setTitle(R.string.localizable.register().uppercased(), for: .normal)
        }
    }
    @IBOutlet private weak var haveAccountButton: UIButton! {
        didSet {
            haveAccountButton.setTitle(R.string.localizable.haveAccount().uppercased(), for: .normal)
        }
    }
    @IBOutlet private weak var optionalView: UIView! {
        didSet {
            optionalView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleOptionalViewClicked)))
        }
    }
    @IBOutlet private weak var imageStackView: UIStackView! {
        didSet {
            imageStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleImageTapped)))
        }
    }
    @IBOutlet private weak var collapseButton: UIButton! {
        didSet {
            #warning("NOTE-,08-APR-2020,Sam, maybe need to ask designer give new icons")
            collapseButton.setImage(R.image.pointerBottom(), for: .normal)
            collapseButton.setImage(R.image.pointerTop(), for: .selected)
        }
    }

    // MARK: - Input Outlets
    @IBOutlet weak var nameTextfield: CustomTextField! {
        didSet {
            nameTextfield.delegate = self
            nameTextfield.placeholder = R.string.localizable.firstName()
            nameTextfield.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        }
    }
    @IBOutlet weak var lastNameTextfield: CustomTextField! {
        didSet {
            lastNameTextfield.delegate = self
            lastNameTextfield.placeholder = R.string.localizable.lastName()
            lastNameTextfield.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        }
    }
    @IBOutlet weak var emailTextField: CustomTextField! {
        didSet {
            emailTextField.delegate = self
            emailTextField.placeholder = R.string.localizable.email()
            emailTextField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        }
    }
    @IBOutlet weak var passwordTextfield: CustomTextField! {
        didSet {
            passwordTextfield.delegate = self
            passwordTextfield.placeholder = R.string.localizable.password()
            passwordTextfield.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        }
    }
    @IBOutlet weak var confirmPasswordTextfield: CustomTextField! {
        didSet {
            confirmPasswordTextfield.delegate = self
            confirmPasswordTextfield.placeholder = R.string.localizable.rePassword()
            confirmPasswordTextfield.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        }
    }
    @IBOutlet private weak var optionalLabel: UILabel! {
        didSet {
            optionalLabel.text = R.string.localizable.complementaryLabel()
        }
    }

    // MARK: - Optional Input Outlets
    @IBOutlet weak var functionTextfield: CustomTextField! {
        didSet {
            functionTextfield.delegate = self
            functionTextfield.placeholder = R.string.localizable.function()
        }
    }
    @IBOutlet weak var KvKTextfield: CustomTextField! {
        didSet {
            KvKTextfield.delegate = self
            KvKTextfield.placeholder = R.string.localizable.kvkNumber()
        }
    }
    @IBOutlet weak var addressTextfield: CustomTextField! {
        didSet {
            addressTextfield.delegate = self
            addressTextfield.placeholder = R.string.localizable.address()
        }
    }
    @IBOutlet weak var postalCodeTextfield: CustomTextField! {
        didSet {
            postalCodeTextfield.delegate = self
            postalCodeTextfield.placeholder = R.string.localizable.postalCode()
        }
    }
    
    // MARK: - Properties
    var imagePicker = UIImagePickerController()
    
    // MARK: - View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        setupNavigationBar()
        setupTapToDismiss()
        setupKeyboardHandling()
        setupInputAccessory()
    }
    
    // MARK: - Object Lifecycle
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - IBActions
    @IBAction internal func registerButtonTapped(_ sender: Any) {
        guard let firstName = nameTextfield.text,
            let lastName = lastNameTextfield.text,
            let email = emailTextField.text,
            let password = passwordTextfield.text,
            let confirmPassword = confirmPasswordTextfield.text else { return assertionFailure() }

        enableRegisterButton(false)

        interactor?.handleRegister(registerRequest: RegisterRequest(
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: password,
            confirmPassword: confirmPassword,
            function: functionTextfield.text,
            kvk: KvKTextfield.text,
            address: addressTextfield.text,
            postCode: postalCodeTextfield.text), profileImage: profilePictureImageView.image)
    }
    
    @IBAction internal func alreadyHaveAccountButtonTapped(_ sender: Any) {
        router?.route(to: .login)
    }
}

// MARK: - Configure Methods
private extension RegisterViewController {
    
    func setupNavigationBar() {
        navigationItem.title = R.string.localizable.register().capitalizingFirstLetter()
        let button = UIBarButtonItem(title: R.string.localizable.skip().uppercased(), style: .plain, target: self, action: #selector(skipButtonTapped))
        navigationItem.rightBarButtonItem = button
    }

    // TO DO: move this to storyboard in the buttonContainerView
    // Wait for the design
    func setupInputAccessory() {
        //buttonContainerView.backgroundColor = .red
        buttonContainerView.frame = CGRect(x: 0, y: 0, width: view.frame.width, height: 60)
        let registerButton = ButtonDoneRight(frame: CGRect(x: 0, y: 0, width: 0.6 * view.bounds.width, height: 40))
        registerButton.setTitle("Register", for: .normal)
        registerButton.fillColor = R.color.appBlue()!

        buttonContainerView.addSubview(registerButton)
        registerButton.center = buttonContainerView.center
        // confirmPasswordTextfield.inputAccessoryView = buttonContainerView
    }

    func resetErrors(for textField: UITextField) {
        UIView.animate(withDuration: 0.15) {
            textField.backgroundColor = .white
            textField.textColor = .black
            self.errorLabel.isHidden = true
        }
    }

    func enableRegisterButton(_ isEnabled: Bool) {
        registerButton.isEnabled = isEnabled
        registerButton.alpha = isEnabled ? 1 : 0.5
    }
}

// MARK: - Actions
@objc extension RegisterViewController {
    func skipButtonTapped() {
        router?.route(to: .home)
    }

    func handleOptionalViewClicked() {
        optionalStackView.isHidden.toggle()
        collapseButton.isSelected.toggle()
    }

    func textFieldDidChange(_ textField: UITextField) {
        registerButton.isEnabled =
            !(emailTextField.text.isEmptyOrNil ||
                passwordTextfield.text.isEmptyOrNil ||
                confirmPasswordTextfield.text.isEmptyOrNil ||
                nameTextfield.text.isEmptyOrNil ||
                lastNameTextfield.text.isEmptyOrNil)
    }

    func handleImageTapped() {
        if UIImagePickerController.isSourceTypeAvailable(.savedPhotosAlbum) {
            self.imagePicker.delegate = self
            self.imagePicker.sourceType = .savedPhotosAlbum
            self.imagePicker.allowsEditing = false
            self.present(self.imagePicker, animated: true, completion: nil)
        }
    }
}

// MARK: - Protocol Methods
extension RegisterViewController {
    
    func displayLoginError(_ error: String) {
        enableRegisterButton(true)
        alert?.presentAlert(title: "Error Login", description: error, actions: [UIAlertAction(title: "Ok", style: .cancel, handler: nil)])
    }
    
    func displayLoginSuccess() {
        enableRegisterButton(true)
        router?.route(to: .home)
    }
    
    func displayRegisterError(_ title: String?, _ error: String?) {
        enableRegisterButton(true)
        alert?.presentAlert(title: title, description: error, actions: [UIAlertAction(title: "Ok", style: .cancel, handler: nil)])
    }
    
    func displaySelectedImage(image: UIImage) {
        profilePictureImageView.image = image
    }
}

// MARK: - Field Error Handling
extension RegisterViewController {

    func displayGeneric() {
        emailTextField.displayError()
        passwordTextfield.displayError()
        nameTextfield.displayError()
        lastNameTextfield.displayError()
        confirmPasswordTextfield.displayError()
    }
    
    func showErrorLabel(_ error: String) {
        errorLabel.text = error
        errorLabel.textColor = .systemPink
        errorLabel.isHidden = false
    }
    
    func displayFieldError(_ error: DataValidationError) {
        registerButton.isUserInteractionEnabled = true
        showErrorLabel(error.localizedDescription)
        switch error {
        case .emptyEmail, .invalidEmail:
            emailTextField.displayError()
        case .emptyPassword, .invalidPassword:
            passwordTextfield.displayError()
        case .emptyFields:
            displayGeneric()
        case .emptyFirstName:
            nameTextfield.displayError()
        case .emptyLastName:
            lastNameTextfield.displayError()
        case .passwordsDontMatch, .emptyConfirmPassword:
            confirmPasswordTextfield.displayError()
        default:
            break
        }
    }
}

// MARK: - UITextFieldDelegate
extension RegisterViewController: UITextFieldDelegate {

    // swiftlint:disable cyclomatic_complexity
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case nameTextfield:
            lastNameTextfield.becomeFirstResponder()
        case lastNameTextfield:
            emailTextField.becomeFirstResponder()
        case emailTextField:
            passwordTextfield.becomeFirstResponder()
        case passwordTextfield:
            confirmPasswordTextfield.becomeFirstResponder()
        case confirmPasswordTextfield:
            guard optionalStackView.isHidden else {
                return functionTextfield.becomeFirstResponder()
            }
            textField.resignFirstResponder()
        case functionTextfield:
            KvKTextfield.becomeFirstResponder()
        case KvKTextfield:
            addressTextfield.becomeFirstResponder()
        case addressTextfield:
            postalCodeTextfield.becomeFirstResponder()
        case postalCodeTextfield:
            textField.resignFirstResponder()
        default: break
        }

        return false
    }

    func textFieldDidBeginEditing(_ textField: UITextField) {
        resetErrors(for: textField)
    }
}

// MARK: KeyBoard Handling
fileprivate extension RegisterViewController {

    func setupKeyboardHandling() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        guard let userInfo = notification.userInfo else { return }
        var keyboardFrame = (userInfo[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue
        keyboardFrame = view.convert(keyboardFrame!, from: nil)
        
        var contentInset: UIEdgeInsets = scrollView.contentInset
        contentInset.bottom = (keyboardFrame?.size.height)!
        
        scrollView.contentInset = UIEdgeInsets(top: contentInset.top, left: contentInset.left, bottom: contentInset.bottom + 20, right: contentInset.right)
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        let contentInset = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
    }
}

// MARK: UIImagePickerControllerDelegate
extension RegisterViewController: UINavigationControllerDelegate, UIImagePickerControllerDelegate {

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {
        guard let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage else { return }
        interactor?.imageSelected(image: image)
        dismiss(animated: true, completion: nil)
    }
}
