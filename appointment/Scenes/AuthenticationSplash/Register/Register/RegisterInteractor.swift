//
//  RegisterInteractor.swift
//  appointment
//
//  Created by Youssef Jdidi on 2/17/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import Moya

//sourcery: AutoMockable
protocol RegisterInteractorProtocol {
    func handleRegister(registerRequest: RegisterRequest, profileImage: UIImage?)
    func imageSelected(image: UIImage)
}

class RegisterInteractor: RegisterInteractorProtocol {
    
    // MARK: DI
    var presenter: RegisterPresenterProtocol
    
    private let dataValidator: DataValidatorProtocol
    private let registerService: RegisterServiceProtocol
    private let authManager: AuthManagerProtocol

    init(
        presenter: RegisterPresenterProtocol,
        dataValidator: DataValidatorProtocol,
        registerService: RegisterServiceProtocol,
        authManager: AuthManagerProtocol
    ) {
        self.presenter = presenter
        self.dataValidator = dataValidator
        self.registerService = registerService
        self.authManager = authManager
    }
    
    func handleRegister(registerRequest: RegisterRequest, profileImage: UIImage?) {
        do {
            try validateDataRegisterRequest(
                email: registerRequest.email,
                password: registerRequest.password,
                confirmPassword: registerRequest.confirmPassword)

            registerUser(with: registerRequest, and: profileImage)
        } catch {
            guard let error = error as? DataValidationError else { return }
            handleValidationError(error)
        }
    }

    func registerUser(with registerRequest: RegisterRequest, and profileImage: UIImage?) {
        registerService.register(registerRequest: registerRequest, profileImage: profileImage) { [weak self] result in
            switch result {
            case .success: self?.handleRegisterSuccess(email: registerRequest.email, password: registerRequest.password)
            case .failure(let error):
                self?.presenter.presentRegisterError(error)
            }
        }
    }

    func imageSelected(image: UIImage) {
        presenter.presentSelectedImage(image: image)
    }
}

fileprivate extension RegisterInteractor {

    func handleValidationError(_ error: DataValidationError) {
        presenter.presentInvalidData(error)
    }
    
    func handleRegisterSuccess(email: String, password: String) {
        authManager.login(email: email, password: password) { [weak self] result in
            switch result {
            case .success: self?.presenter.presentLoginSuccess()
            case .failure(let error): self?.presenter.presentLoginError(error)
            }
        }
    }
    
    func validateDataRegisterRequest(email: String?, password: String?, confirmPassword: String?) throws {
       guard let email = email, let password = password, let confirmPassword = confirmPassword else { return }
       try dataValidator.validateEmail(email)
       try dataValidator.validatePassword(password)
       try dataValidator.validatePasswordsMatch(password, confirmPassword)
    }
}
