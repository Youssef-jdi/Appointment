////
//  RegisterRouter.swift
//  appointment
//
//  Created by Youssef Jdidi on 2/17/20.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol RegisterRouterProtocol {
  func set(viewController: RegisterViewControllerProtocol?)
  func route(to scene: RegisterRouter.Scene)
}

class RegisterRouter: NSObject, RegisterRouterProtocol {

    // MARK: DI
    weak var viewController: RegisterViewControllerProtocol?
    private let rootNavigator: RootNavigatorProtocol
    private let registerStoryboard: Storyboard
    private let loginStoryboard: Storyboard
    private let homeStoryboard: Storyboard

    func set(viewController: RegisterViewControllerProtocol?) {
        self.viewController = viewController
    }

    init(
        rootNavigator: RootNavigatorProtocol,
        registerStoryboard: Storyboard,
        loginStoryboard: Storyboard,
        homeStoryboard: Storyboard
    ) {
        self.rootNavigator = rootNavigator
        self.registerStoryboard = registerStoryboard
        self.loginStoryboard = loginStoryboard
        self.homeStoryboard = homeStoryboard
    }
}

// MARK: Routing logic
extension RegisterRouter {

    enum Scene {
        case login
        case home
        case loginOverView
    }

    func route(to scene: RegisterRouter.Scene) {
        switch scene {
        case .login:
            guard let vc = loginStoryboard.viewController(identifier: LoginStoryboardId.login) else { return }
            viewController?.show(vc, sender: nil)
        case .home:
            let identifier = HomeStoryboardId.home
            guard let homeVC = homeStoryboard.viewController(identifier: identifier) as? HomeViewController else { return assertionFailure() }
            let navVC = ApplicationNavigationController(rootViewController: homeVC)
            rootNavigator.setSideMenuRoot(contentViewController: navVC)
        case .loginOverView:
            viewController?.popToRoot(animated: true)
        }
    }
}
