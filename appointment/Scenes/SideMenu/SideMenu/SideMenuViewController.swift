//
//  SideMenuViewController.swift
//  appointment
//
//  Created by Raluca Mesterca on 21/02/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import SideMenuSwift
import Nuke

//sourcery: AutoMockable
protocol SideMenuViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: SideMenuInteractorProtocol)
    func set(router: SideMenuRouterProtocol)

    func display(user: UserProfile)
    func display(events: [AppEvent])
    func display(appointmentData: [Appointment])

    // in case the user is not logged in, reset the user data
    func resetSubItemData()

    func handleRoutingEnabled(for scene: SideMenuRouter.Scene)
    func handleUserIsAnon(_ error: SideMenuError)

    func display(error: Error)
}

class SideMenuViewController: UIViewController, SideMenuViewControllerProtocol {

    // MARK: DI
    var interactor: SideMenuInteractorProtocol?
    var router: SideMenuRouterProtocol?
    var alertPresenter: AlertPresenterProtocol?
    
    func set(interactor: SideMenuInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: SideMenuRouterProtocol) {
        self.router = router
    }
    
    func set(alertPresenter: AlertPresenterProtocol) {
        self.alertPresenter = alertPresenter
    }

    // MARK: Outlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var profileImageView: RoundedImageView!
    @IBOutlet weak var usernameLabel: UILabel!
    @IBOutlet weak var userEmailLabel: UILabel!

    // MARK: Properties
    var dataSource = SideMenuDataSource()

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        dataSource.setDataSource()
        configureTableView()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        interactor?.handleViewWillAppear()
    }
}

// MARK: Configure Methods
private extension SideMenuViewController {

    func configureTableView() {
        tableView.delegate = self
        tableView.dataSource = dataSource
        tableView.register(
            UINib(resource: R.nib.sideMenuTableViewCell),
            forCellReuseIdentifier: R.reuseIdentifier.sideMenuTableViewCell.identifier
        )
    }
}

// MARK: Methods
extension SideMenuViewController {

    func display(user: UserProfile) {
        if let urlPath = user.image, let url = URL(string: urlPath) {
            let options = ImageLoadingOptions(
                placeholder: R.image.deelnemers(),
                failureImage: R.image.deelnemers())
            Nuke.loadImage(with: url, options: options, into: profileImageView)
        }

        let userNameText = "\(user.firstName ?? "") \(user.lastName ?? "")"
        usernameLabel.text = userNameText.uppercased()
        userEmailLabel.text = user.email?.uppercased()
    }

    func display(events: [AppEvent]) {
        dataSource.updateEventsNotificationsCount(events: events)
        tableView.reloadData()
    }

    func display(appointmentData: [Appointment]) {
        dataSource.updateAppointmentNotificationsCount(appointmentData: appointmentData)
        tableView.reloadData()
    }

    func resetSubItemData() {
        dataSource.resetSubItemsData()
        tableView.reloadData()
    }

    func handleRoutingEnabled(for scene: SideMenuRouter.Scene) {
        router?.route(to: scene)
    }
    
    func handleUserIsAnon(_ error: SideMenuError) {
        let action = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertPresenter?.presentAlert(title: error.title, description: error.localizedDescription, actions: [action])
    }

      //TO DO: replace with error handler in interactor
      func display(error: Error) {
          Console.log(type: .error, error.localizedDescription)
      }
}

// MARK: UITableViewDelegate
extension SideMenuViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let isPrimaryType = dataSource.dataSource[indexPath.row].type == .primary
        return isPrimaryType ? 60 : 40
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let scene = SideMenuRouter.Scene(rawValue: indexPath.row) else { return assertionFailure() }
        interactor?.checkAuthRequired(for: scene)
    }
}
