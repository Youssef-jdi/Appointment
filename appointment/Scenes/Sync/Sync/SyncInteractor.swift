//
//  SyncInteractor.swift
//  appointment
//
//  Created by Rachel Polachova on 05/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import GoogleSignIn

//sourcery: AutoMockable
protocol SyncInteractorProtocol {
    /// Syncs Facebook contacts
    func syncFacebook()
    /// Syncs Google calendar & contacts
    func syncGoogle()
    /// Syncs Outlook calendar & contacts
    /// - Parameter vc: viewController to present Outlook login screen
    func syncOutlook(from vc: UIViewController)
    /// Syncs calendar & contacts from device
    func syncDevice()
    
    func yahoo(from vc: UIViewController)
}

// sourcery: Automockable
extension NSObjectProtocol { }

class SyncInteractor: NSObject, SyncInteractorProtocol {
    
    // MARK: DI
    var presenter: SyncPresenterProtocol
    let service: SyncServiceProtocol
    
    init(presenter: SyncPresenterProtocol, service: SyncServiceProtocol) {
        self.presenter = presenter
        self.service = service
    }
}

// MARK: Methods
extension SyncInteractor {
    
    func syncFacebook() {
        service.facebookFriendsRequest { [weak self] result in
            switch result {
            case .success:
                self?.presenter.successSyncing(.facebook)
            case .failure(let error):
                self?.presenter.handle(error: .generic(error))
            }
        }
    }
    
    func syncGoogle() {
        GIDSignIn.sharedInstance()?.delegate = self
        if GIDSignIn.sharedInstance()?.currentUser != nil {
            fetchGoogleData()
        } else {
            var scopes = GIDSignIn.sharedInstance()?.scopes
            scopes?.append("https://www.googleapis.com/auth/contacts.readonly")
            scopes?.append("https://www.googleapis.com/auth/calendar.readonly")
            GIDSignIn.sharedInstance()?.scopes = scopes
            GIDSignIn.sharedInstance()?.signIn()
        }
    }
    
    func syncOutlook(from vc: UIViewController) {
        service.outlookRequest(from: vc, requestType: .contacts) { [weak self] result in
            switch result {
            case .success:
                self?.presenter.successSyncing(.outlook)
            case .failure(let error):
                self?.presenter.handle(error: .generic(error))
            }
        }
    }
    
    func syncDevice() {
        service.deviceRequest { [weak self] result in
            switch result {
            case .success:
                self?.presenter.successSyncing(.contacts)
            case .failure(let error):
                self?.presenter.handle(error: .generic(error))
            }
        }
    }
    
    func yahoo(from vc: UIViewController) {
        service.yahooRequest(from: vc) { [weak self] result in
            switch result {
            case .success:
                self?.presenter.successSyncing(.yahoo)
            case .failure(let error):
                self?.presenter.handle(error: .generic(error))
            }
        }
    }
}

// MARK: Private methods
private extension SyncInteractor {
    func fetchGoogleData() {
        let token = GIDSignIn.sharedInstance()?.currentUser.authentication.accessToken ?? ""
        service.googleRequest(with: token, requestType: .contacts) { [weak self] result in
            switch result {
            case .success:
                self?.presenter.successSyncing(.gmail)
            case .failure(let error):
                self?.presenter.handle(error: .generic(error))
            }
        }
    }
}

extension SyncInteractor: GIDSignInDelegate {

    func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error!) {
        guard error == nil else {
            presenter.handle(error: .generic(error))
            return
        }
        fetchGoogleData()
    }
}
