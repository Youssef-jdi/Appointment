//
//  SyncViewController.swift
//  appointment
//
//  Created by Rachel Polachova on 05/03/2020.
//  Copyright (c) 2020 DTT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import GoogleSignIn

//sourcery: AutoMockable
protocol SyncViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: SyncInteractorProtocol)
    func set(router: SyncRouterProtocol)
    
    func display(error: SyncError)
    func successSyncing(_ app: SyncApp)
}

//swiftlint:disable implicit_return
class SyncViewController: UIViewController, SyncViewControllerProtocol {
    
    // MARK: DI
    var interactor: SyncInteractorProtocol?
    var router: SyncRouterProtocol?
    var alertPresenter: AlertPresenterProtocol?
    
    func set(interactor: SyncInteractorProtocol) {
        self.interactor = interactor
    }
    
    func set(router: SyncRouterProtocol) {
        self.router = router
    }
    
    func set(alertPresenter: AlertPresenterProtocol) {
        self.alertPresenter = alertPresenter
    }
    
    // MARK: Outlets
    @IBOutlet weak var titleLabel: UILabel! {
        didSet { titleLabel.text = R.string.localizable.synchronise().uppercased() }
    }
    
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var containerStackView: UIStackView!
    @IBOutlet weak var nextButton: UIButton! {
        didSet { nextButton.setTitle(R.string.localizable.next().uppercased(), for: .normal) }
    }
    @IBOutlet weak var facebookImageView: UIImageView! {
        didSet {
            facebookImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(facebookImageTapped)))
        }
    }
    @IBOutlet weak var gmailImageView: UIImageView! {
        didSet {
            gmailImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(gmailImageTapped)))
        }
    }
    @IBOutlet weak var outlookImageView: UIImageView! {
        didSet {
            outlookImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(contactImageTapped)))
        }
    }
    @IBOutlet weak var yahooImageView: UIImageView! {
        didSet {
            yahooImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(yahooImageTapped)))
        }
    }

    @IBOutlet weak var contactImageView: UIImageView! {
        didSet {
            contactImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(contactImageTapped)))
        }
    }

    @IBOutlet var containerViews: [UIView]!

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        GIDSignIn.sharedInstance()?.presentingViewController = self
        setLayout()
        setupNavigationBar()
    }
}
// MARK: - Actions
@objc extension SyncViewController {

    @IBAction func nextButtonPressed(_ sender: UIButton) {
        router?.route(to: .home)
    }

    func facebookImageTapped() {
        interactor?.syncFacebook()
    }

    func gmailImageTapped() {
        interactor?.syncGoogle()
    }

    func outLookTapped() {
        interactor?.syncOutlook(from: self)
    }

    func contactImageTapped() {
        interactor?.syncDevice()
    }

    func yahooImageTapped() {
        interactor?.yahoo(from: self)
    }
    
    @objc func skipButtonTapped() {
        router?.route(to: .home)
    }
}

// MARK: - SyncViewControllerProtocol Methods
extension SyncViewController {
    
    func display(error: SyncError) {
        UIViewController.removeActivityIndicator()
        alertPresenter?.presentAlert(title: error.title, description: error.localizedDescription, actions: [UIAlertAction(title: "OK", style: .default, handler: nil)])
    }
    
    func successSyncing(_ app: SyncApp) {
        UIViewController.removeActivityIndicator()
        alertPresenter?.presentAlert(title: "Success", description: "Successfuly synced \(app.localizedDescription)", actions: [UIAlertAction(title: "OK", style: .default, handler: nil)])
    }
}

// MARK: - Privates
private extension SyncViewController {
    func setLayout() {
        let cornerRadius = view.frame.width / 8
        containerViews.forEach {
            $0.layer.cornerRadius = cornerRadius
            $0.layer.masksToBounds = true
        }

        contactImageView.image = #imageLiteral(resourceName: "Menu_Contacts")
        yahooImageView.image = #imageLiteral(resourceName: "Menu_Linked_Yahoo")
        yahooImageView.layer.cornerRadius = cornerRadius
        contactImageView.layer.cornerRadius = cornerRadius
        yahooImageView.layer.masksToBounds = true
        contactImageView.layer.masksToBounds = true
    }
    
    func setupNavigationBar() {
        navigationItem.title = R.string.localizable.appTitle()
        let button = UIBarButtonItem(title: R.string.localizable.skip().uppercased(), style: .plain, target: self, action: #selector(skipButtonTapped))
        navigationItem.rightBarButtonItem = button
    }
}
