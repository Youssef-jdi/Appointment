//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 16 storyboards.
  struct storyboard {
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `CustomPopUp`.
    static let customPopUp = _R.storyboard.customPopUp()
    /// Storyboard `ForgotPassword`.
    static let forgotPassword = _R.storyboard.forgotPassword()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `InvitationDetail`.
    static let invitationDetail = _R.storyboard.invitationDetail()
    /// Storyboard `Invitation`.
    static let invitation = _R.storyboard.invitation()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `OldDateFormatPopup`.
    static let oldDateFormatPopup = _R.storyboard.oldDateFormatPopup()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `Register`.
    static let register = _R.storyboard.register()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SideMenu`.
    static let sideMenu = _R.storyboard.sideMenu()
    /// Storyboard `SplashScreen`.
    static let splashScreen = _R.storyboard.splashScreen()
    /// Storyboard `Sync`.
    static let sync = _R.storyboard.sync()
    /// Storyboard `Timeline`.
    static let timeline = _R.storyboard.timeline()
    /// Storyboard `Tutorial`.
    static let tutorial = _R.storyboard.tutorial()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomPopUp", bundle: ...)`
    static func customPopUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customPopUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgotPassword", bundle: ...)`
    static func forgotPassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgotPassword)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Invitation", bundle: ...)`
    static func invitation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.invitation)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "InvitationDetail", bundle: ...)`
    static func invitationDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.invitationDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OldDateFormatPopup", bundle: ...)`
    static func oldDateFormatPopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.oldDateFormatPopup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Register", bundle: ...)`
    static func register(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.register)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SideMenu", bundle: ...)`
    static func sideMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sideMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SplashScreen", bundle: ...)`
    static func splashScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sync", bundle: ...)`
    static func sync(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sync)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Timeline", bundle: ...)`
    static func timeline(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.timeline)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Tutorial", bundle: ...)`
    static func tutorial(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorial)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 15 colors.
  struct color {
    /// Color `appBlue`.
    static let appBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "appBlue")
    /// Color `appContactsGray`.
    static let appContactsGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appContactsGray")
    /// Color `appDarkRed`.
    static let appDarkRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "appDarkRed")
    /// Color `appDimGray`.
    static let appDimGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appDimGray")
    /// Color `appErrorBackgroundPink`.
    static let appErrorBackgroundPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "appErrorBackgroundPink")
    /// Color `appFacebookBlue`.
    static let appFacebookBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "appFacebookBlue")
    /// Color `appGmailRed`.
    static let appGmailRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGmailRed")
    /// Color `appGrayChateau`.
    static let appGrayChateau = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGrayChateau")
    /// Color `appGrayMagnesium`.
    static let appGrayMagnesium = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGrayMagnesium")
    /// Color `appGray`.
    static let appGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGray")
    /// Color `appLightGray`.
    static let appLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appLightGray")
    /// Color `appLightRed`.
    static let appLightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "appLightRed")
    /// Color `appOutlookBlue`.
    static let appOutlookBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "appOutlookBlue")
    /// Color `appYahooPurple`.
    static let appYahooPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "appYahooPurple")
    /// Color `appYellow`.
    static let appYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "appYellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appContactsGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appContactsGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appContactsGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appDarkRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDarkRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDarkRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appDimGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDimGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDimGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appErrorBackgroundPink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appErrorBackgroundPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appErrorBackgroundPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appFacebookBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appFacebookBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appFacebookBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGmailRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGmailRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGmailRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGrayChateau", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGrayChateau(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGrayChateau, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGrayMagnesium", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGrayMagnesium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGrayMagnesium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appLightRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appOutlookBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appOutlookBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appOutlookBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appYahooPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appYahooPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appYahooPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appYellow, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let applinksAppointmentappPageLink = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:appointmentapp.page.link") ?? "applinks:appointmentapp.page.link"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 24 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `NotoSans-Bold.ttf`.
    static let notoSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSans-Bold", pathExtension: "ttf")
    /// Resource file `NotoSans-BoldItalic.ttf`.
    static let notoSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `NotoSans-Italic.ttf`.
    static let notoSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSans-Italic", pathExtension: "ttf")
    /// Resource file `NotoSans-Regular.ttf`.
    static let notoSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-Bold.ttf`.
    static let openSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans-BoldItalic.ttf`.
    static let openSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBold.ttf`.
    static let openSansExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBoldItalic.ttf`.
    static let openSansExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Italic.ttf`.
    static let openSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans-Light.ttf`.
    static let openSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Light", pathExtension: "ttf")
    /// Resource file `OpenSans-LightItalic.ttf`.
    static let openSansLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Regular.ttf`.
    static let openSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-Semibold.ttf`.
    static let openSansSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Semibold", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiboldItalic.ttf`.
    static let openSansSemiboldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiboldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Splash.json`.
    static let splashJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Splash", pathExtension: "json")
    /// Resource file `img_0.png`.
    static let img_0Png = Rswift.FileResource(bundle: R.hostingBundle, name: "img_0", pathExtension: "png")
    /// Resource file `img_1.png`.
    static let img_1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "img_1", pathExtension: "png")
    /// Resource file `img_2.png`.
    static let img_2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "img_2", pathExtension: "png")
    /// Resource file `img_3.png`.
    static let img_3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "img_3", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSans-Bold", withExtension: "ttf")`
    static func notoSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSans-BoldItalic", withExtension: "ttf")`
    static func notoSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSans-Italic", withExtension: "ttf")`
    static func notoSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSans-Regular", withExtension: "ttf")`
    static func notoSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Bold", withExtension: "ttf")`
    static func openSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-BoldItalic", withExtension: "ttf")`
    static func openSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBold", withExtension: "ttf")`
    static func openSansExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBoldItalic", withExtension: "ttf")`
    static func openSansExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Italic", withExtension: "ttf")`
    static func openSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Light", withExtension: "ttf")`
    static func openSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-LightItalic", withExtension: "ttf")`
    static func openSansLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Regular", withExtension: "ttf")`
    static func openSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Semibold", withExtension: "ttf")`
    static func openSansSemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiboldItalic", withExtension: "ttf")`
    static func openSansSemiboldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiboldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Splash", withExtension: "json")`
    static func splashJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.splashJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "img_0", withExtension: "png")`
    static func img_0Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.img_0Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "img_1", withExtension: "png")`
    static func img_1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.img_1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "img_2", withExtension: "png")`
    static func img_2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.img_2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "img_3", withExtension: "png")`
    static func img_3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.img_3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `NotoSans-BoldItalic`.
    static let notoSansBoldItalic = Rswift.FontResource(fontName: "NotoSans-BoldItalic")
    /// Font `NotoSans-Bold`.
    static let notoSansBold = Rswift.FontResource(fontName: "NotoSans-Bold")
    /// Font `NotoSans-Italic`.
    static let notoSansItalic = Rswift.FontResource(fontName: "NotoSans-Italic")
    /// Font `NotoSans`.
    static let notoSans = Rswift.FontResource(fontName: "NotoSans")
    /// Font `OpenSans-BoldItalic`.
    static let openSansBoldItalic = Rswift.FontResource(fontName: "OpenSans-BoldItalic")
    /// Font `OpenSans-Bold`.
    static let openSansBold = Rswift.FontResource(fontName: "OpenSans-Bold")
    /// Font `OpenSans-ExtraboldItalic`.
    static let openSansExtraboldItalic = Rswift.FontResource(fontName: "OpenSans-ExtraboldItalic")
    /// Font `OpenSans-Extrabold`.
    static let openSansExtrabold = Rswift.FontResource(fontName: "OpenSans-Extrabold")
    /// Font `OpenSans-Italic`.
    static let openSansItalic = Rswift.FontResource(fontName: "OpenSans-Italic")
    /// Font `OpenSans-Light`.
    static let openSansLight = Rswift.FontResource(fontName: "OpenSans-Light")
    /// Font `OpenSans-SemiboldItalic`.
    static let openSansSemiboldItalic = Rswift.FontResource(fontName: "OpenSans-SemiboldItalic")
    /// Font `OpenSans-Semibold`.
    static let openSansSemibold = Rswift.FontResource(fontName: "OpenSans-Semibold")
    /// Font `OpenSansLight-Italic`.
    static let openSansLightItalic = Rswift.FontResource(fontName: "OpenSansLight-Italic")
    /// Font `OpenSans`.
    static let openSans = Rswift.FontResource(fontName: "OpenSans")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")

    /// `UIFont(name: "NotoSans", size: ...)`
    static func notoSans(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSans, size: size)
    }

    /// `UIFont(name: "NotoSans-Bold", size: ...)`
    static func notoSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansBold, size: size)
    }

    /// `UIFont(name: "NotoSans-BoldItalic", size: ...)`
    static func notoSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansBoldItalic, size: size)
    }

    /// `UIFont(name: "NotoSans-Italic", size: ...)`
    static func notoSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansItalic, size: size)
    }

    /// `UIFont(name: "OpenSans", size: ...)`
    static func openSans(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSans, size: size)
    }

    /// `UIFont(name: "OpenSans-Bold", size: ...)`
    static func openSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBold, size: size)
    }

    /// `UIFont(name: "OpenSans-BoldItalic", size: ...)`
    static func openSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Extrabold", size: ...)`
    static func openSansExtrabold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtrabold, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraboldItalic", size: ...)`
    static func openSansExtraboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraboldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Italic", size: ...)`
    static func openSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Light", size: ...)`
    static func openSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLight, size: size)
    }

    /// `UIFont(name: "OpenSans-Semibold", size: ...)`
    static func openSansSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemibold, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiboldItalic", size: ...)`
    static func openSansSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiboldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansLight-Italic", size: ...)`
    static func openSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    static func validate() throws {
      if R.font.notoSans(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSans' could not be loaded, is 'NotoSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSans-Bold' could not be loaded, is 'NotoSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSans-BoldItalic' could not be loaded, is 'NotoSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSans-Italic' could not be loaded, is 'NotoSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSans(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Bold' could not be loaded, is 'OpenSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-BoldItalic' could not be loaded, is 'OpenSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtrabold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Extrabold' could not be loaded, is 'OpenSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraboldItalic' could not be loaded, is 'OpenSans-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Italic' could not be loaded, is 'OpenSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Light' could not be loaded, is 'OpenSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Semibold' could not be loaded, is 'OpenSans-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiboldItalic' could not be loaded, is 'OpenSans-SemiboldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansLight-Italic' could not be loaded, is 'OpenSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 191 images.
  struct image {
    /// Image `Add_Icon_White`.
    static let add_Icon_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add_Icon_White")
    /// Image `Add_Icon`.
    static let add_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add_Icon")
    /// Image `Appointment_Attachment_Black`.
    static let appointment_Attachment_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Attachment_Black")
    /// Image `Appointment_Attachment_Blue`.
    static let appointment_Attachment_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Attachment_Blue")
    /// Image `Appointment_Calendar_Blue`.
    static let appointment_Calendar_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Calendar_Blue")
    /// Image `Appointment_Description`.
    static let appointment_Description = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Description")
    /// Image `Appointment_Location_Black`.
    static let appointment_Location_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Location_Black")
    /// Image `Appointment_Participant_Black`.
    static let appointment_Participant_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Participant_Black")
    /// Image `Appointment_Participant_Blue`.
    static let appointment_Participant_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Participant_Blue")
    /// Image `Appointment_Title`.
    static let appointment_Title = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Title")
    /// Image `Appointment_Todo_List`.
    static let appointment_Todo_List = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_Todo_List")
    /// Image `Appointment_business_white`.
    static let appointment_business_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_business_white")
    /// Image `Appointment_group_white`.
    static let appointment_group_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_group_white")
    /// Image `Appointment_icon_logo`.
    static let appointment_icon_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_icon_logo")
    /// Image `Appointment_memo_white`.
    static let appointment_memo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_memo_white")
    /// Image `Appointment_memoto_white`.
    static let appointment_memoto_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_memoto_white")
    /// Image `Appointment_mom_white`.
    static let appointment_mom_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_mom_white")
    /// Image `Appointment_regular_white`.
    static let appointment_regular_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment_regular_white")
    /// Image `Arrow_Left_Blue`.
    static let arrow_Left_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_Left_Blue")
    /// Image `Arrow_Left_White`.
    static let arrow_Left_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_Left_White")
    /// Image `Arrow_Right_Black`.
    static let arrow_Right_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_Right_Black")
    /// Image `Arrow_Right_Blue`.
    static let arrow_Right_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_Right_Blue")
    /// Image `Arrow_Right_White`.
    static let arrow_Right_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_Right_White")
    /// Image `Berichten_White`.
    static let berichten_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Berichten_White")
    /// Image `Bijlage`.
    static let bijlage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bijlage")
    /// Image `Blue_pin`.
    static let blue_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Blue_pin")
    /// Image `Calendar_noshadow`.
    static let calendar_noshadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calendar_noshadow")
    /// Image `Checkbox_Off`.
    static let checkbox_Off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkbox_Off")
    /// Image `Checkbox_On`.
    static let checkbox_On = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkbox_On")
    /// Image `Checkbox`.
    static let checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkbox")
    /// Image `Checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checked")
    /// Image `Clap`.
    static let clap = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clap")
    /// Image `Close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close")
    /// Image `Cloud`.
    static let cloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cloud")
    /// Image `Contacts`.
    static let contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Contacts")
    /// Image `Cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cross")
    /// Image `DTT_logo`.
    static let dtt_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "DTT_logo")
    /// Image `Dag`.
    static let dag = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dag")
    /// Image `Data_toevoegen`.
    static let data_toevoegen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Data_toevoegen")
    /// Image `Day_blue`.
    static let day_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Day_blue")
    /// Image `Day_white`.
    static let day_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Day_white")
    /// Image `Deelnemers`.
    static let deelnemers = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deelnemers")
    /// Image `Facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebook")
    /// Image `Fill 342`.
    static let fill342 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fill 342")
    /// Image `Gmail`.
    static let gmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "Gmail")
    /// Image `Handshake`.
    static let handshake = Rswift.ImageResource(bundle: R.hostingBundle, name: "Handshake")
    /// Image `Idea`.
    static let idea = Rswift.ImageResource(bundle: R.hostingBundle, name: "Idea")
    /// Image `Jaar`.
    static let jaar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Jaar")
    /// Image `Landing_Dots`.
    static let landing_Dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "Landing_Dots")
    /// Image `Landing_Planning`.
    static let landing_Planning = Rswift.ImageResource(bundle: R.hostingBundle, name: "Landing_Planning")
    /// Image `Location_mini_icon`.
    static let location_mini_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Location_mini_icon")
    /// Image `Location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "Location")
    /// Image `Logo_DTT`.
    static let logo_DTT = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo_DTT")
    /// Image `MOM_Icon_Yellow`.
    static let mom_Icon_Yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "MOM_Icon_Yellow")
    /// Image `Maand`.
    static let maand = Rswift.ImageResource(bundle: R.hostingBundle, name: "Maand")
    /// Image `Mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mail")
    /// Image `MemoTo_Icon_Yellow`.
    static let memoTo_Icon_Yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "MemoTo_Icon_Yellow")
    /// Image `Memo_Add`.
    static let memo_Add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Memo_Add")
    /// Image `Memo_Icon_Yellow`.
    static let memo_Icon_Yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Memo_Icon_Yellow")
    /// Image `Menu_Appointments`.
    static let menu_Appointments = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Appointments")
    /// Image `Menu_Business`.
    static let menu_Business = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Business")
    /// Image `Menu_Button`.
    static let menu_Button = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Button")
    /// Image `Menu_Calendar`.
    static let menu_Calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Calendar")
    /// Image `Menu_Contacts`.
    static let menu_Contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Contacts")
    /// Image `Menu_Events`.
    static let menu_Events = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Events")
    /// Image `Menu_Group`.
    static let menu_Group = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Group")
    /// Image `Menu_Holidays`.
    static let menu_Holidays = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Holidays")
    /// Image `Menu_Invitations`.
    static let menu_Invitations = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Invitations")
    /// Image `Menu_Linked_Facebook`.
    static let menu_Linked_Facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Linked_Facebook")
    /// Image `Menu_Linked_Google`.
    static let menu_Linked_Google = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Linked_Google")
    /// Image `Menu_Linked_Outlook`.
    static let menu_Linked_Outlook = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Linked_Outlook")
    /// Image `Menu_Linked_Yahoo`.
    static let menu_Linked_Yahoo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Linked_Yahoo")
    /// Image `Menu_Linked`.
    static let menu_Linked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Linked")
    /// Image `Menu_MOM_Blue`.
    static let menu_MOM_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_MOM_Blue")
    /// Image `Menu_MOM`.
    static let menu_MOM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_MOM")
    /// Image `Menu_Meeting`.
    static let menu_Meeting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Meeting")
    /// Image `Menu_MemoTo`.
    static let menu_MemoTo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_MemoTo")
    /// Image `Menu_Memo`.
    static let menu_Memo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Memo")
    /// Image `Menu_Profile_Picture`.
    static let menu_Profile_Picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Profile_Picture")
    /// Image `Menu_Reminder`.
    static let menu_Reminder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Reminder")
    /// Image `Menu_Standard`.
    static let menu_Standard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Standard")
    /// Image `Month_blue`.
    static let month_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Month_blue")
    /// Image `Month_white`.
    static let month_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Month_white")
    /// Image `Muscle`.
    static let muscle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Muscle")
    /// Image `NavigationBar_Back_White`.
    static let navigationBar_Back_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavigationBar_Back_White")
    /// Image `NavigationBar_Back`.
    static let navigationBar_Back = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavigationBar_Back")
    /// Image `Okay`.
    static let okay = Rswift.ImageResource(bundle: R.hostingBundle, name: "Okay")
    /// Image `Omschrijving`.
    static let omschrijving = Rswift.ImageResource(bundle: R.hostingBundle, name: "Omschrijving")
    /// Image `Outlook`.
    static let outlook = Rswift.ImageResource(bundle: R.hostingBundle, name: "Outlook")
    /// Image `Pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pin")
    /// Image `Planning_blue`.
    static let planning_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planning_blue")
    /// Image `Planning_white`.
    static let planning_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planning_white")
    /// Image `Planning`.
    static let planning = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planning")
    /// Image `PointerBottom`.
    static let pointerBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "PointerBottom")
    /// Image `PointerTop`.
    static let pointerTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "PointerTop")
    /// Image `Pointer_Down_Black`.
    static let pointer_Down_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pointer_Down_Black")
    /// Image `Pop-up_Icon`.
    static let popUp_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pop-up_Icon")
    /// Image `ProfilePicture_icon`.
    static let profilePicture_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfilePicture_icon")
    /// Image `Profile_icon`.
    static let profile_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile_icon")
    /// Image `Profile_small`.
    static let profile_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile_small")
    /// Image `Search_blue`.
    static let search_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search_blue")
    /// Image `Search_white`.
    static let search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search_white")
    /// Image `Small_pop-up_icon`.
    static let small_popUp_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Small_pop-up_icon")
    /// Image `StartBackground`.
    static let startBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "StartBackground")
    /// Image `StartScreen_CalendarIcon`.
    static let startScreen_CalendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "StartScreen_CalendarIcon")
    /// Image `StartScreen_Logo`.
    static let startScreen_Logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "StartScreen_Logo")
    /// Image `Thumbdown`.
    static let thumbdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Thumbdown")
    /// Image `Thumbup`.
    static let thumbup = Rswift.ImageResource(bundle: R.hostingBundle, name: "Thumbup")
    /// Image `Tijdlijn`.
    static let tijdlijn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tijdlijn")
    /// Image `Timeline_blue`.
    static let timeline_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Timeline_blue")
    /// Image `Timeline_white`.
    static let timeline_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Timeline_white")
    /// Image `Titel`.
    static let titel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Titel")
    /// Image `To_do_list`.
    static let to_do_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "To_do_list")
    /// Image `TutorialPhone`.
    static let tutorialPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialPhone")
    /// Image `Vector Smart Object`.
    static let vectorSmartObject = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector Smart Object")
    /// Image `YahooLogo`.
    static let yahooLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "YahooLogo")
    /// Image `Year_blue`.
    static let year_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Year_blue")
    /// Image `Year_white`.
    static let year_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Year_white")
    /// Image `Zoeken`.
    static let zoeken = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zoeken")
    /// Image `add_button_blue`.
    static let add_button_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_button_blue")
    /// Image `agenda`.
    static let agenda = Rswift.ImageResource(bundle: R.hostingBundle, name: "agenda")
    /// Image `angry`.
    static let angry = Rswift.ImageResource(bundle: R.hostingBundle, name: "angry")
    /// Image `bad`.
    static let bad = Rswift.ImageResource(bundle: R.hostingBundle, name: "bad")
    /// Image `bussines_header_white_icon`.
    static let bussines_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bussines_header_white_icon")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `cancel_appointment_shape-1`.
    static let cancel_appointment_shape1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_appointment_shape-1")
    /// Image `cancel_appointment_shape@1,5x`.
    static let cancel_appointment_shape15x = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_appointment_shape@1,5x")
    /// Image `cancel_appointment_shape`.
    static let cancel_appointment_shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_appointment_shape")
    /// Image `cancel_popup_image`.
    static let cancel_popup_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_popup_image")
    /// Image `confused`.
    static let confused = Rswift.ImageResource(bundle: R.hostingBundle, name: "confused")
    /// Image `credits_kopen`.
    static let credits_kopen = Rswift.ImageResource(bundle: R.hostingBundle, name: "credits_kopen")
    /// Image `crying`.
    static let crying = Rswift.ImageResource(bundle: R.hostingBundle, name: "crying")
    /// Image `grinning`.
    static let grinning = Rswift.ImageResource(bundle: R.hostingBundle, name: "grinning")
    /// Image `group_header_white_icon`.
    static let group_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "group_header_white_icon")
    /// Image `group`.
    static let group = Rswift.ImageResource(bundle: R.hostingBundle, name: "group")
    /// Image `ic_add_blue`.
    static let ic_add_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_blue")
    /// Image `ic_checkmark_red`.
    static let ic_checkmark_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkmark_red")
    /// Image `ic_checkmark_white`.
    static let ic_checkmark_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkmark_white")
    /// Image `ic_choose_new_date`.
    static let ic_choose_new_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_new_date")
    /// Image `ic_cross_red`.
    static let ic_cross_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross_red")
    /// Image `ic_cross_white`.
    static let ic_cross_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross_white")
    /// Image `ic_message_red`.
    static let ic_message_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message_red")
    /// Image `ic_message_white`.
    static let ic_message_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message_white")
    /// Image `ic_new_date@1,5x`.
    static let ic_new_date15x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_date@1,5x")
    /// Image `ic_new_date`.
    static let ic_new_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_date")
    /// Image `ic_questionmark_red`.
    static let ic_questionmark_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_questionmark_red")
    /// Image `ic_questionmark_white`.
    static let ic_questionmark_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_questionmark_white")
    /// Image `ic_text_bubble`.
    static let ic_text_bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_text_bubble")
    /// Image `icn_pencil`.
    static let icn_pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_pencil")
    /// Image `icn_pin_white`.
    static let icn_pin_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_pin_white")
    /// Image `icn_standaard_uitgaand_afspraak gemaakt`.
    static let icn_standaard_uitgaand_afspraakGemaakt = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_standaard_uitgaand_afspraak gemaakt")
    /// Image `img_0`.
    static let img_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_0")
    /// Image `img_1`.
    static let img_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_1")
    /// Image `img_2`.
    static let img_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_2")
    /// Image `img_3`.
    static let img_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_3")
    /// Image `laugh`.
    static let laugh = Rswift.ImageResource(bundle: R.hostingBundle, name: "laugh")
    /// Image `love`.
    static let love = Rswift.ImageResource(bundle: R.hostingBundle, name: "love")
    /// Image `melding`.
    static let melding = Rswift.ImageResource(bundle: R.hostingBundle, name: "melding")
    /// Image `memoTo_header_white_icon`.
    static let memoTo_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "memoTo_header_white_icon")
    /// Image `memo_header_white_icon`.
    static let memo_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "memo_header_white_icon")
    /// Image `menu_Messages`.
    static let menu_Messages = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_Messages")
    /// Image `mom_header_white_icon`.
    static let mom_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mom_header_white_icon")
    /// Image `noun_Smiling Emoji_949334`.
    static let noun_SmilingEmoji_949334 = Rswift.ImageResource(bundle: R.hostingBundle, name: "noun_Smiling Emoji_949334")
    /// Image `popUp_Add_MOM`.
    static let popUp_Add_MOM = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_Add_MOM")
    /// Image `popUp_BuyCredits`.
    static let popUp_BuyCredits = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_BuyCredits")
    /// Image `popUp_Data_Added`.
    static let popUp_Data_Added = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_Data_Added")
    /// Image `popUp_Delete_Account`.
    static let popUp_Delete_Account = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_Delete_Account")
    /// Image `popUp_Download_meeting`.
    static let popUp_Download_meeting = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_Download_meeting")
    /// Image `popUp_MemoTo_dateSuggestion`.
    static let popUp_MemoTo_dateSuggestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_MemoTo_dateSuggestion")
    /// Image `popUp_NewAppointment_Login`.
    static let popUp_NewAppointment_Login = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_NewAppointment_Login")
    /// Image `popUp_New_Appointment`.
    static let popUp_New_Appointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_New_Appointment")
    /// Image `popUp_TodoList_CheckOff`.
    static let popUp_TodoList_CheckOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_TodoList_CheckOff")
    /// Image `popUp_appointment_on_holiday`.
    static let popUp_appointment_on_holiday = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_appointment_on_holiday")
    /// Image `popUp_cancel_appointment_outgoing`.
    static let popUp_cancel_appointment_outgoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_cancel_appointment_outgoing")
    /// Image `popUp_dateConfirmation`.
    static let popUp_dateConfirmation = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_dateConfirmation")
    /// Image `popUp_dateSugesstion_outgoing`.
    static let popUp_dateSugesstion_outgoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_dateSugesstion_outgoing")
    /// Image `popUp_delete_memo`.
    static let popUp_delete_memo = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_delete_memo")
    /// Image `popUp_invitation_incoming_appointment`.
    static let popUp_invitation_incoming_appointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_invitation_incoming_appointment")
    /// Image `popUp_invitation_incoming_hasAppointment`.
    static let popUp_invitation_incoming_hasAppointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_invitation_incoming_hasAppointment")
    /// Image `popUp_logout`.
    static let popUp_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_logout")
    /// Image `popUp_new_MemoTo`.
    static let popUp_new_MemoTo = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_new_MemoTo")
    /// Image `popUp_send_reminder`.
    static let popUp_send_reminder = Rswift.ImageResource(bundle: R.hostingBundle, name: "popUp_send_reminder")
    /// Image `sad`.
    static let sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad")
    /// Image `sample_upgrade`.
    static let sample_upgrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "sample_upgrade")
    /// Image `selecteer`.
    static let selecteer = Rswift.ImageResource(bundle: R.hostingBundle, name: "selecteer")
    /// Image `sleepy`.
    static let sleepy = Rswift.ImageResource(bundle: R.hostingBundle, name: "sleepy")
    /// Image `smiley`.
    static let smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "smiley")
    /// Image `standart_header_white_icon`.
    static let standart_header_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "standart_header_white_icon")
    /// Image `tutorial_low_quality_image`.
    static let tutorial_low_quality_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_low_quality_image")
    /// Image `yahoo_small`.
    static let yahoo_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "yahoo_small")
    /// Image `yahoo`.
    static let yahoo = Rswift.ImageResource(bundle: R.hostingBundle, name: "yahoo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add_Icon", bundle: ..., traitCollection: ...)`
    static func add_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add_Icon_White", bundle: ..., traitCollection: ...)`
    static func add_Icon_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_Icon_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Attachment_Black", bundle: ..., traitCollection: ...)`
    static func appointment_Attachment_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Attachment_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Attachment_Blue", bundle: ..., traitCollection: ...)`
    static func appointment_Attachment_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Attachment_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Calendar_Blue", bundle: ..., traitCollection: ...)`
    static func appointment_Calendar_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Calendar_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Description", bundle: ..., traitCollection: ...)`
    static func appointment_Description(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Description, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Location_Black", bundle: ..., traitCollection: ...)`
    static func appointment_Location_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Location_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Participant_Black", bundle: ..., traitCollection: ...)`
    static func appointment_Participant_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Participant_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Participant_Blue", bundle: ..., traitCollection: ...)`
    static func appointment_Participant_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Participant_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Title", bundle: ..., traitCollection: ...)`
    static func appointment_Title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_Todo_List", bundle: ..., traitCollection: ...)`
    static func appointment_Todo_List(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_Todo_List, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_business_white", bundle: ..., traitCollection: ...)`
    static func appointment_business_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_business_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_group_white", bundle: ..., traitCollection: ...)`
    static func appointment_group_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_group_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_icon_logo", bundle: ..., traitCollection: ...)`
    static func appointment_icon_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_icon_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_memo_white", bundle: ..., traitCollection: ...)`
    static func appointment_memo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_memo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_memoto_white", bundle: ..., traitCollection: ...)`
    static func appointment_memoto_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_memoto_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_mom_white", bundle: ..., traitCollection: ...)`
    static func appointment_mom_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_mom_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Appointment_regular_white", bundle: ..., traitCollection: ...)`
    static func appointment_regular_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appointment_regular_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_Left_Blue", bundle: ..., traitCollection: ...)`
    static func arrow_Left_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_Left_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_Left_White", bundle: ..., traitCollection: ...)`
    static func arrow_Left_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_Left_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_Right_Black", bundle: ..., traitCollection: ...)`
    static func arrow_Right_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_Right_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_Right_Blue", bundle: ..., traitCollection: ...)`
    static func arrow_Right_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_Right_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_Right_White", bundle: ..., traitCollection: ...)`
    static func arrow_Right_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_Right_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Berichten_White", bundle: ..., traitCollection: ...)`
    static func berichten_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.berichten_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bijlage", bundle: ..., traitCollection: ...)`
    static func bijlage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bijlage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Blue_pin", bundle: ..., traitCollection: ...)`
    static func blue_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calendar_noshadow", bundle: ..., traitCollection: ...)`
    static func calendar_noshadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar_noshadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checkbox", bundle: ..., traitCollection: ...)`
    static func checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checkbox_Off", bundle: ..., traitCollection: ...)`
    static func checkbox_Off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_Off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checkbox_On", bundle: ..., traitCollection: ...)`
    static func checkbox_On(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_On, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Clap", bundle: ..., traitCollection: ...)`
    static func clap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cloud", bundle: ..., traitCollection: ...)`
    static func cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Contacts", bundle: ..., traitCollection: ...)`
    static func contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contacts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DTT_logo", bundle: ..., traitCollection: ...)`
    static func dtt_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dtt_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dag", bundle: ..., traitCollection: ...)`
    static func dag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Data_toevoegen", bundle: ..., traitCollection: ...)`
    static func data_toevoegen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.data_toevoegen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Day_blue", bundle: ..., traitCollection: ...)`
    static func day_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.day_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Day_white", bundle: ..., traitCollection: ...)`
    static func day_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.day_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Deelnemers", bundle: ..., traitCollection: ...)`
    static func deelnemers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deelnemers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fill 342", bundle: ..., traitCollection: ...)`
    static func fill342(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fill342, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Gmail", bundle: ..., traitCollection: ...)`
    static func gmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Handshake", bundle: ..., traitCollection: ...)`
    static func handshake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handshake, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Idea", bundle: ..., traitCollection: ...)`
    static func idea(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.idea, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Jaar", bundle: ..., traitCollection: ...)`
    static func jaar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jaar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Landing_Dots", bundle: ..., traitCollection: ...)`
    static func landing_Dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landing_Dots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Landing_Planning", bundle: ..., traitCollection: ...)`
    static func landing_Planning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landing_Planning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Location_mini_icon", bundle: ..., traitCollection: ...)`
    static func location_mini_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_mini_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo_DTT", bundle: ..., traitCollection: ...)`
    static func logo_DTT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_DTT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MOM_Icon_Yellow", bundle: ..., traitCollection: ...)`
    static func mom_Icon_Yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mom_Icon_Yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Maand", bundle: ..., traitCollection: ...)`
    static func maand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MemoTo_Icon_Yellow", bundle: ..., traitCollection: ...)`
    static func memoTo_Icon_Yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memoTo_Icon_Yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Memo_Add", bundle: ..., traitCollection: ...)`
    static func memo_Add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memo_Add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Memo_Icon_Yellow", bundle: ..., traitCollection: ...)`
    static func memo_Icon_Yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memo_Icon_Yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Appointments", bundle: ..., traitCollection: ...)`
    static func menu_Appointments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Appointments, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Business", bundle: ..., traitCollection: ...)`
    static func menu_Business(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Business, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Button", bundle: ..., traitCollection: ...)`
    static func menu_Button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Calendar", bundle: ..., traitCollection: ...)`
    static func menu_Calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Contacts", bundle: ..., traitCollection: ...)`
    static func menu_Contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Contacts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Events", bundle: ..., traitCollection: ...)`
    static func menu_Events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Events, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Group", bundle: ..., traitCollection: ...)`
    static func menu_Group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Holidays", bundle: ..., traitCollection: ...)`
    static func menu_Holidays(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Holidays, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Invitations", bundle: ..., traitCollection: ...)`
    static func menu_Invitations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Invitations, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Linked", bundle: ..., traitCollection: ...)`
    static func menu_Linked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Linked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Linked_Facebook", bundle: ..., traitCollection: ...)`
    static func menu_Linked_Facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Linked_Facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Linked_Google", bundle: ..., traitCollection: ...)`
    static func menu_Linked_Google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Linked_Google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Linked_Outlook", bundle: ..., traitCollection: ...)`
    static func menu_Linked_Outlook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Linked_Outlook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Linked_Yahoo", bundle: ..., traitCollection: ...)`
    static func menu_Linked_Yahoo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Linked_Yahoo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_MOM", bundle: ..., traitCollection: ...)`
    static func menu_MOM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_MOM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_MOM_Blue", bundle: ..., traitCollection: ...)`
    static func menu_MOM_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_MOM_Blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Meeting", bundle: ..., traitCollection: ...)`
    static func menu_Meeting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Meeting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Memo", bundle: ..., traitCollection: ...)`
    static func menu_Memo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Memo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_MemoTo", bundle: ..., traitCollection: ...)`
    static func menu_MemoTo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_MemoTo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Profile_Picture", bundle: ..., traitCollection: ...)`
    static func menu_Profile_Picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Profile_Picture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Reminder", bundle: ..., traitCollection: ...)`
    static func menu_Reminder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Reminder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu_Standard", bundle: ..., traitCollection: ...)`
    static func menu_Standard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Standard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Month_blue", bundle: ..., traitCollection: ...)`
    static func month_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.month_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Month_white", bundle: ..., traitCollection: ...)`
    static func month_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.month_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Muscle", bundle: ..., traitCollection: ...)`
    static func muscle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.muscle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NavigationBar_Back", bundle: ..., traitCollection: ...)`
    static func navigationBar_Back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBar_Back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NavigationBar_Back_White", bundle: ..., traitCollection: ...)`
    static func navigationBar_Back_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBar_Back_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Okay", bundle: ..., traitCollection: ...)`
    static func okay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.okay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Omschrijving", bundle: ..., traitCollection: ...)`
    static func omschrijving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.omschrijving, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Outlook", bundle: ..., traitCollection: ...)`
    static func outlook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outlook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Planning", bundle: ..., traitCollection: ...)`
    static func planning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.planning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Planning_blue", bundle: ..., traitCollection: ...)`
    static func planning_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.planning_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Planning_white", bundle: ..., traitCollection: ...)`
    static func planning_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.planning_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PointerBottom", bundle: ..., traitCollection: ...)`
    static func pointerBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pointerBottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PointerTop", bundle: ..., traitCollection: ...)`
    static func pointerTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pointerTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pointer_Down_Black", bundle: ..., traitCollection: ...)`
    static func pointer_Down_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pointer_Down_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pop-up_Icon", bundle: ..., traitCollection: ...)`
    static func popUp_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfilePicture_icon", bundle: ..., traitCollection: ...)`
    static func profilePicture_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePicture_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile_icon", bundle: ..., traitCollection: ...)`
    static func profile_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile_small", bundle: ..., traitCollection: ...)`
    static func profile_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Search_blue", bundle: ..., traitCollection: ...)`
    static func search_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Search_white", bundle: ..., traitCollection: ...)`
    static func search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Small_pop-up_icon", bundle: ..., traitCollection: ...)`
    static func small_popUp_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.small_popUp_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StartBackground", bundle: ..., traitCollection: ...)`
    static func startBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StartScreen_CalendarIcon", bundle: ..., traitCollection: ...)`
    static func startScreen_CalendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startScreen_CalendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StartScreen_Logo", bundle: ..., traitCollection: ...)`
    static func startScreen_Logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startScreen_Logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Thumbdown", bundle: ..., traitCollection: ...)`
    static func thumbdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Thumbup", bundle: ..., traitCollection: ...)`
    static func thumbup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tijdlijn", bundle: ..., traitCollection: ...)`
    static func tijdlijn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tijdlijn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Timeline_blue", bundle: ..., traitCollection: ...)`
    static func timeline_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Timeline_white", bundle: ..., traitCollection: ...)`
    static func timeline_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Titel", bundle: ..., traitCollection: ...)`
    static func titel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.titel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "To_do_list", bundle: ..., traitCollection: ...)`
    static func to_do_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.to_do_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialPhone", bundle: ..., traitCollection: ...)`
    static func tutorialPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialPhone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector Smart Object", bundle: ..., traitCollection: ...)`
    static func vectorSmartObject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vectorSmartObject, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YahooLogo", bundle: ..., traitCollection: ...)`
    static func yahooLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yahooLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Year_blue", bundle: ..., traitCollection: ...)`
    static func year_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.year_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Year_white", bundle: ..., traitCollection: ...)`
    static func year_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.year_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Zoeken", bundle: ..., traitCollection: ...)`
    static func zoeken(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zoeken, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_button_blue", bundle: ..., traitCollection: ...)`
    static func add_button_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_button_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "agenda", bundle: ..., traitCollection: ...)`
    static func agenda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agenda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angry", bundle: ..., traitCollection: ...)`
    static func angry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bad", bundle: ..., traitCollection: ...)`
    static func bad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bussines_header_white_icon", bundle: ..., traitCollection: ...)`
    static func bussines_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bussines_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_appointment_shape", bundle: ..., traitCollection: ...)`
    static func cancel_appointment_shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_appointment_shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_appointment_shape-1", bundle: ..., traitCollection: ...)`
    static func cancel_appointment_shape1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_appointment_shape1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_appointment_shape@1,5x", bundle: ..., traitCollection: ...)`
    static func cancel_appointment_shape15x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_appointment_shape15x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_popup_image", bundle: ..., traitCollection: ...)`
    static func cancel_popup_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_popup_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confused", bundle: ..., traitCollection: ...)`
    static func confused(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confused, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credits_kopen", bundle: ..., traitCollection: ...)`
    static func credits_kopen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credits_kopen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crying", bundle: ..., traitCollection: ...)`
    static func crying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crying, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grinning", bundle: ..., traitCollection: ...)`
    static func grinning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grinning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group_header_white_icon", bundle: ..., traitCollection: ...)`
    static func group_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_blue", bundle: ..., traitCollection: ...)`
    static func ic_add_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkmark_red", bundle: ..., traitCollection: ...)`
    static func ic_checkmark_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkmark_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkmark_white", bundle: ..., traitCollection: ...)`
    static func ic_checkmark_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkmark_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_new_date", bundle: ..., traitCollection: ...)`
    static func ic_choose_new_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_new_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cross_red", bundle: ..., traitCollection: ...)`
    static func ic_cross_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cross_white", bundle: ..., traitCollection: ...)`
    static func ic_cross_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_message_red", bundle: ..., traitCollection: ...)`
    static func ic_message_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_message_white", bundle: ..., traitCollection: ...)`
    static func ic_message_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_new_date", bundle: ..., traitCollection: ...)`
    static func ic_new_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_new_date@1,5x", bundle: ..., traitCollection: ...)`
    static func ic_new_date15x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new_date15x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_questionmark_red", bundle: ..., traitCollection: ...)`
    static func ic_questionmark_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_questionmark_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_questionmark_white", bundle: ..., traitCollection: ...)`
    static func ic_questionmark_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_questionmark_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_text_bubble", bundle: ..., traitCollection: ...)`
    static func ic_text_bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_text_bubble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_pencil", bundle: ..., traitCollection: ...)`
    static func icn_pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_pin_white", bundle: ..., traitCollection: ...)`
    static func icn_pin_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_pin_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_standaard_uitgaand_afspraak gemaakt", bundle: ..., traitCollection: ...)`
    static func icn_standaard_uitgaand_afspraakGemaakt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_standaard_uitgaand_afspraakGemaakt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_0", bundle: ..., traitCollection: ...)`
    static func img_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_1", bundle: ..., traitCollection: ...)`
    static func img_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_2", bundle: ..., traitCollection: ...)`
    static func img_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_3", bundle: ..., traitCollection: ...)`
    static func img_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "laugh", bundle: ..., traitCollection: ...)`
    static func laugh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.laugh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love", bundle: ..., traitCollection: ...)`
    static func love(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "melding", bundle: ..., traitCollection: ...)`
    static func melding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.melding, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memoTo_header_white_icon", bundle: ..., traitCollection: ...)`
    static func memoTo_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memoTo_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memo_header_white_icon", bundle: ..., traitCollection: ...)`
    static func memo_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memo_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_Messages", bundle: ..., traitCollection: ...)`
    static func menu_Messages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Messages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mom_header_white_icon", bundle: ..., traitCollection: ...)`
    static func mom_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mom_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noun_Smiling Emoji_949334", bundle: ..., traitCollection: ...)`
    static func noun_SmilingEmoji_949334(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noun_SmilingEmoji_949334, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_Add_MOM", bundle: ..., traitCollection: ...)`
    static func popUp_Add_MOM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_Add_MOM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_BuyCredits", bundle: ..., traitCollection: ...)`
    static func popUp_BuyCredits(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_BuyCredits, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_Data_Added", bundle: ..., traitCollection: ...)`
    static func popUp_Data_Added(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_Data_Added, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_Delete_Account", bundle: ..., traitCollection: ...)`
    static func popUp_Delete_Account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_Delete_Account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_Download_meeting", bundle: ..., traitCollection: ...)`
    static func popUp_Download_meeting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_Download_meeting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_MemoTo_dateSuggestion", bundle: ..., traitCollection: ...)`
    static func popUp_MemoTo_dateSuggestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_MemoTo_dateSuggestion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_NewAppointment_Login", bundle: ..., traitCollection: ...)`
    static func popUp_NewAppointment_Login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_NewAppointment_Login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_New_Appointment", bundle: ..., traitCollection: ...)`
    static func popUp_New_Appointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_New_Appointment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_TodoList_CheckOff", bundle: ..., traitCollection: ...)`
    static func popUp_TodoList_CheckOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_TodoList_CheckOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_appointment_on_holiday", bundle: ..., traitCollection: ...)`
    static func popUp_appointment_on_holiday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_appointment_on_holiday, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_cancel_appointment_outgoing", bundle: ..., traitCollection: ...)`
    static func popUp_cancel_appointment_outgoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_cancel_appointment_outgoing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_dateConfirmation", bundle: ..., traitCollection: ...)`
    static func popUp_dateConfirmation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_dateConfirmation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_dateSugesstion_outgoing", bundle: ..., traitCollection: ...)`
    static func popUp_dateSugesstion_outgoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_dateSugesstion_outgoing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_delete_memo", bundle: ..., traitCollection: ...)`
    static func popUp_delete_memo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_delete_memo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_invitation_incoming_appointment", bundle: ..., traitCollection: ...)`
    static func popUp_invitation_incoming_appointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_invitation_incoming_appointment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_invitation_incoming_hasAppointment", bundle: ..., traitCollection: ...)`
    static func popUp_invitation_incoming_hasAppointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_invitation_incoming_hasAppointment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_logout", bundle: ..., traitCollection: ...)`
    static func popUp_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_new_MemoTo", bundle: ..., traitCollection: ...)`
    static func popUp_new_MemoTo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_new_MemoTo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popUp_send_reminder", bundle: ..., traitCollection: ...)`
    static func popUp_send_reminder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popUp_send_reminder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad", bundle: ..., traitCollection: ...)`
    static func sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sample_upgrade", bundle: ..., traitCollection: ...)`
    static func sample_upgrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sample_upgrade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selecteer", bundle: ..., traitCollection: ...)`
    static func selecteer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selecteer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sleepy", bundle: ..., traitCollection: ...)`
    static func sleepy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sleepy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smiley", bundle: ..., traitCollection: ...)`
    static func smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "standart_header_white_icon", bundle: ..., traitCollection: ...)`
    static func standart_header_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standart_header_white_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial_low_quality_image", bundle: ..., traitCollection: ...)`
    static func tutorial_low_quality_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_low_quality_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yahoo", bundle: ..., traitCollection: ...)`
    static func yahoo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yahoo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yahoo_small", bundle: ..., traitCollection: ...)`
    static func yahoo_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yahoo_small, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.invıtationItems` struct is generated, and contains static references to 31 images.
    struct invıtationItems {
      /// Image `business_icon`.
      static let business_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/business_icon")
      /// Image `comment`.
      static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/comment")
      /// Image `ic_date`.
      static let ic_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/ic_date")
      /// Image `ic_new_date`.
      static let ic_new_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/ic_new_date")
      /// Image `ic_suggest_new_date`.
      static let ic_suggest_new_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/ic_suggest_new_date")
      /// Image `ic_weiger_afspraak`.
      static let ic_weiger_afspraak = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/ic_weiger_afspraak")
      /// Image `icn_bijlagen`.
      static let icn_bijlagen = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_bijlagen")
      /// Image `icn_business@1,5x`.
      static let icn_business15x = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_business@1,5x")
      /// Image `icn_business`.
      static let icn_business = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_business")
      /// Image `icn_check_white`.
      static let icn_check_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_check_white")
      /// Image `icn_check`.
      static let icn_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_check")
      /// Image `icn_cross`.
      static let icn_cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_cross")
      /// Image `icn_dots`.
      static let icn_dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_dots")
      /// Image `icn_group_chat`.
      static let icn_group_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_group_chat")
      /// Image `icn_location`.
      static let icn_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_location")
      /// Image `icn_message`.
      static let icn_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_message")
      /// Image `icn_pencil`.
      static let icn_pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_pencil")
      /// Image `icn_people`.
      static let icn_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_people")
      /// Image `icn_private_chat`.
      static let icn_private_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_private_chat")
      /// Image `icn_question`.
      static let icn_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_question")
      /// Image `icn_user`.
      static let icn_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/icn_user")
      /// Image `new_chat`.
      static let new_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/new_chat")
      /// Image `pencil`.
      static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/pencil")
      /// Image `pin-1`.
      static let pin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/pin-1")
      /// Image `pin`.
      static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/pin")
      /// Image `red_dot-1`.
      static let red_dot1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_dot-1")
      /// Image `red_dot@1,5x`.
      static let red_dot15x = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_dot@1,5x")
      /// Image `red_dot`.
      static let red_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_dot")
      /// Image `red_line-1`.
      static let red_line1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_line-1")
      /// Image `red_line@1,5x`.
      static let red_line15x = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_line@1,5x")
      /// Image `red_line`.
      static let red_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvıtationItems/red_line")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "business_icon", bundle: ..., traitCollection: ...)`
      static func business_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.business_icon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
      static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.comment, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ic_date", bundle: ..., traitCollection: ...)`
      static func ic_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.ic_date, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ic_new_date", bundle: ..., traitCollection: ...)`
      static func ic_new_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.ic_new_date, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ic_suggest_new_date", bundle: ..., traitCollection: ...)`
      static func ic_suggest_new_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.ic_suggest_new_date, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ic_weiger_afspraak", bundle: ..., traitCollection: ...)`
      static func ic_weiger_afspraak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.ic_weiger_afspraak, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_bijlagen", bundle: ..., traitCollection: ...)`
      static func icn_bijlagen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_bijlagen, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_business", bundle: ..., traitCollection: ...)`
      static func icn_business(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_business, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_business@1,5x", bundle: ..., traitCollection: ...)`
      static func icn_business15x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_business15x, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_check", bundle: ..., traitCollection: ...)`
      static func icn_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_check, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_check_white", bundle: ..., traitCollection: ...)`
      static func icn_check_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_check_white, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_cross", bundle: ..., traitCollection: ...)`
      static func icn_cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_cross, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_dots", bundle: ..., traitCollection: ...)`
      static func icn_dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_dots, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_group_chat", bundle: ..., traitCollection: ...)`
      static func icn_group_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_group_chat, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_location", bundle: ..., traitCollection: ...)`
      static func icn_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_location, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_message", bundle: ..., traitCollection: ...)`
      static func icn_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_message, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_pencil", bundle: ..., traitCollection: ...)`
      static func icn_pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_pencil, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_people", bundle: ..., traitCollection: ...)`
      static func icn_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_people, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_private_chat", bundle: ..., traitCollection: ...)`
      static func icn_private_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_private_chat, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_question", bundle: ..., traitCollection: ...)`
      static func icn_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_question, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icn_user", bundle: ..., traitCollection: ...)`
      static func icn_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.icn_user, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "new_chat", bundle: ..., traitCollection: ...)`
      static func new_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.new_chat, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
      static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.pencil, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
      static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.pin, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "pin-1", bundle: ..., traitCollection: ...)`
      static func pin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.pin1, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_dot", bundle: ..., traitCollection: ...)`
      static func red_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_dot, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_dot-1", bundle: ..., traitCollection: ...)`
      static func red_dot1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_dot1, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_dot@1,5x", bundle: ..., traitCollection: ...)`
      static func red_dot15x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_dot15x, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_line", bundle: ..., traitCollection: ...)`
      static func red_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_line, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_line-1", bundle: ..., traitCollection: ...)`
      static func red_line1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_line1, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "red_line@1,5x", bundle: ..., traitCollection: ...)`
      static func red_line15x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.invıtationItems.red_line15x, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 51 nibs.
  struct nib {
    /// Nib `AddDateCollectionCell`.
    static let addDateCollectionCell = _R.nib._AddDateCollectionCell()
    /// Nib `AddToAgendaHeader`.
    static let addToAgendaHeader = _R.nib._AddToAgendaHeader()
    /// Nib `AddToAgendacell`.
    static let addToAgendacell = _R.nib._AddToAgendacell()
    /// Nib `AvailabilityHeaderView`.
    static let availabilityHeaderView = _R.nib._AvailabilityHeaderView()
    /// Nib `AvailablityOverviewCell`.
    static let availablityOverviewCell = _R.nib._AvailablityOverviewCell()
    /// Nib `BottomMapView`.
    static let bottomMapView = _R.nib._BottomMapView()
    /// Nib `CollectionReusableView`.
    static let collectionReusableView = _R.nib._CollectionReusableView()
    /// Nib `CommentFieldView`.
    static let commentFieldView = _R.nib._CommentFieldView()
    /// Nib `InvitationAddonView`.
    static let invitationAddonView = _R.nib._InvitationAddonView()
    /// Nib `InvitationBasicInfoView`.
    static let invitationBasicInfoView = _R.nib._InvitationBasicInfoView()
    /// Nib `InvitationDetailDateTitleView`.
    static let invitationDetailDateTitleView = _R.nib._InvitationDetailDateTitleView()
    /// Nib `InvitationDetailFooterView`.
    static let invitationDetailFooterView = _R.nib._InvitationDetailFooterView()
    /// Nib `InvitationDetailHeaderView`.
    static let invitationDetailHeaderView = _R.nib._InvitationDetailHeaderView()
    /// Nib `InvitationProposedDateCell`.
    static let invitationProposedDateCell = _R.nib._InvitationProposedDateCell()
    /// Nib `InvitationSelectDateCollectionCell`.
    static let invitationSelectDateCollectionCell = _R.nib._InvitationSelectDateCollectionCell()
    /// Nib `InvitationSelectDateHeaderView`.
    static let invitationSelectDateHeaderView = _R.nib._InvitationSelectDateHeaderView()
    /// Nib `InvitationSetupCell`.
    static let invitationSetupCell = _R.nib._InvitationSetupCell()
    /// Nib `InvitationTabView`.
    static let invitationTabView = _R.nib._InvitationTabView()
    /// Nib `OldChatBubbleMessageView`.
    static let oldChatBubbleMessageView = _R.nib._OldChatBubbleMessageView()
    /// Nib `OldDateCell`.
    static let oldDateCell = _R.nib._OldDateCell()
    /// Nib `OldDateHeaderCell`.
    static let oldDateHeaderCell = _R.nib._OldDateHeaderCell()
    /// Nib `OldDayCollectionViewCell`.
    static let oldDayCollectionViewCell = _R.nib._OldDayCollectionViewCell()
    /// Nib `OldDiagramCircleView`.
    static let oldDiagramCircleView = _R.nib._OldDiagramCircleView()
    /// Nib `OldEmojiInputView`.
    static let oldEmojiInputView = _R.nib._OldEmojiInputView()
    /// Nib `OldHomeTitleView`.
    static let oldHomeTitleView = _R.nib._OldHomeTitleView()
    /// Nib `OldLoadingView`.
    static let oldLoadingView = _R.nib._OldLoadingView()
    /// Nib `OldPlanningDateViewCollectionViewCell`.
    static let oldPlanningDateViewCollectionViewCell = _R.nib._OldPlanningDateViewCollectionViewCell()
    /// Nib `OldPlanningDateView`.
    static let oldPlanningDateView = _R.nib._OldPlanningDateView()
    /// Nib `OldPlanningView`.
    static let oldPlanningView = _R.nib._OldPlanningView()
    /// Nib `OldSideMenuHeaderView`.
    static let oldSideMenuHeaderView = _R.nib._OldSideMenuHeaderView()
    /// Nib `OldTimelineMenu`.
    static let oldTimelineMenu = _R.nib._OldTimelineMenu()
    /// Nib `OldYearMonthHeaderView`.
    static let oldYearMonthHeaderView = _R.nib._OldYearMonthHeaderView()
    /// Nib `PickedDateView`.
    static let pickedDateView = _R.nib._PickedDateView()
    /// Nib `SideMenuTableViewCell`.
    static let sideMenuTableViewCell = _R.nib._SideMenuTableViewCell()
    /// Nib `SuggestedDateView`.
    static let suggestedDateView = _R.nib._SuggestedDateView()
    /// Nib `SyncAppCollectionViewCell`.
    static let syncAppCollectionViewCell = _R.nib._SyncAppCollectionViewCell()
    /// Nib `TimelineDayCollectionViewCell`.
    static let timelineDayCollectionViewCell = _R.nib._TimelineDayCollectionViewCell()
    /// Nib `TimelineHeaderCollectionViewCell`.
    static let timelineHeaderCollectionViewCell = _R.nib._TimelineHeaderCollectionViewCell()
    /// Nib `TopDialogueView`.
    static let topDialogueView = _R.nib._TopDialogueView()
    /// Nib `TutorialSlide`.
    static let tutorialSlide = _R.nib._TutorialSlide()
    /// Nib `WeekMonthCollectionViewCell`.
    static let weekMonthCollectionViewCell = _R.nib._WeekMonthCollectionViewCell()
    /// Nib `oldAppointmentTableViewCell`.
    static let oldAppointmentTableViewCell = _R.nib._oldAppointmentTableViewCell()
    /// Nib `oldDayStackView`.
    static let oldDayStackView = _R.nib._oldDayStackView()
    /// Nib `oldInvitationDateTableViewCell`.
    static let oldInvitationDateTableViewCell = _R.nib._oldInvitationDateTableViewCell()
    /// Nib `oldInvitationGeneralTableViewCell`.
    static let oldInvitationGeneralTableViewCell = _R.nib._oldInvitationGeneralTableViewCell()
    /// Nib `oldIsTypingView`.
    static let oldIsTypingView = _R.nib._oldIsTypingView()
    /// Nib `oldMonthCollectionViewCell`.
    static let oldMonthCollectionViewCell = _R.nib._oldMonthCollectionViewCell()
    /// Nib `oldParticipantTableViewCell`.
    static let oldParticipantTableViewCell = _R.nib._oldParticipantTableViewCell()
    /// Nib `oldPlanningMonthDetailTableViewCell`.
    static let oldPlanningMonthDetailTableViewCell = _R.nib._oldPlanningMonthDetailTableViewCell()
    /// Nib `oldPlanningSearchCell`.
    static let oldPlanningSearchCell = _R.nib._oldPlanningSearchCell()
    /// Nib `oldPlanningYearHeaderView`.
    static let oldPlanningYearHeaderView = _R.nib._oldPlanningYearHeaderView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddDateCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addDateCollectionCell) instead")
    static func addDateCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addDateCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddToAgendaHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addToAgendaHeader) instead")
    static func addToAgendaHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addToAgendaHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddToAgendacell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addToAgendacell) instead")
    static func addToAgendacell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addToAgendacell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AvailabilityHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.availabilityHeaderView) instead")
    static func availabilityHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.availabilityHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AvailablityOverviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.availablityOverviewCell) instead")
    static func availablityOverviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.availablityOverviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BottomMapView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bottomMapView) instead")
    static func bottomMapView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bottomMapView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collectionReusableView) instead")
    static func collectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collectionReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentFieldView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentFieldView) instead")
    static func commentFieldView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentFieldView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationAddonView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationAddonView) instead")
    static func invitationAddonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationAddonView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationBasicInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationBasicInfoView) instead")
    static func invitationBasicInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationBasicInfoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationDetailDateTitleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationDetailDateTitleView) instead")
    static func invitationDetailDateTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationDetailDateTitleView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationDetailFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationDetailFooterView) instead")
    static func invitationDetailFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationDetailFooterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationDetailHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationDetailHeaderView) instead")
    static func invitationDetailHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationDetailHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationProposedDateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationProposedDateCell) instead")
    static func invitationProposedDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationProposedDateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationSelectDateCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationSelectDateCollectionCell) instead")
    static func invitationSelectDateCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationSelectDateCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationSelectDateHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationSelectDateHeaderView) instead")
    static func invitationSelectDateHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationSelectDateHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationSetupCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationSetupCell) instead")
    static func invitationSetupCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationSetupCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationTabView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationTabView) instead")
    static func invitationTabView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationTabView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldChatBubbleMessageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldChatBubbleMessageView) instead")
    static func oldChatBubbleMessageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldChatBubbleMessageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldDateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldDateCell) instead")
    static func oldDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldDateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldDateHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldDateHeaderCell) instead")
    static func oldDateHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldDateHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldDayCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldDayCollectionViewCell) instead")
    static func oldDayCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldDayCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldDiagramCircleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldDiagramCircleView) instead")
    static func oldDiagramCircleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldDiagramCircleView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldEmojiInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldEmojiInputView) instead")
    static func oldEmojiInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldEmojiInputView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldHomeTitleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldHomeTitleView) instead")
    static func oldHomeTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldHomeTitleView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldLoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldLoadingView) instead")
    static func oldLoadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldLoadingView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldPlanningDateView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningDateView) instead")
    static func oldPlanningDateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningDateView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldPlanningDateViewCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningDateViewCollectionViewCell) instead")
    static func oldPlanningDateViewCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningDateViewCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldPlanningView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningView) instead")
    static func oldPlanningView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldSideMenuHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldSideMenuHeaderView) instead")
    static func oldSideMenuHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldSideMenuHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldTimelineMenu", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldTimelineMenu) instead")
    static func oldTimelineMenu(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldTimelineMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OldYearMonthHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldYearMonthHeaderView) instead")
    static func oldYearMonthHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldYearMonthHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickedDateView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickedDateView) instead")
    static func pickedDateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickedDateView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuTableViewCell) instead")
    static func sideMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedDateView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedDateView) instead")
    static func suggestedDateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedDateView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyncAppCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syncAppCollectionViewCell) instead")
    static func syncAppCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syncAppCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimelineDayCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timelineDayCollectionViewCell) instead")
    static func timelineDayCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timelineDayCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimelineHeaderCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timelineHeaderCollectionViewCell) instead")
    static func timelineHeaderCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timelineHeaderCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopDialogueView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topDialogueView) instead")
    static func topDialogueView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topDialogueView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TutorialSlide", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialSlide) instead")
    static func tutorialSlide(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialSlide)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeekMonthCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weekMonthCollectionViewCell) instead")
    static func weekMonthCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weekMonthCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldAppointmentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldAppointmentTableViewCell) instead")
    static func oldAppointmentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldAppointmentTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldDayStackView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldDayStackView) instead")
    static func oldDayStackView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldDayStackView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldInvitationDateTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldInvitationDateTableViewCell) instead")
    static func oldInvitationDateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldInvitationDateTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldInvitationGeneralTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldInvitationGeneralTableViewCell) instead")
    static func oldInvitationGeneralTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldInvitationGeneralTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldIsTypingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldIsTypingView) instead")
    static func oldIsTypingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldIsTypingView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldMonthCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldMonthCollectionViewCell) instead")
    static func oldMonthCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldMonthCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldParticipantTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldParticipantTableViewCell) instead")
    static func oldParticipantTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldParticipantTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldPlanningMonthDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningMonthDetailTableViewCell) instead")
    static func oldPlanningMonthDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningMonthDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldPlanningSearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningSearchCell) instead")
    static func oldPlanningSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningSearchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "oldPlanningYearHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oldPlanningYearHeaderView) instead")
    static func oldPlanningYearHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oldPlanningYearHeaderView)
    }
    #endif

    static func addDateCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDateCollectionCell? {
      return R.nib.addDateCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDateCollectionCell
    }

    static func addToAgendaHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addToAgendaHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addToAgendacell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddToAgendaCell? {
      return R.nib.addToAgendacell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddToAgendaCell
    }

    static func availabilityHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.availabilityHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func availablityOverviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AvailablityOverviewCell? {
      return R.nib.availablityOverviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AvailablityOverviewCell
    }

    static func bottomMapView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bottomMapView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func collectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDateHeaderView? {
      return R.nib.collectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDateHeaderView
    }

    static func commentFieldView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commentFieldView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func invitationAddonView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.invitationAddonView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func invitationBasicInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.invitationBasicInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func invitationDetailDateTitleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailDateTitleView? {
      return R.nib.invitationDetailDateTitleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailDateTitleView
    }

    static func invitationDetailFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailFooterView? {
      return R.nib.invitationDetailFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailFooterView
    }

    static func invitationDetailHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailHeaderView? {
      return R.nib.invitationDetailHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailHeaderView
    }

    static func invitationProposedDateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationProposedDateCell? {
      return R.nib.invitationProposedDateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationProposedDateCell
    }

    static func invitationSelectDateCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSelectDateCollectionCell? {
      return R.nib.invitationSelectDateCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSelectDateCollectionCell
    }

    static func invitationSelectDateHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSelectDateHeaderView? {
      return R.nib.invitationSelectDateHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSelectDateHeaderView
    }

    static func invitationSetupCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSetupCell? {
      return R.nib.invitationSetupCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSetupCell
    }

    static func invitationTabView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.invitationTabView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldAppointmentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldAppointmentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldChatBubbleMessageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldChatBubbleMessageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldDateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldDateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldDateHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldDateHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldDayCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
      return R.nib.oldDayCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
    }

    static func oldDiagramCircleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldDiagramCircleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldEmojiInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldEmojiInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldHomeTitleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldHomeTitleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldInvitationDateTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldInvitationDateTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldInvitationGeneralTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldInvitationGeneralTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldIsTypingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldIsTypingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldLoadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldLoadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldMonthCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
      return R.nib.oldMonthCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
    }

    static func oldParticipantTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldParticipantTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldPlanningDateView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldPlanningDateView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldPlanningDateViewCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
      return R.nib.oldPlanningDateViewCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
    }

    static func oldPlanningMonthDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldPlanningMonthDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldPlanningSearchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldPlanningSearchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldPlanningView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldPlanningView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldPlanningYearHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldPlanningYearHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldSideMenuHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldSideMenuHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func oldTimelineMenu(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oldTimelineMenu.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oldYearMonthHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.oldYearMonthHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }

    static func pickedDateView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickedDateView? {
      return R.nib.pickedDateView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickedDateView
    }

    static func sideMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuTableViewCell? {
      return R.nib.sideMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuTableViewCell
    }

    static func suggestedDateView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.suggestedDateView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func syncAppCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyncAppCollectionViewCell? {
      return R.nib.syncAppCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyncAppCollectionViewCell
    }

    static func timelineDayCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimelineDayCollectionViewCell? {
      return R.nib.timelineDayCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimelineDayCollectionViewCell
    }

    static func timelineHeaderCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimelineHeaderCollectionViewCell? {
      return R.nib.timelineHeaderCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimelineHeaderCollectionViewCell
    }

    static func topDialogueView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.topDialogueView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tutorialSlide(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialSlide? {
      return R.nib.tutorialSlide.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialSlide
    }

    static func weekMonthCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeekMonthCollectionViewCell? {
      return R.nib.weekMonthCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeekMonthCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 29 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddToAgendaCell`.
    static let addToAgendaCell: Rswift.ReuseIdentifier<AddToAgendaCell> = Rswift.ReuseIdentifier(identifier: "AddToAgendaCell")
    /// Reuse identifier `AppointmentTableViewCell`.
    static let appointmentTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AppointmentTableViewCell")
    /// Reuse identifier `AvailablityOverviewCell`.
    static let availablityOverviewCell: Rswift.ReuseIdentifier<AvailablityOverviewCell> = Rswift.ReuseIdentifier(identifier: "AvailablityOverviewCell")
    /// Reuse identifier `CollectionReusableView`.
    static let collectionReusableView: Rswift.ReuseIdentifier<AddDateHeaderView> = Rswift.ReuseIdentifier(identifier: "CollectionReusableView")
    /// Reuse identifier `DateCell`.
    static let dateCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DateCell")
    /// Reuse identifier `DateHeaderCell`.
    static let dateHeaderCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DateHeaderCell")
    /// Reuse identifier `DayCollectionViewCell`.
    static let dayCollectionViewCell: Rswift.ReuseIdentifier<UIKit.UICollectionViewCell> = Rswift.ReuseIdentifier(identifier: "DayCollectionViewCell")
    /// Reuse identifier `InvitationCell`.
    static let invitationCell: Rswift.ReuseIdentifier<InvitationCell> = Rswift.ReuseIdentifier(identifier: "InvitationCell")
    /// Reuse identifier `InvitationDateTableViewCell`.
    static let invitationDateTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "InvitationDateTableViewCell")
    /// Reuse identifier `InvitationDetailDateTitleView`.
    static let invitationDetailDateTitleView: Rswift.ReuseIdentifier<InvitationDetailDateTitleView> = Rswift.ReuseIdentifier(identifier: "InvitationDetailDateTitleView")
    /// Reuse identifier `InvitationDetailFooterView`.
    static let invitationDetailFooterView: Rswift.ReuseIdentifier<InvitationDetailFooterView> = Rswift.ReuseIdentifier(identifier: "InvitationDetailFooterView")
    /// Reuse identifier `InvitationDetailHeaderView`.
    static let invitationDetailHeaderView: Rswift.ReuseIdentifier<InvitationDetailHeaderView> = Rswift.ReuseIdentifier(identifier: "InvitationDetailHeaderView")
    /// Reuse identifier `InvitationGeneralTableViewCell`.
    static let invitationGeneralTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "InvitationGeneralTableViewCell")
    /// Reuse identifier `InvitationProposedDateCell`.
    static let invitationProposedDateCell: Rswift.ReuseIdentifier<InvitationProposedDateCell> = Rswift.ReuseIdentifier(identifier: "InvitationProposedDateCell")
    /// Reuse identifier `InvitationSetupCell`.
    static let invitationSetupCell: Rswift.ReuseIdentifier<InvitationSetupCell> = Rswift.ReuseIdentifier(identifier: "InvitationSetupCell")
    /// Reuse identifier `MonthCollectionViewCell`.
    static let monthCollectionViewCell: Rswift.ReuseIdentifier<UIKit.UICollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MonthCollectionViewCell")
    /// Reuse identifier `MultipleButtonCell`.
    static let multipleButtonCell: Rswift.ReuseIdentifier<MultipleButtonCell> = Rswift.ReuseIdentifier(identifier: "MultipleButtonCell")
    /// Reuse identifier `ParticipantTableViewCell`.
    static let participantTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ParticipantTableViewCell")
    /// Reuse identifier `PickedDateView`.
    static let pickedDateView: Rswift.ReuseIdentifier<PickedDateView> = Rswift.ReuseIdentifier(identifier: "PickedDateView")
    /// Reuse identifier `PlanningDateViewCollectionViewCell`.
    static let planningDateViewCollectionViewCell: Rswift.ReuseIdentifier<UIKit.UICollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PlanningDateViewCollectionViewCell")
    /// Reuse identifier `PlanningMonthDetailTableViewCell`.
    static let planningMonthDetailTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "PlanningMonthDetailTableViewCell")
    /// Reuse identifier `PlanningSearchCell`.
    static let planningSearchCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "PlanningSearchCell")
    /// Reuse identifier `SettingsTableViewCell`.
    static let settingsTableViewCell: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell")
    /// Reuse identifier `SideMenuHeaderView`.
    static let sideMenuHeaderView: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SideMenuHeaderView")
    /// Reuse identifier `SideMenuTableViewCell`.
    static let sideMenuTableViewCell: Rswift.ReuseIdentifier<SideMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "SideMenuTableViewCell")
    /// Reuse identifier `TimelineDayCollectionViewCell`.
    static let timelineDayCollectionViewCell: Rswift.ReuseIdentifier<TimelineDayCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TimelineDayCollectionViewCell")
    /// Reuse identifier `TimelineHeaderCollectionViewCell`.
    static let timelineHeaderCollectionViewCell: Rswift.ReuseIdentifier<TimelineHeaderCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TimelineHeaderCollectionViewCell")
    /// Reuse identifier `WeekMonthCollectionViewCell`.
    static let weekMonthCollectionViewCell: Rswift.ReuseIdentifier<WeekMonthCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "WeekMonthCollectionViewCell")
    /// Reuse identifier `YearMonthTableViewCell`.
    static let yearMonthTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "YearMonthTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 258 localization keys.
    struct localizable {
      /// Base translation: 
      ///
      /// Locales: Base, en
      static let availability = Rswift.StringResource(key: "availability", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let attachments = Rswift.StringResource(key: "attachments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let credit = Rswift.StringResource(key: "credit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let isAvailable = Rswift.StringResource(key: "isAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let moreAreTyping = Rswift.StringResource(key: "moreAreTyping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let myCredits = Rswift.StringResource(key: "myCredits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let peopleInvited = Rswift.StringResource(key: "peopleInvited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static let totalPersonCount = Rswift.StringResource(key: "totalPersonCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ gave a comment on the chat: %@.
      ///
      /// Locales: Base, en
      static let eventDetailTypeThree = Rswift.StringResource(key: "eventDetailTypeThree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ has added a to do list item in %@.
      ///
      /// Locales: Base, en
      static let eventDetailTypeTwo = Rswift.StringResource(key: "eventDetailTypeTwo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ has pinned a date for %@.
      ///
      /// Locales: Base, en
      static let eventDetailTypeFour = Rswift.StringResource(key: "eventDetailTypeFour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ is typing...
      ///
      /// Locales: Base, en
      static let isTyping = Rswift.StringResource(key: "isTyping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ suggests a new date in %@.
      ///
      /// Locales: Base, en
      static let eventDetailTypeOne = Rswift.StringResource(key: "eventDetailTypeOne", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ wants to add you to M.O.M                 %@.
      ///
      /// Locales: Base, en
      static let newIncomingMOMPopUpInvitationFirst = Rswift.StringResource(key: "newIncomingMOMPopUpInvitationFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: APP!POiNTMENT
      ///
      /// Locales: Base, en
      static let appTitle = Rswift.StringResource(key: "appTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Access to cloud service information is not allowed
      ///
      /// Locales: Base, en
      static let cloudServiceinformationNotAllowed = Rswift.StringResource(key: "cloudServiceinformationNotAllowed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Add this date to available data in the group?
      ///
      /// Locales: Base, en
      static let memoToPopUpDateSuggestionSecond = Rswift.StringResource(key: "memoToPopUpDateSuggestionSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: All purchases have been restored
      ///
      /// Locales: Base, en
      static let allPurchasesRestored = Rswift.StringResource(key: "allPurchasesRestored", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Are you sure that you want to cancel the appointment %@?
      ///
      /// Locales: Base, en
      static let cancelAppointmentPopUpFirst = Rswift.StringResource(key: "cancelAppointmentPopUpFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Are you sure you no longer want to participate in                 %@
      ///
      /// Locales: Base, en
      static let newIncomingMOMPopUpLeave = Rswift.StringResource(key: "newIncomingMOMPopUpLeave", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Are you sure you want to cancel this appointment ? The invitation will not appear in your overview.
      ///
      /// Locales: Base, en
      static let cancelAppointment = Rswift.StringResource(key: "cancelAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Available
      ///
      /// Locales: Base, en
      static let availableTitle = Rswift.StringResource(key: "availableTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Buy Credits
      ///
      /// Locales: Base, en
      static let buyCredits = Rswift.StringResource(key: "buyCredits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Buy Themes
      ///
      /// Locales: Base, en
      static let buyTheme = Rswift.StringResource(key: "buyTheme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Cancel
      ///
      /// Locales: Base, en
      static let cancelButton = Rswift.StringResource(key: "cancelButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Cloud Service Revoked
      ///
      /// Locales: Base, en
      static let cloudServiceRevoked = Rswift.StringResource(key: "cloudServiceRevoked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Confirm Password
      ///
      /// Locales: Base, en
      static let confirmPassword = Rswift.StringResource(key: "confirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Could not retrieve product info
      ///
      /// Locales: Base, en
      static let couldNotRetrieveProductInfo = Rswift.StringResource(key: "couldNotRetrieveProductInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Dates
      ///
      /// Locales: Base, en
      static let dates = Rswift.StringResource(key: "dates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Do you want to log in now?
      ///
      /// Locales: Base, en
      static let newAppointmentNotLoggedInSecondDescription = Rswift.StringResource(key: "newAppointmentNotLoggedInSecondDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Don't add
      ///
      /// Locales: Base, en
      static let dontAdd = Rswift.StringResource(key: "dontAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Download Meeting
      ///
      /// Locales: Base, en
      static let popUpDownloadMemo = Rswift.StringResource(key: "popUpDownloadMemo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Edit invitation
      ///
      /// Locales: Base, en
      static let editInvitation = Rswift.StringResource(key: "editInvitation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Email address and password don't match.
      ///
      /// Locales: Base, en
      static let emailAndPasswordDontMatch = Rswift.StringResource(key: "emailAndPasswordDontMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Email address is already taken.
      ///
      /// Locales: Base, en
      static let emailAddressIsAlreadyTaken = Rswift.StringResource(key: "emailAddressIsAlreadyTaken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Email address is not valid.
      ///
      /// Locales: Base, en
      static let emailNotValid = Rswift.StringResource(key: "emailNotValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Email and / or password incorrect
      ///
      /// Locales: Base, en
      static let wrongCredentials = Rswift.StringResource(key: "wrongCredentials", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Event starts after its end
      ///
      /// Locales: Base, en
      static let timeConflictTitle = Rswift.StringResource(key: "timeConflictTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: First Name
      ///
      /// Locales: Base, en
      static let firstName = Rswift.StringResource(key: "firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: In order to register, you must agree to the Terms.
      ///
      /// Locales: Base, en
      static let mustAcceptTermsAndConditions = Rswift.StringResource(key: "mustAcceptTermsAndConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Incoming
      ///
      /// Locales: Base, en
      static let incoming = Rswift.StringResource(key: "incoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Invalid Product identifier:
      ///
      /// Locales: Base, en
      static let invalidProductIdentifier = Rswift.StringResource(key: "invalidProductIdentifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Invitations - outgoing
      ///
      /// Locales: Base, en
      static let outgoing = Rswift.StringResource(key: "outgoing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: KvK number
      ///
      /// Locales: Base, en
      static let kvkNumber = Rswift.StringResource(key: "kvkNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Last Name
      ///
      /// Locales: Base, en
      static let lastName = Rswift.StringResource(key: "lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Last activitiy on
      ///
      /// Locales: Base, en
      static let lastAccessed = Rswift.StringResource(key: "lastAccessed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Maybe
      ///
      /// Locales: Base, en
      static let maybeTitle = Rswift.StringResource(key: "maybeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Network error while verifying receipt:
      ///
      /// Locales: Base, en
      static let networkErrorWhileVerifyingReceipt = Rswift.StringResource(key: "networkErrorWhileVerifyingReceipt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: New Proposal
      ///
      /// Locales: Base, en
      static let newProposal = Rswift.StringResource(key: "newProposal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: No previous purchases were found
      ///
      /// Locales: Base, en
      static let noPreviousPurchase = Rswift.StringResource(key: "noPreviousPurchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: No receipt data. Try again.
      ///
      /// Locales: Base, en
      static let noReceiptData = Rswift.StringResource(key: "noReceiptData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Nothing to restore
      ///
      /// Locales: Base, en
      static let nothingToRestore = Rswift.StringResource(key: "nothingToRestore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: OK
      ///
      /// Locales: Base, en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Open new chat
      ///
      /// Locales: Base, en
      static let openNewChat = Rswift.StringResource(key: "openNewChat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Password should contain at least 8 characters
      ///
      /// Locales: Base, en
      static let passwordTooShort = Rswift.StringResource(key: "passwordTooShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Password should contain at least one digit
      ///
      /// Locales: Base, en
      static let passwordMustContainOneDigit = Rswift.StringResource(key: "passwordMustContainOneDigit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Password should contain at least one lowercase character
      ///
      /// Locales: Base, en
      static let passwordMustContainOneLowercase = Rswift.StringResource(key: "passwordMustContainOneLowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Password should contain at least one uppercase character
      ///
      /// Locales: Base, en
      static let passwordMustContainOneUppercase = Rswift.StringResource(key: "passwordMustContainOneUppercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Passwords don't match
      ///
      /// Locales: Base, en
      static let passwordDontMatch = Rswift.StringResource(key: "passwordDontMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please confirm password.
      ///
      /// Locales: Base, en
      static let emptyRePassword = Rswift.StringResource(key: "emptyRePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in address.
      ///
      /// Locales: Base, en
      static let emptyAddress = Rswift.StringResource(key: "emptyAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in email and password.
      ///
      /// Locales: Base, en
      static let emptyFields = Rswift.StringResource(key: "emptyFields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in email.
      ///
      /// Locales: Base, en
      static let emptyEmail = Rswift.StringResource(key: "emptyEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in function.
      ///
      /// Locales: Base, en
      static let emptyFunction = Rswift.StringResource(key: "emptyFunction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in kvk number.
      ///
      /// Locales: Base, en
      static let kvkEmpty = Rswift.StringResource(key: "kvkEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in name.
      ///
      /// Locales: Base, en
      static let emptyName = Rswift.StringResource(key: "emptyName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in postal code.
      ///
      /// Locales: Base, en
      static let emptyPostal = Rswift.StringResource(key: "emptyPostal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in surname.
      ///
      /// Locales: Base, en
      static let emptySurname = Rswift.StringResource(key: "emptySurname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in username.
      ///
      /// Locales: Base, en
      static let emptyUsername = Rswift.StringResource(key: "emptyUsername", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please fill in your password.
      ///
      /// Locales: Base, en
      static let emptyPassword = Rswift.StringResource(key: "emptyPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Please specify both start and end time for the appointment.
      ///
      /// Locales: Base, en
      static let timeMissingDescription = Rswift.StringResource(key: "timeMissingDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Private Conversation
      ///
      /// Locales: Base, en
      static let privateConversation = Rswift.StringResource(key: "privateConversation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Product is not available in the current storefront
      ///
      /// Locales: Base, en
      static let productNotAvailable = Rswift.StringResource(key: "productNotAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Product will not expire
      ///
      /// Locales: Base, en
      static let productWillNotExpire = Rswift.StringResource(key: "productWillNotExpire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Purchase Failed:
      ///
      /// Locales: Base, en
      static let purchaseFailed = Rswift.StringResource(key: "purchaseFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Purchase Success:
      ///
      /// Locales: Base, en
      static let purchaseSuccess = Rswift.StringResource(key: "purchaseSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Purchases Restored
      ///
      /// Locales: Base, en
      static let purchaseRestored = Rswift.StringResource(key: "purchaseRestored", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Receipt verification
      ///
      /// Locales: Base, en
      static let receiptverification = Rswift.StringResource(key: "receiptverification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Receipt verification failed:
      ///
      /// Locales: Base, en
      static let receiptVerificationFailed = Rswift.StringResource(key: "receiptVerificationFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Receipt verified
      ///
      /// Locales: Base, en
      static let recieptVerified = Rswift.StringResource(key: "recieptVerified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Receipt verified remotely
      ///
      /// Locales: Base, en
      static let receiptVerifiedRemotely = Rswift.StringResource(key: "receiptVerifiedRemotely", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Reject
      ///
      /// Locales: Base, en
      static let rejectButton = Rswift.StringResource(key: "rejectButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Restore Failed
      ///
      /// Locales: Base, en
      static let restoreFailed = Rswift.StringResource(key: "restoreFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Selected date
      ///
      /// Locales: Base, en
      static let selectedDate = Rswift.StringResource(key: "selectedDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Something went wrong while synching database!
      ///
      /// Locales: Base, en
      static let databaseSyncError = Rswift.StringResource(key: "databaseSyncError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The appointment would be removed from your list
      ///
      /// Locales: Base, en
      static let cancelAppointmentPopUpSecond = Rswift.StringResource(key: "cancelAppointmentPopUpSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The email you provided is not registered
      ///
      /// Locales: Base, en
      static let emailNotRegistered = Rswift.StringResource(key: "emailNotRegistered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The other group members receive a message about this in the app.
      ///
      /// Locales: Base, en
      static let invitationPopUpDateConfirmedSecond = Rswift.StringResource(key: "invitationPopUpDateConfirmedSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The participants then receive one                     message on their phone.
      ///
      /// Locales: Base, en
      static let meetingPopUpSendReminderSecond = Rswift.StringResource(key: "meetingPopUpSendReminderSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The purchase identifier was invalid
      ///
      /// Locales: Base, en
      static let purchaseIdentifierInvalid = Rswift.StringResource(key: "purchaseIdentifierInvalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The start time you selected is later than the end time. Please choose another time for either start or end.
      ///
      /// Locales: Base, en
      static let timeConflictDescription = Rswift.StringResource(key: "timeConflictDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: The users will be notified
      ///
      /// Locales: Base, en
      static let sendReminderPopUpSecondDescription = Rswift.StringResource(key: "sendReminderPopUpSecondDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: This product has never been purchased
      ///
      /// Locales: Base, en
      static let productNeverPurchased = Rswift.StringResource(key: "productNeverPurchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Time is not selected
      ///
      /// Locales: Base, en
      static let timeMissingTitle = Rswift.StringResource(key: "timeMissingTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: To do list
      ///
      /// Locales: Base, en
      static let todoList = Rswift.StringResource(key: "todoList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Unavailable
      ///
      /// Locales: Base, en
      static let unavailableTitle = Rswift.StringResource(key: "unavailableTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Unknown
      ///
      /// Locales: Base, en
      static let unknownTitle = Rswift.StringResource(key: "unknownTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Unknown error. Please contact support
      ///
      /// Locales: Base
      static let unknownError = Rswift.StringResource(key: "unknownError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Username can only contain letters and numbers.
      ///
      /// Locales: Base, en
      static let usernameCannotContainSymbols = Rswift.StringResource(key: "usernameCannotContainSymbols", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Username is too long.
      ///
      /// Locales: Base, en
      static let usernameTooLong = Rswift.StringResource(key: "usernameTooLong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Wrong email or password
      ///
      /// Locales: Base, en
      static let wrongCredentialsError = Rswift.StringResource(key: "wrongCredentialsError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: You are not authenticated. Please login in!
      ///
      /// Locales: Base, en
      static let unauthenticatedUserError = Rswift.StringResource(key: "unauthenticatedUserError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: You must be logged in to make a new appointment.
      ///
      /// Locales: Base, en
      static let invitationPopUpAddAppointmentLoginFirst = Rswift.StringResource(key: "invitationPopUpAddAppointmentLoginFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: You must be logged in to make a new appointment.
      ///
      /// Locales: Base, en
      static let newAppointmentNotLoggedInFirstDescription = Rswift.StringResource(key: "newAppointmentNotLoggedInFirstDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: about App!Po!ntment
      ///
      /// Locales: Base, en
      static let aboutAppointment = Rswift.StringResource(key: "aboutAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: absent
      ///
      /// Locales: Base, en
      static let absent = Rswift.StringResource(key: "absent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: account
      ///
      /// Locales: Base, en
      static let account = Rswift.StringResource(key: "account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: add
      ///
      /// Locales: Base, en
      static let add = Rswift.StringResource(key: "add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: add more data
      ///
      /// Locales: Base, en
      static let addMoreData = Rswift.StringResource(key: "addMoreData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: add participant
      ///
      /// Locales: Base, en
      static let addParticipant = Rswift.StringResource(key: "addParticipant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: add profile photo / logo company
      ///
      /// Locales: Base, en
      static let addProfilePhoto = Rswift.StringResource(key: "addProfilePhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: add to calendar
      ///
      /// Locales: Base, en
      static let addToCalendar = Rswift.StringResource(key: "addToCalendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: added
      ///
      /// Locales: Base, en
      static let added = Rswift.StringResource(key: "added", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: additional for a business profile
      ///
      /// Locales: Base, en
      static let editProfileDescription = Rswift.StringResource(key: "editProfileDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: address
      ///
      /// Locales: Base, en
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: agenda
      ///
      /// Locales: Base, en
      static let agenda = Rswift.StringResource(key: "agenda", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: appointment was planned on a holiday                 (%@)
      ///
      /// Locales: Base, en
      static let popUpAddAppointmentOnHolidayFirst = Rswift.StringResource(key: "popUpAddAppointmentOnHolidayFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: appointments
      ///
      /// Locales: Base, en
      static let appointments = Rswift.StringResource(key: "appointments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to buy this theme '%@' for %@ 
      ///
      /// Locales: Base, en
      static let buyThemePopUpNormal = Rswift.StringResource(key: "BuyThemePopUpNormal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to cancel the appointment?
      ///
      /// Locales: Base, en
      static let invitationIncomingPopUpCancelAppointmentFirst = Rswift.StringResource(key: "invitationIncomingPopUpCancelAppointmentFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to delete                 %@
      ///
      /// Locales: Base, en
      static let deleteAccountPopUp = Rswift.StringResource(key: "deleteAccountPopUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to delete                 %@?
      ///
      /// Locales: Base, en
      static let popUpDeleteMemo = Rswift.StringResource(key: "popUpDeleteMemo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to delete %@
      ///
      /// Locales: Base, en
      static let memoPopUpDelete = Rswift.StringResource(key: "MEMOPopUpDelete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to logout from                 %@
      ///
      /// Locales: Base, en
      static let logoutAccountPopUp = Rswift.StringResource(key: "logoutAccountPopUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure that you want to select %@ ?
      ///
      /// Locales: Base, en
      static let todoListfirstDescription = Rswift.StringResource(key: "todoListfirstDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure you have one                 want to send a reminder of                 all participants?
      ///
      /// Locales: Base, en
      static let meetingPopUpSendReminderFirst = Rswift.StringResource(key: "meetingPopUpSendReminderFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure you want to delete memo to                 %@?
      ///
      /// Locales: Base, en
      static let popUpRemoveMemoTo = Rswift.StringResource(key: "popUpRemoveMemoTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure you want to plan it on this day?
      ///
      /// Locales: Base, en
      static let popUpAddAppointmentOnHolidaySecond = Rswift.StringResource(key: "popUpAddAppointmentOnHolidaySecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure you want to send a reminder to all participants which has not reacted yet?
      ///
      /// Locales: Base, en
      static let sendReminderPopUpNotReactedFirstDescription = Rswift.StringResource(key: "sendReminderPopUpNotReactedFirstDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: are you sure you want to send a reminder to all participants?
      ///
      /// Locales: Base, en
      static let sendReminderPopUpFirstDescription = Rswift.StringResource(key: "sendReminderPopUpFirstDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: bought
      ///
      /// Locales: Base, en
      static let bought = Rswift.StringResource(key: "bought", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: bussiness
      ///
      /// Locales: Base, en
      static let forBusiness = Rswift.StringResource(key: "forBusiness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: buy this theme
      ///
      /// Locales: Base, en
      static let buyThemeButtonTitle = Rswift.StringResource(key: "buyThemeButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: cancel
      ///
      /// Locales: Base, en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: cancel invitation
      ///
      /// Locales: Base, en
      static let denyInvitation = Rswift.StringResource(key: "denyInvitation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: change password
      ///
      /// Locales: Base, en
      static let changePassword = Rswift.StringResource(key: "changePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: chat background
      ///
      /// Locales: Base, en
      static let chatBackground = Rswift.StringResource(key: "chatBackground", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: client is not allowed to issue the request
      ///
      /// Locales: Base, en
      static let clientNotAllowedMakePayment = Rswift.StringResource(key: "clientNotAllowedMakePayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: complementary for a business profile (optional)
      ///
      /// Locales: Base, en
      static let bussinesProfile = Rswift.StringResource(key: "bussinesProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: complementary for a business profile (optional)
      ///
      /// Locales: Base, en
      static let complementaryLabel = Rswift.StringResource(key: "complementaryLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: connected
      ///
      /// Locales: Base, en
      static let connectedSettings = Rswift.StringResource(key: "connectedSettings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: contacts
      ///
      /// Locales: Base, en
      static let contacts = Rswift.StringResource(key: "contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: couldn't connect to the network
      ///
      /// Locales: Base, en
      static let networkError = Rswift.StringResource(key: "networkError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: data
      ///
      /// Locales: Base, en
      static let data = Rswift.StringResource(key: "data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: date notation
      ///
      /// Locales: Base, en
      static let dateNotation = Rswift.StringResource(key: "dateNotation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: day
      ///
      /// Locales: Base, en
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: delete account
      ///
      /// Locales: Base, en
      static let deleteAccount = Rswift.StringResource(key: "deleteAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: do you want to add %@ to your calendar?
      ///
      /// Locales: Base, en
      static let invitationIncomingPopUpAddAppointmentSecond = Rswift.StringResource(key: "invitationIncomingPopUpAddAppointmentSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: do you want to add it to your agenda?
      ///
      /// Locales: Base, en
      static let newIncomingMOMPopUpInvitationSecond = Rswift.StringResource(key: "newIncomingMOMPopUpInvitationSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: do you want to add it?
      ///
      /// Locales: Base, en
      static let invitationPopUpOutgoingAddToCalendarSecond = Rswift.StringResource(key: "invitationPopUpOutgoingAddToCalendarSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: do you want to excuse yourself for                 %@
      ///
      /// Locales: Base, en
      static let newIncomingMOMPopUpExcuse = Rswift.StringResource(key: "newIncomingMOMPopUpExcuse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: do you want to log in now?
      ///
      /// Locales: Base, en
      static let invitationPopUpAddAppointmentLoginSecond = Rswift.StringResource(key: "invitationPopUpAddAppointmentLoginSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: done
      ///
      /// Locales: Base, en
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: edit account
      ///
      /// Locales: Base, en
      static let editAccount = Rswift.StringResource(key: "editAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: email
      ///
      /// Locales: Base, en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: enter your e-mail address below. You will receive an e-mail to change your password
      ///
      /// Locales: Base, en
      static let sendEmailDescription = Rswift.StringResource(key: "sendEmailDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: events
      ///
      /// Locales: Base, en
      static let events = Rswift.StringResource(key: "events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: facebook
      ///
      /// Locales: Base, en
      static let facebook = Rswift.StringResource(key: "facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: failed
      ///
      /// Locales: Base, en
      static let failed = Rswift.StringResource(key: "failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: fifth page
      ///
      /// Locales: Base, en
      static let tutorialDescription5 = Rswift.StringResource(key: "tutorialDescription5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: first page
      ///
      /// Locales: Base, en
      static let tutorialDescription1 = Rswift.StringResource(key: "tutorialDescription1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: for this theme                 you will need %@.                 you need ½@.                 do you want to buy credits?             
      ///
      /// Locales: Base, en
      static let buyThemePopUpNotEnoughCredit = Rswift.StringResource(key: "BuyThemePopUpNotEnoughCredit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: forgot password?
      ///
      /// Locales: Base, en
      static let forgotPassword = Rswift.StringResource(key: "forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: fourth page
      ///
      /// Locales: Base, en
      static let tutorialDescription4 = Rswift.StringResource(key: "tutorialDescription4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: fr
      ///
      /// Locales: Base, en
      static let fridayShort = Rswift.StringResource(key: "fridayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: function
      ///
      /// Locales: Base, en
      static let function = Rswift.StringResource(key: "function", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: general
      ///
      /// Locales: Base, en
      static let general = Rswift.StringResource(key: "general", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: google
      ///
      /// Locales: Base, en
      static let google = Rswift.StringResource(key: "google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: group
      ///
      /// Locales: Base, en
      static let group = Rswift.StringResource(key: "group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: group chat
      ///
      /// Locales: Base, en
      static let groupChat = Rswift.StringResource(key: "groupChat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: holidays
      ///
      /// Locales: Base, en
      static let holidays = Rswift.StringResource(key: "holidays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: i already have an account
      ///
      /// Locales: Base, en
      static let haveAccount = Rswift.StringResource(key: "haveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: i don't have an account yet
      ///
      /// Locales: Base, en
      static let dontHaveAccount = Rswift.StringResource(key: "dontHaveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: invitations
      ///
      /// Locales: Base, en
      static let invitations = Rswift.StringResource(key: "invitations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: legend
      ///
      /// Locales: Base
      static let legend = Rswift.StringResource(key: "legend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: legends
      ///
      /// Locales: Base, en
      static let legends = Rswift.StringResource(key: "legends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: linked with
      ///
      /// Locales: Base, en
      static let linkedWith = Rswift.StringResource(key: "linkedWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: login
      ///
      /// Locales: Base, en
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: logout
      ///
      /// Locales: Base, en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: meeting
      ///
      /// Locales: Base, en
      static let meeting = Rswift.StringResource(key: "meeting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: meetings
      ///
      /// Locales: Base, en
      static let meetings = Rswift.StringResource(key: "meetings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: memo
      ///
      /// Locales: Base, en
      static let memo = Rswift.StringResource(key: "memo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: memo to
      ///
      /// Locales: Base, en
      static let memoTo = Rswift.StringResource(key: "memoTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: memo to
      ///
      /// Locales: Base, en
      static let memoToHome = Rswift.StringResource(key: "memoToHome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: messages
      ///
      /// Locales: Base, en
      static let messages = Rswift.StringResource(key: "messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: minutes of meeting
      ///
      /// Locales: Base, en
      static let minOfMeeting = Rswift.StringResource(key: "minOfMeeting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: mo
      ///
      /// Locales: Base, en
      static let mondayShort = Rswift.StringResource(key: "mondayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: month
      ///
      /// Locales: Base, en
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: my themes
      ///
      /// Locales: Base, en
      static let myThemes = Rswift.StringResource(key: "myThemes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: name
      ///
      /// Locales: Base, en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: new message
      ///
      /// Locales: Base, en
      static let newMessage = Rswift.StringResource(key: "newMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: new password
      ///
      /// Locales: Base, en
      static let newPassword = Rswift.StringResource(key: "newPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: next
      ///
      /// Locales: Base, en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: no
      ///
      /// Locales: Base, en
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: not allowed to make the payment
      ///
      /// Locales: Base, en
      static let notAllowedMakePurchase = Rswift.StringResource(key: "notAllowedMakePurchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: not purchased
      ///
      /// Locales: Base, en
      static let productIsNotPurchased = Rswift.StringResource(key: "productIsNotPurchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: off
      ///
      /// Locales: Base, en
      static let off = Rswift.StringResource(key: "off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: old password
      ///
      /// Locales: Base, en
      static let oldPassword = Rswift.StringResource(key: "oldPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: on
      ///
      /// Locales: Base, en
      static let on = Rswift.StringResource(key: "on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: optional
      ///
      /// Locales: Base, en
      static let optional = Rswift.StringResource(key: "optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: other
      ///
      /// Locales: Base, en
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: outlook
      ///
      /// Locales: Base, en
      static let outlook = Rswift.StringResource(key: "outlook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: participant
      ///
      /// Locales: Base, en
      static let participant = Rswift.StringResource(key: "participant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: password
      ///
      /// Locales: Base, en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: planning
      ///
      /// Locales: Base, en
      static let planning = Rswift.StringResource(key: "planning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: postal code + residence
      ///
      /// Locales: Base, en
      static let postalCode = Rswift.StringResource(key: "postalCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: price
      ///
      /// Locales: Base, en
      static let price = Rswift.StringResource(key: "price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: private chat
      ///
      /// Locales: Base, en
      static let privateChat = Rswift.StringResource(key: "privateChat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: product is purchased
      ///
      /// Locales: Base, en
      static let productIsPurchased = Rswift.StringResource(key: "productIsPurchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: re enter password
      ///
      /// Locales: Base, en
      static let reNewPassword = Rswift.StringResource(key: "reNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: re enter password
      ///
      /// Locales: Base, en
      static let rePassword = Rswift.StringResource(key: "rePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: read
      ///
      /// Locales: Base, en
      static let isRead = Rswift.StringResource(key: "isRead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: register
      ///
      /// Locales: Base, en
      static let register = Rswift.StringResource(key: "register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: reject
      ///
      /// Locales: Base, en
      static let reject = Rswift.StringResource(key: "reject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: reminders
      ///
      /// Locales: Base, en
      static let reminders = Rswift.StringResource(key: "reminders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: sa
      ///
      /// Locales: Base, en
      static let saturdayShort = Rswift.StringResource(key: "saturdayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: save
      ///
      /// Locales: Base, en
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: save new password
      ///
      /// Locales: Base, en
      static let saveNewPassword = Rswift.StringResource(key: "saveNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: search
      ///
      /// Locales: Base, en
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: second page
      ///
      /// Locales: Base, en
      static let tutorialDescription2 = Rswift.StringResource(key: "tutorialDescription2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: select
      ///
      /// Locales: Base, en
      static let select = Rswift.StringResource(key: "select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: select date notation
      ///
      /// Locales: Base, en
      static let selectDateNotation = Rswift.StringResource(key: "selectDateNotation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: selected
      ///
      /// Locales: Base, en
      static let selected = Rswift.StringResource(key: "selected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: send
      ///
      /// Locales: Base, en
      static let send = Rswift.StringResource(key: "send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: send notification to the person whom not reacted yet
      ///
      /// Locales: Base, en
      static let notReactedNotification = Rswift.StringResource(key: "notReactedNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: send reminder of the appointment to participants
      ///
      /// Locales: Base, en
      static let reminderNotification = Rswift.StringResource(key: "reminderNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: send your availability
      ///
      /// Locales: Base, en
      static let giveAvailability = Rswift.StringResource(key: "giveAvailability", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: settings
      ///
      /// Locales: Base, en
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: skip
      ///
      /// Locales: Base, en
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: standart
      ///
      /// Locales: Base, en
      static let standart = Rswift.StringResource(key: "standart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: su
      ///
      /// Locales: Base, en
      static let sundayShort = Rswift.StringResource(key: "sundayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: subject
      ///
      /// Locales: Base, en
      static let subject = Rswift.StringResource(key: "subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: suggest
      ///
      /// Locales: Base, en
      static let suggest = Rswift.StringResource(key: "suggest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: suggest  new date
      ///
      /// Locales: Base, en
      static let suggestDateInvitation = Rswift.StringResource(key: "suggestDateInvitation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: surname
      ///
      /// Locales: Base, en
      static let surname = Rswift.StringResource(key: "surname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: synchronise
      ///
      /// Locales: Base, en
      static let synchronise = Rswift.StringResource(key: "synchronise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: th
      ///
      /// Locales: Base, en
      static let thursdayShort = Rswift.StringResource(key: "thursdayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: the confirmed date of this group %@ isn't in your agenda.
      ///
      /// Locales: Base, en
      static let invitationPopUpOutgoingAddToCalendarFirst = Rswift.StringResource(key: "invitationPopUpOutgoingAddToCalendarFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: the invitation will disapear from your overview.
      ///
      /// Locales: Base, en
      static let invitationIncomingPopUpCancelAppointmentSecond = Rswift.StringResource(key: "invitationIncomingPopUpCancelAppointmentSecond", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: there is a date pinned at:                 %@ between %@ - %@
      ///
      /// Locales: Base, en
      static let invitationIncomingPopUpAddAppointmentFirst = Rswift.StringResource(key: "invitationIncomingPopUpAddAppointmentFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: there is a date suggestion from %@ in %@ at:                 %@ between %@
      ///
      /// Locales: Base, en
      static let invitationOutgoingPopUpDateSuggestionFirst = Rswift.StringResource(key: "invitationOutgoingPopUpDateSuggestionFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: there is a new date suggestion from %@ at:                 %@                 between %@
      ///
      /// Locales: Base, en
      static let memoToPopUpDateSuggestionFirst = Rswift.StringResource(key: "memoToPopUpDateSuggestionFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: third page
      ///
      /// Locales: Base, en
      static let tutorialDescription3 = Rswift.StringResource(key: "tutorialDescription3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: time format
      ///
      /// Locales: Base, en
      static let timeFormat = Rswift.StringResource(key: "timeFormat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: timeline
      ///
      /// Locales: Base, en
      static let timeline = Rswift.StringResource(key: "timeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: timeline status
      ///
      /// Locales: Base, en
      static let timelineStatus = Rswift.StringResource(key: "timelineStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: timeline type
      ///
      /// Locales: Base, en
      static let timelineType = Rswift.StringResource(key: "timelineType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: tu
      ///
      /// Locales: Base, en
      static let tuesdayShort = Rswift.StringResource(key: "tuesdayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: tutorial
      ///
      /// Locales: Base, en
      static let tutorial = Rswift.StringResource(key: "tutorial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: unread
      ///
      /// Locales: Base, en
      static let unRead = Rswift.StringResource(key: "unRead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: upgrades
      ///
      /// Locales: Base, en
      static let upgrades = Rswift.StringResource(key: "upgrades", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: use this theme
      ///
      /// Locales: Base, en
      static let useThemeButtonTitle = Rswift.StringResource(key: "useThemeButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: we
      ///
      /// Locales: Base, en
      static let wednesdayShort = Rswift.StringResource(key: "wednesdayShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: week
      ///
      /// Locales: Base, en
      static let week = Rswift.StringResource(key: "week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: yahoo
      ///
      /// Locales: Base
      static let yahoo = Rswift.StringResource(key: "yahoo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: year
      ///
      /// Locales: Base, en
      static let year = Rswift.StringResource(key: "year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: yes
      ///
      /// Locales: Base, en
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: you confirmed an invitation on %@ group at %@, between %@ %@
      ///
      /// Locales: Base, en
      static let invitationPopUpDateConfirmedFirst = Rswift.StringResource(key: "invitationPopUpDateConfirmedFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)

      /// Base translation: 
      ///
      /// Locales: Base, en
      static func availability(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("availability", bundle: hostingBundle, value: "", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "availability"
        }

        return NSLocalizedString("availability", bundle: bundle, value: "", comment: "")
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func attachments(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("attachments", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "attachments"
        }

        let format = NSLocalizedString("attachments", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func credit(val value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("credit", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "credit"
        }

        let format = NSLocalizedString("credit", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func isAvailable(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("isAvailable", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "isAvailable"
        }

        let format = NSLocalizedString("isAvailable", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func moreAreTyping(val value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("moreAreTyping", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "moreAreTyping"
        }

        let format = NSLocalizedString("moreAreTyping", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func myCredits(val value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("myCredits", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myCredits"
        }

        let format = NSLocalizedString("myCredits", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func peopleInvited(val value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("peopleInvited", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "peopleInvited"
        }

        let format = NSLocalizedString("peopleInvited", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %#@val@
      ///
      /// Locales: Base, en
      static func totalPersonCount(val value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("totalPersonCount", bundle: hostingBundle, value: "%#@val@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "totalPersonCount"
        }

        let format = NSLocalizedString("totalPersonCount", bundle: bundle, value: "%#@val@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %@ gave a comment on the chat: %@.
      ///
      /// Locales: Base, en
      static func eventDetailTypeThree(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("eventDetailTypeThree", bundle: hostingBundle, value: "%@ gave a comment on the chat: %@.", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventDetailTypeThree"
        }

        let format = NSLocalizedString("eventDetailTypeThree", bundle: bundle, value: "%@ gave a comment on the chat: %@.", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: %@ has added a to do list item in %@.
      ///
      /// Locales: Base, en
      static func eventDetailTypeTwo(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("eventDetailTypeTwo", bundle: hostingBundle, value: "%@ has added a to do list item in %@.", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventDetailTypeTwo"
        }

        let format = NSLocalizedString("eventDetailTypeTwo", bundle: bundle, value: "%@ has added a to do list item in %@.", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: %@ has pinned a date for %@.
      ///
      /// Locales: Base, en
      static func eventDetailTypeFour(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("eventDetailTypeFour", bundle: hostingBundle, value: "%@ has pinned a date for %@.", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventDetailTypeFour"
        }

        let format = NSLocalizedString("eventDetailTypeFour", bundle: bundle, value: "%@ has pinned a date for %@.", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: %@ is typing...
      ///
      /// Locales: Base, en
      static func isTyping(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("isTyping", bundle: hostingBundle, value: "%@ is typing...", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "isTyping"
        }

        let format = NSLocalizedString("isTyping", bundle: bundle, value: "%@ is typing...", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %@ suggests a new date in %@.
      ///
      /// Locales: Base, en
      static func eventDetailTypeOne(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("eventDetailTypeOne", bundle: hostingBundle, value: "%@ suggests a new date in %@.", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventDetailTypeOne"
        }

        let format = NSLocalizedString("eventDetailTypeOne", bundle: bundle, value: "%@ suggests a new date in %@.", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: %@ wants to add you to M.O.M                 %@.
      ///
      /// Locales: Base, en
      static func newIncomingMOMPopUpInvitationFirst(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("newIncomingMOMPopUpInvitationFirst", bundle: hostingBundle, value: "%@ wants to add you to M.O.M\n                %@.", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newIncomingMOMPopUpInvitationFirst"
        }

        let format = NSLocalizedString("newIncomingMOMPopUpInvitationFirst", bundle: bundle, value: "%@ wants to add you to M.O.M\n                %@.", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: APP!POiNTMENT
      ///
      /// Locales: Base, en
      static func appTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appTitle", bundle: hostingBundle, value: "APP!POiNTMENT", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appTitle"
        }

        return NSLocalizedString("appTitle", bundle: bundle, value: "APP!POiNTMENT", comment: "")
      }

      /// Base translation: Access to cloud service information is not allowed
      ///
      /// Locales: Base, en
      static func cloudServiceinformationNotAllowed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloudServiceinformationNotAllowed", bundle: hostingBundle, value: "Access to cloud service information is not allowed", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloudServiceinformationNotAllowed"
        }

        return NSLocalizedString("cloudServiceinformationNotAllowed", bundle: bundle, value: "Access to cloud service information is not allowed", comment: "")
      }

      /// Base translation: Add this date to available data in the group?
      ///
      /// Locales: Base, en
      static func memoToPopUpDateSuggestionSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("memoToPopUpDateSuggestionSecond", bundle: hostingBundle, value: "Add this date to available data in the group?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "memoToPopUpDateSuggestionSecond"
        }

        return NSLocalizedString("memoToPopUpDateSuggestionSecond", bundle: bundle, value: "Add this date to available data in the group?", comment: "")
      }

      /// Base translation: All purchases have been restored
      ///
      /// Locales: Base, en
      static func allPurchasesRestored(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allPurchasesRestored", bundle: hostingBundle, value: "All purchases have been restored", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allPurchasesRestored"
        }

        return NSLocalizedString("allPurchasesRestored", bundle: bundle, value: "All purchases have been restored", comment: "")
      }

      /// Base translation: Are you sure that you want to cancel the appointment %@?
      ///
      /// Locales: Base, en
      static func cancelAppointmentPopUpFirst(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("cancelAppointmentPopUpFirst", bundle: hostingBundle, value: "Are you sure that you want to cancel the appointment %@?", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelAppointmentPopUpFirst"
        }

        let format = NSLocalizedString("cancelAppointmentPopUpFirst", bundle: bundle, value: "Are you sure that you want to cancel the appointment %@?", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Are you sure you no longer want to participate in                 %@
      ///
      /// Locales: Base, en
      static func newIncomingMOMPopUpLeave(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("newIncomingMOMPopUpLeave", bundle: hostingBundle, value: "Are you sure you no longer want to participate in\n                %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newIncomingMOMPopUpLeave"
        }

        let format = NSLocalizedString("newIncomingMOMPopUpLeave", bundle: bundle, value: "Are you sure you no longer want to participate in\n                %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Are you sure you want to cancel this appointment ? The invitation will not appear in your overview.
      ///
      /// Locales: Base, en
      static func cancelAppointment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelAppointment", bundle: hostingBundle, value: "Are you sure you want to cancel this appointment ? The invitation will not appear in your overview.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelAppointment"
        }

        return NSLocalizedString("cancelAppointment", bundle: bundle, value: "Are you sure you want to cancel this appointment ? The invitation will not appear in your overview.", comment: "")
      }

      /// Base translation: Available
      ///
      /// Locales: Base, en
      static func availableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("availableTitle", bundle: hostingBundle, value: "Available", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "availableTitle"
        }

        return NSLocalizedString("availableTitle", bundle: bundle, value: "Available", comment: "")
      }

      /// Base translation: Buy Credits
      ///
      /// Locales: Base, en
      static func buyCredits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buyCredits", bundle: hostingBundle, value: "Buy Credits", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buyCredits"
        }

        return NSLocalizedString("buyCredits", bundle: bundle, value: "Buy Credits", comment: "")
      }

      /// Base translation: Buy Themes
      ///
      /// Locales: Base, en
      static func buyTheme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buyTheme", bundle: hostingBundle, value: "Buy Themes", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buyTheme"
        }

        return NSLocalizedString("buyTheme", bundle: bundle, value: "Buy Themes", comment: "")
      }

      /// Base translation: Cancel
      ///
      /// Locales: Base, en
      static func cancelButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelButton", bundle: hostingBundle, value: "Cancel", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelButton"
        }

        return NSLocalizedString("cancelButton", bundle: bundle, value: "Cancel", comment: "")
      }

      /// Base translation: Cloud Service Revoked
      ///
      /// Locales: Base, en
      static func cloudServiceRevoked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloudServiceRevoked", bundle: hostingBundle, value: "Cloud Service Revoked", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloudServiceRevoked"
        }

        return NSLocalizedString("cloudServiceRevoked", bundle: bundle, value: "Cloud Service Revoked", comment: "")
      }

      /// Base translation: Confirm Password
      ///
      /// Locales: Base, en
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPassword", bundle: hostingBundle, value: "Confirm Password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPassword"
        }

        return NSLocalizedString("confirmPassword", bundle: bundle, value: "Confirm Password", comment: "")
      }

      /// Base translation: Could not retrieve product info
      ///
      /// Locales: Base, en
      static func couldNotRetrieveProductInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("couldNotRetrieveProductInfo", bundle: hostingBundle, value: "Could not retrieve product info", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "couldNotRetrieveProductInfo"
        }

        return NSLocalizedString("couldNotRetrieveProductInfo", bundle: bundle, value: "Could not retrieve product info", comment: "")
      }

      /// Base translation: Dates
      ///
      /// Locales: Base, en
      static func dates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dates", bundle: hostingBundle, value: "Dates", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dates"
        }

        return NSLocalizedString("dates", bundle: bundle, value: "Dates", comment: "")
      }

      /// Base translation: Do you want to log in now?
      ///
      /// Locales: Base, en
      static func newAppointmentNotLoggedInSecondDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newAppointmentNotLoggedInSecondDescription", bundle: hostingBundle, value: "Do you want to log in now?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newAppointmentNotLoggedInSecondDescription"
        }

        return NSLocalizedString("newAppointmentNotLoggedInSecondDescription", bundle: bundle, value: "Do you want to log in now?", comment: "")
      }

      /// Base translation: Don't add
      ///
      /// Locales: Base, en
      static func dontAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dontAdd", bundle: hostingBundle, value: "Don't add", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dontAdd"
        }

        return NSLocalizedString("dontAdd", bundle: bundle, value: "Don't add", comment: "")
      }

      /// Base translation: Download Meeting
      ///
      /// Locales: Base, en
      static func popUpDownloadMemo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("popUpDownloadMemo", bundle: hostingBundle, value: "Download Meeting", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "popUpDownloadMemo"
        }

        return NSLocalizedString("popUpDownloadMemo", bundle: bundle, value: "Download Meeting", comment: "")
      }

      /// Base translation: Edit invitation
      ///
      /// Locales: Base, en
      static func editInvitation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editInvitation", bundle: hostingBundle, value: "Edit invitation", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editInvitation"
        }

        return NSLocalizedString("editInvitation", bundle: bundle, value: "Edit invitation", comment: "")
      }

      /// Base translation: Email address and password don't match.
      ///
      /// Locales: Base, en
      static func emailAndPasswordDontMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAndPasswordDontMatch", bundle: hostingBundle, value: "Email address and password don't match.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailAndPasswordDontMatch"
        }

        return NSLocalizedString("emailAndPasswordDontMatch", bundle: bundle, value: "Email address and password don't match.", comment: "")
      }

      /// Base translation: Email address is already taken.
      ///
      /// Locales: Base, en
      static func emailAddressIsAlreadyTaken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAddressIsAlreadyTaken", bundle: hostingBundle, value: "Email address is already taken.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailAddressIsAlreadyTaken"
        }

        return NSLocalizedString("emailAddressIsAlreadyTaken", bundle: bundle, value: "Email address is already taken.", comment: "")
      }

      /// Base translation: Email address is not valid.
      ///
      /// Locales: Base, en
      static func emailNotValid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailNotValid", bundle: hostingBundle, value: "Email address is not valid.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailNotValid"
        }

        return NSLocalizedString("emailNotValid", bundle: bundle, value: "Email address is not valid.", comment: "")
      }

      /// Base translation: Email and / or password incorrect
      ///
      /// Locales: Base, en
      static func wrongCredentials(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrongCredentials", bundle: hostingBundle, value: "Email and / or password incorrect", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrongCredentials"
        }

        return NSLocalizedString("wrongCredentials", bundle: bundle, value: "Email and / or password incorrect", comment: "")
      }

      /// Base translation: Event starts after its end
      ///
      /// Locales: Base, en
      static func timeConflictTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeConflictTitle", bundle: hostingBundle, value: "Event starts after its end", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeConflictTitle"
        }

        return NSLocalizedString("timeConflictTitle", bundle: bundle, value: "Event starts after its end", comment: "")
      }

      /// Base translation: First Name
      ///
      /// Locales: Base, en
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstName", bundle: hostingBundle, value: "First Name", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstName"
        }

        return NSLocalizedString("firstName", bundle: bundle, value: "First Name", comment: "")
      }

      /// Base translation: In order to register, you must agree to the Terms.
      ///
      /// Locales: Base, en
      static func mustAcceptTermsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mustAcceptTermsAndConditions", bundle: hostingBundle, value: "In order to register, you must agree to the Terms.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mustAcceptTermsAndConditions"
        }

        return NSLocalizedString("mustAcceptTermsAndConditions", bundle: bundle, value: "In order to register, you must agree to the Terms.", comment: "")
      }

      /// Base translation: Incoming
      ///
      /// Locales: Base, en
      static func incoming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incoming", bundle: hostingBundle, value: "Incoming", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "incoming"
        }

        return NSLocalizedString("incoming", bundle: bundle, value: "Incoming", comment: "")
      }

      /// Base translation: Invalid Product identifier:
      ///
      /// Locales: Base, en
      static func invalidProductIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidProductIdentifier", bundle: hostingBundle, value: "Invalid Product identifier:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalidProductIdentifier"
        }

        return NSLocalizedString("invalidProductIdentifier", bundle: bundle, value: "Invalid Product identifier:", comment: "")
      }

      /// Base translation: Invitations - outgoing
      ///
      /// Locales: Base, en
      static func outgoing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("outgoing", bundle: hostingBundle, value: "Invitations - outgoing", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "outgoing"
        }

        return NSLocalizedString("outgoing", bundle: bundle, value: "Invitations - outgoing", comment: "")
      }

      /// Base translation: KvK number
      ///
      /// Locales: Base, en
      static func kvkNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kvkNumber", bundle: hostingBundle, value: "KvK number", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kvkNumber"
        }

        return NSLocalizedString("kvkNumber", bundle: bundle, value: "KvK number", comment: "")
      }

      /// Base translation: Last Name
      ///
      /// Locales: Base, en
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastName", bundle: hostingBundle, value: "Last Name", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lastName"
        }

        return NSLocalizedString("lastName", bundle: bundle, value: "Last Name", comment: "")
      }

      /// Base translation: Last activitiy on
      ///
      /// Locales: Base, en
      static func lastAccessed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastAccessed", bundle: hostingBundle, value: "Last activitiy on", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lastAccessed"
        }

        return NSLocalizedString("lastAccessed", bundle: bundle, value: "Last activitiy on", comment: "")
      }

      /// Base translation: Maybe
      ///
      /// Locales: Base, en
      static func maybeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maybeTitle", bundle: hostingBundle, value: "Maybe", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "maybeTitle"
        }

        return NSLocalizedString("maybeTitle", bundle: bundle, value: "Maybe", comment: "")
      }

      /// Base translation: Network error while verifying receipt:
      ///
      /// Locales: Base, en
      static func networkErrorWhileVerifyingReceipt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("networkErrorWhileVerifyingReceipt", bundle: hostingBundle, value: "Network error while verifying receipt:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "networkErrorWhileVerifyingReceipt"
        }

        return NSLocalizedString("networkErrorWhileVerifyingReceipt", bundle: bundle, value: "Network error while verifying receipt:", comment: "")
      }

      /// Base translation: New Proposal
      ///
      /// Locales: Base, en
      static func newProposal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newProposal", bundle: hostingBundle, value: "New Proposal", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newProposal"
        }

        return NSLocalizedString("newProposal", bundle: bundle, value: "New Proposal", comment: "")
      }

      /// Base translation: No previous purchases were found
      ///
      /// Locales: Base, en
      static func noPreviousPurchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noPreviousPurchase", bundle: hostingBundle, value: "No previous purchases were found", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noPreviousPurchase"
        }

        return NSLocalizedString("noPreviousPurchase", bundle: bundle, value: "No previous purchases were found", comment: "")
      }

      /// Base translation: No receipt data. Try again.
      ///
      /// Locales: Base, en
      static func noReceiptData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noReceiptData", bundle: hostingBundle, value: "No receipt data. Try again.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noReceiptData"
        }

        return NSLocalizedString("noReceiptData", bundle: bundle, value: "No receipt data. Try again.", comment: "")
      }

      /// Base translation: Nothing to restore
      ///
      /// Locales: Base, en
      static func nothingToRestore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nothingToRestore", bundle: hostingBundle, value: "Nothing to restore", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nothingToRestore"
        }

        return NSLocalizedString("nothingToRestore", bundle: bundle, value: "Nothing to restore", comment: "")
      }

      /// Base translation: OK
      ///
      /// Locales: Base, en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, value: "OK", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, value: "OK", comment: "")
      }

      /// Base translation: Open new chat
      ///
      /// Locales: Base, en
      static func openNewChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("openNewChat", bundle: hostingBundle, value: "Open new chat", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "openNewChat"
        }

        return NSLocalizedString("openNewChat", bundle: bundle, value: "Open new chat", comment: "")
      }

      /// Base translation: Password should contain at least 8 characters
      ///
      /// Locales: Base, en
      static func passwordTooShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordTooShort", bundle: hostingBundle, value: "Password should contain at least 8 characters", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordTooShort"
        }

        return NSLocalizedString("passwordTooShort", bundle: bundle, value: "Password should contain at least 8 characters", comment: "")
      }

      /// Base translation: Password should contain at least one digit
      ///
      /// Locales: Base, en
      static func passwordMustContainOneDigit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordMustContainOneDigit", bundle: hostingBundle, value: "Password should contain at least one digit", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordMustContainOneDigit"
        }

        return NSLocalizedString("passwordMustContainOneDigit", bundle: bundle, value: "Password should contain at least one digit", comment: "")
      }

      /// Base translation: Password should contain at least one lowercase character
      ///
      /// Locales: Base, en
      static func passwordMustContainOneLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordMustContainOneLowercase", bundle: hostingBundle, value: "Password should contain at least one lowercase character", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordMustContainOneLowercase"
        }

        return NSLocalizedString("passwordMustContainOneLowercase", bundle: bundle, value: "Password should contain at least one lowercase character", comment: "")
      }

      /// Base translation: Password should contain at least one uppercase character
      ///
      /// Locales: Base, en
      static func passwordMustContainOneUppercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordMustContainOneUppercase", bundle: hostingBundle, value: "Password should contain at least one uppercase character", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordMustContainOneUppercase"
        }

        return NSLocalizedString("passwordMustContainOneUppercase", bundle: bundle, value: "Password should contain at least one uppercase character", comment: "")
      }

      /// Base translation: Passwords don't match
      ///
      /// Locales: Base, en
      static func passwordDontMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordDontMatch", bundle: hostingBundle, value: "Passwords don't match", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordDontMatch"
        }

        return NSLocalizedString("passwordDontMatch", bundle: bundle, value: "Passwords don't match", comment: "")
      }

      /// Base translation: Please confirm password.
      ///
      /// Locales: Base, en
      static func emptyRePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyRePassword", bundle: hostingBundle, value: "Please confirm password.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyRePassword"
        }

        return NSLocalizedString("emptyRePassword", bundle: bundle, value: "Please confirm password.", comment: "")
      }

      /// Base translation: Please fill in address.
      ///
      /// Locales: Base, en
      static func emptyAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyAddress", bundle: hostingBundle, value: "Please fill in address.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyAddress"
        }

        return NSLocalizedString("emptyAddress", bundle: bundle, value: "Please fill in address.", comment: "")
      }

      /// Base translation: Please fill in email and password.
      ///
      /// Locales: Base, en
      static func emptyFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFields", bundle: hostingBundle, value: "Please fill in email and password.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyFields"
        }

        return NSLocalizedString("emptyFields", bundle: bundle, value: "Please fill in email and password.", comment: "")
      }

      /// Base translation: Please fill in email.
      ///
      /// Locales: Base, en
      static func emptyEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyEmail", bundle: hostingBundle, value: "Please fill in email.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyEmail"
        }

        return NSLocalizedString("emptyEmail", bundle: bundle, value: "Please fill in email.", comment: "")
      }

      /// Base translation: Please fill in function.
      ///
      /// Locales: Base, en
      static func emptyFunction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFunction", bundle: hostingBundle, value: "Please fill in function.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyFunction"
        }

        return NSLocalizedString("emptyFunction", bundle: bundle, value: "Please fill in function.", comment: "")
      }

      /// Base translation: Please fill in kvk number.
      ///
      /// Locales: Base, en
      static func kvkEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kvkEmpty", bundle: hostingBundle, value: "Please fill in kvk number.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kvkEmpty"
        }

        return NSLocalizedString("kvkEmpty", bundle: bundle, value: "Please fill in kvk number.", comment: "")
      }

      /// Base translation: Please fill in name.
      ///
      /// Locales: Base, en
      static func emptyName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyName", bundle: hostingBundle, value: "Please fill in name.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyName"
        }

        return NSLocalizedString("emptyName", bundle: bundle, value: "Please fill in name.", comment: "")
      }

      /// Base translation: Please fill in postal code.
      ///
      /// Locales: Base, en
      static func emptyPostal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyPostal", bundle: hostingBundle, value: "Please fill in postal code.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyPostal"
        }

        return NSLocalizedString("emptyPostal", bundle: bundle, value: "Please fill in postal code.", comment: "")
      }

      /// Base translation: Please fill in surname.
      ///
      /// Locales: Base, en
      static func emptySurname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptySurname", bundle: hostingBundle, value: "Please fill in surname.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptySurname"
        }

        return NSLocalizedString("emptySurname", bundle: bundle, value: "Please fill in surname.", comment: "")
      }

      /// Base translation: Please fill in username.
      ///
      /// Locales: Base, en
      static func emptyUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyUsername", bundle: hostingBundle, value: "Please fill in username.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyUsername"
        }

        return NSLocalizedString("emptyUsername", bundle: bundle, value: "Please fill in username.", comment: "")
      }

      /// Base translation: Please fill in your password.
      ///
      /// Locales: Base, en
      static func emptyPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyPassword", bundle: hostingBundle, value: "Please fill in your password.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyPassword"
        }

        return NSLocalizedString("emptyPassword", bundle: bundle, value: "Please fill in your password.", comment: "")
      }

      /// Base translation: Please specify both start and end time for the appointment.
      ///
      /// Locales: Base, en
      static func timeMissingDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeMissingDescription", bundle: hostingBundle, value: "Please specify both start and end time for the appointment.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeMissingDescription"
        }

        return NSLocalizedString("timeMissingDescription", bundle: bundle, value: "Please specify both start and end time for the appointment.", comment: "")
      }

      /// Base translation: Private Conversation
      ///
      /// Locales: Base, en
      static func privateConversation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privateConversation", bundle: hostingBundle, value: "Private Conversation", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privateConversation"
        }

        return NSLocalizedString("privateConversation", bundle: bundle, value: "Private Conversation", comment: "")
      }

      /// Base translation: Product is not available in the current storefront
      ///
      /// Locales: Base, en
      static func productNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("productNotAvailable", bundle: hostingBundle, value: "Product is not available in the current storefront", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "productNotAvailable"
        }

        return NSLocalizedString("productNotAvailable", bundle: bundle, value: "Product is not available in the current storefront", comment: "")
      }

      /// Base translation: Product will not expire
      ///
      /// Locales: Base, en
      static func productWillNotExpire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("productWillNotExpire", bundle: hostingBundle, value: "Product will not expire", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "productWillNotExpire"
        }

        return NSLocalizedString("productWillNotExpire", bundle: bundle, value: "Product will not expire", comment: "")
      }

      /// Base translation: Purchase Failed:
      ///
      /// Locales: Base, en
      static func purchaseFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseFailed", bundle: hostingBundle, value: "Purchase Failed:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseFailed"
        }

        return NSLocalizedString("purchaseFailed", bundle: bundle, value: "Purchase Failed:", comment: "")
      }

      /// Base translation: Purchase Success:
      ///
      /// Locales: Base, en
      static func purchaseSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseSuccess", bundle: hostingBundle, value: "Purchase Success:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseSuccess"
        }

        return NSLocalizedString("purchaseSuccess", bundle: bundle, value: "Purchase Success:", comment: "")
      }

      /// Base translation: Purchases Restored
      ///
      /// Locales: Base, en
      static func purchaseRestored(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseRestored", bundle: hostingBundle, value: "Purchases Restored", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseRestored"
        }

        return NSLocalizedString("purchaseRestored", bundle: bundle, value: "Purchases Restored", comment: "")
      }

      /// Base translation: Receipt verification
      ///
      /// Locales: Base, en
      static func receiptverification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiptverification", bundle: hostingBundle, value: "Receipt verification", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receiptverification"
        }

        return NSLocalizedString("receiptverification", bundle: bundle, value: "Receipt verification", comment: "")
      }

      /// Base translation: Receipt verification failed:
      ///
      /// Locales: Base, en
      static func receiptVerificationFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiptVerificationFailed", bundle: hostingBundle, value: "Receipt verification failed:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receiptVerificationFailed"
        }

        return NSLocalizedString("receiptVerificationFailed", bundle: bundle, value: "Receipt verification failed:", comment: "")
      }

      /// Base translation: Receipt verified
      ///
      /// Locales: Base, en
      static func recieptVerified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recieptVerified", bundle: hostingBundle, value: "Receipt verified", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recieptVerified"
        }

        return NSLocalizedString("recieptVerified", bundle: bundle, value: "Receipt verified", comment: "")
      }

      /// Base translation: Receipt verified remotely
      ///
      /// Locales: Base, en
      static func receiptVerifiedRemotely(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiptVerifiedRemotely", bundle: hostingBundle, value: "Receipt verified remotely", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receiptVerifiedRemotely"
        }

        return NSLocalizedString("receiptVerifiedRemotely", bundle: bundle, value: "Receipt verified remotely", comment: "")
      }

      /// Base translation: Reject
      ///
      /// Locales: Base, en
      static func rejectButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rejectButton", bundle: hostingBundle, value: "Reject", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rejectButton"
        }

        return NSLocalizedString("rejectButton", bundle: bundle, value: "Reject", comment: "")
      }

      /// Base translation: Restore Failed
      ///
      /// Locales: Base, en
      static func restoreFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("restoreFailed", bundle: hostingBundle, value: "Restore Failed", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "restoreFailed"
        }

        return NSLocalizedString("restoreFailed", bundle: bundle, value: "Restore Failed", comment: "")
      }

      /// Base translation: Selected date
      ///
      /// Locales: Base, en
      static func selectedDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectedDate", bundle: hostingBundle, value: "Selected date", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "selectedDate"
        }

        return NSLocalizedString("selectedDate", bundle: bundle, value: "Selected date", comment: "")
      }

      /// Base translation: Something went wrong while synching database!
      ///
      /// Locales: Base, en
      static func databaseSyncError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("databaseSyncError", bundle: hostingBundle, value: "Something went wrong while synching database!", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "databaseSyncError"
        }

        return NSLocalizedString("databaseSyncError", bundle: bundle, value: "Something went wrong while synching database!", comment: "")
      }

      /// Base translation: The appointment would be removed from your list
      ///
      /// Locales: Base, en
      static func cancelAppointmentPopUpSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelAppointmentPopUpSecond", bundle: hostingBundle, value: "The appointment would be removed from your list", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelAppointmentPopUpSecond"
        }

        return NSLocalizedString("cancelAppointmentPopUpSecond", bundle: bundle, value: "The appointment would be removed from your list", comment: "")
      }

      /// Base translation: The email you provided is not registered
      ///
      /// Locales: Base, en
      static func emailNotRegistered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailNotRegistered", bundle: hostingBundle, value: "The email you provided is not registered", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailNotRegistered"
        }

        return NSLocalizedString("emailNotRegistered", bundle: bundle, value: "The email you provided is not registered", comment: "")
      }

      /// Base translation: The other group members receive a message about this in the app.
      ///
      /// Locales: Base, en
      static func invitationPopUpDateConfirmedSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationPopUpDateConfirmedSecond", bundle: hostingBundle, value: "The other group members receive a message about this in the app.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpDateConfirmedSecond"
        }

        return NSLocalizedString("invitationPopUpDateConfirmedSecond", bundle: bundle, value: "The other group members receive a message about this in the app.", comment: "")
      }

      /// Base translation: The participants then receive one                     message on their phone.
      ///
      /// Locales: Base, en
      static func meetingPopUpSendReminderSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meetingPopUpSendReminderSecond", bundle: hostingBundle, value: "The participants then receive one\n                    message on their phone.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meetingPopUpSendReminderSecond"
        }

        return NSLocalizedString("meetingPopUpSendReminderSecond", bundle: bundle, value: "The participants then receive one\n                    message on their phone.", comment: "")
      }

      /// Base translation: The purchase identifier was invalid
      ///
      /// Locales: Base, en
      static func purchaseIdentifierInvalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseIdentifierInvalid", bundle: hostingBundle, value: "The purchase identifier was invalid", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseIdentifierInvalid"
        }

        return NSLocalizedString("purchaseIdentifierInvalid", bundle: bundle, value: "The purchase identifier was invalid", comment: "")
      }

      /// Base translation: The start time you selected is later than the end time. Please choose another time for either start or end.
      ///
      /// Locales: Base, en
      static func timeConflictDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeConflictDescription", bundle: hostingBundle, value: "The start time you selected is later than the end time. Please choose another time for either start or end.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeConflictDescription"
        }

        return NSLocalizedString("timeConflictDescription", bundle: bundle, value: "The start time you selected is later than the end time. Please choose another time for either start or end.", comment: "")
      }

      /// Base translation: The users will be notified
      ///
      /// Locales: Base, en
      static func sendReminderPopUpSecondDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendReminderPopUpSecondDescription", bundle: hostingBundle, value: "The users will be notified", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendReminderPopUpSecondDescription"
        }

        return NSLocalizedString("sendReminderPopUpSecondDescription", bundle: bundle, value: "The users will be notified", comment: "")
      }

      /// Base translation: This product has never been purchased
      ///
      /// Locales: Base, en
      static func productNeverPurchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("productNeverPurchased", bundle: hostingBundle, value: "This product has never been purchased", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "productNeverPurchased"
        }

        return NSLocalizedString("productNeverPurchased", bundle: bundle, value: "This product has never been purchased", comment: "")
      }

      /// Base translation: Time is not selected
      ///
      /// Locales: Base, en
      static func timeMissingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeMissingTitle", bundle: hostingBundle, value: "Time is not selected", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeMissingTitle"
        }

        return NSLocalizedString("timeMissingTitle", bundle: bundle, value: "Time is not selected", comment: "")
      }

      /// Base translation: To do list
      ///
      /// Locales: Base, en
      static func todoList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("todoList", bundle: hostingBundle, value: "To do list", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "todoList"
        }

        return NSLocalizedString("todoList", bundle: bundle, value: "To do list", comment: "")
      }

      /// Base translation: Unavailable
      ///
      /// Locales: Base, en
      static func unavailableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unavailableTitle", bundle: hostingBundle, value: "Unavailable", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unavailableTitle"
        }

        return NSLocalizedString("unavailableTitle", bundle: bundle, value: "Unavailable", comment: "")
      }

      /// Base translation: Unknown
      ///
      /// Locales: Base, en
      static func unknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknownTitle", bundle: hostingBundle, value: "Unknown", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknownTitle"
        }

        return NSLocalizedString("unknownTitle", bundle: bundle, value: "Unknown", comment: "")
      }

      /// Base translation: Unknown error. Please contact support
      ///
      /// Locales: Base
      static func unknownError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknownError", bundle: hostingBundle, value: "Unknown error. Please contact support", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknownError"
        }

        return NSLocalizedString("unknownError", bundle: bundle, value: "Unknown error. Please contact support", comment: "")
      }

      /// Base translation: Username can only contain letters and numbers.
      ///
      /// Locales: Base, en
      static func usernameCannotContainSymbols(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("usernameCannotContainSymbols", bundle: hostingBundle, value: "Username can only contain letters and numbers.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "usernameCannotContainSymbols"
        }

        return NSLocalizedString("usernameCannotContainSymbols", bundle: bundle, value: "Username can only contain letters and numbers.", comment: "")
      }

      /// Base translation: Username is too long.
      ///
      /// Locales: Base, en
      static func usernameTooLong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("usernameTooLong", bundle: hostingBundle, value: "Username is too long.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "usernameTooLong"
        }

        return NSLocalizedString("usernameTooLong", bundle: bundle, value: "Username is too long.", comment: "")
      }

      /// Base translation: Wrong email or password
      ///
      /// Locales: Base, en
      static func wrongCredentialsError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrongCredentialsError", bundle: hostingBundle, value: "Wrong email or password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrongCredentialsError"
        }

        return NSLocalizedString("wrongCredentialsError", bundle: bundle, value: "Wrong email or password", comment: "")
      }

      /// Base translation: You are not authenticated. Please login in!
      ///
      /// Locales: Base, en
      static func unauthenticatedUserError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unauthenticatedUserError", bundle: hostingBundle, value: "You are not authenticated. Please login in!", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unauthenticatedUserError"
        }

        return NSLocalizedString("unauthenticatedUserError", bundle: bundle, value: "You are not authenticated. Please login in!", comment: "")
      }

      /// Base translation: You must be logged in to make a new appointment.
      ///
      /// Locales: Base, en
      static func invitationPopUpAddAppointmentLoginFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationPopUpAddAppointmentLoginFirst", bundle: hostingBundle, value: "You must be logged in to make a new appointment.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpAddAppointmentLoginFirst"
        }

        return NSLocalizedString("invitationPopUpAddAppointmentLoginFirst", bundle: bundle, value: "You must be logged in to make a new appointment.", comment: "")
      }

      /// Base translation: You must be logged in to make a new appointment.
      ///
      /// Locales: Base, en
      static func newAppointmentNotLoggedInFirstDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newAppointmentNotLoggedInFirstDescription", bundle: hostingBundle, value: "You must be logged in to make a new appointment.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newAppointmentNotLoggedInFirstDescription"
        }

        return NSLocalizedString("newAppointmentNotLoggedInFirstDescription", bundle: bundle, value: "You must be logged in to make a new appointment.", comment: "")
      }

      /// Base translation: about App!Po!ntment
      ///
      /// Locales: Base, en
      static func aboutAppointment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutAppointment", bundle: hostingBundle, value: "about App!Po!ntment", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutAppointment"
        }

        return NSLocalizedString("aboutAppointment", bundle: bundle, value: "about App!Po!ntment", comment: "")
      }

      /// Base translation: absent
      ///
      /// Locales: Base, en
      static func absent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("absent", bundle: hostingBundle, value: "absent", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "absent"
        }

        return NSLocalizedString("absent", bundle: bundle, value: "absent", comment: "")
      }

      /// Base translation: account
      ///
      /// Locales: Base, en
      static func account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account", bundle: hostingBundle, value: "account", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account"
        }

        return NSLocalizedString("account", bundle: bundle, value: "account", comment: "")
      }

      /// Base translation: add
      ///
      /// Locales: Base, en
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add", bundle: hostingBundle, value: "add", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add"
        }

        return NSLocalizedString("add", bundle: bundle, value: "add", comment: "")
      }

      /// Base translation: add more data
      ///
      /// Locales: Base, en
      static func addMoreData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addMoreData", bundle: hostingBundle, value: "add more data", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addMoreData"
        }

        return NSLocalizedString("addMoreData", bundle: bundle, value: "add more data", comment: "")
      }

      /// Base translation: add participant
      ///
      /// Locales: Base, en
      static func addParticipant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addParticipant", bundle: hostingBundle, value: "add participant", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addParticipant"
        }

        return NSLocalizedString("addParticipant", bundle: bundle, value: "add participant", comment: "")
      }

      /// Base translation: add profile photo / logo company
      ///
      /// Locales: Base, en
      static func addProfilePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProfilePhoto", bundle: hostingBundle, value: "add profile photo / logo company", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProfilePhoto"
        }

        return NSLocalizedString("addProfilePhoto", bundle: bundle, value: "add profile photo / logo company", comment: "")
      }

      /// Base translation: add to calendar
      ///
      /// Locales: Base, en
      static func addToCalendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addToCalendar", bundle: hostingBundle, value: "add to calendar", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addToCalendar"
        }

        return NSLocalizedString("addToCalendar", bundle: bundle, value: "add to calendar", comment: "")
      }

      /// Base translation: added
      ///
      /// Locales: Base, en
      static func added(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("added", bundle: hostingBundle, value: "added", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "added"
        }

        return NSLocalizedString("added", bundle: bundle, value: "added", comment: "")
      }

      /// Base translation: additional for a business profile
      ///
      /// Locales: Base, en
      static func editProfileDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editProfileDescription", bundle: hostingBundle, value: "additional for a business profile", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editProfileDescription"
        }

        return NSLocalizedString("editProfileDescription", bundle: bundle, value: "additional for a business profile", comment: "")
      }

      /// Base translation: address
      ///
      /// Locales: Base, en
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", bundle: hostingBundle, value: "address", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", bundle: bundle, value: "address", comment: "")
      }

      /// Base translation: agenda
      ///
      /// Locales: Base, en
      static func agenda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agenda", bundle: hostingBundle, value: "agenda", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agenda"
        }

        return NSLocalizedString("agenda", bundle: bundle, value: "agenda", comment: "")
      }

      /// Base translation: appointment was planned on a holiday                 (%@)
      ///
      /// Locales: Base, en
      static func popUpAddAppointmentOnHolidayFirst(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("popUpAddAppointmentOnHolidayFirst", bundle: hostingBundle, value: "appointment was planned on a holiday\n                (%@)", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "popUpAddAppointmentOnHolidayFirst"
        }

        let format = NSLocalizedString("popUpAddAppointmentOnHolidayFirst", bundle: bundle, value: "appointment was planned on a holiday\n                (%@)", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: appointments
      ///
      /// Locales: Base, en
      static func appointments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appointments", bundle: hostingBundle, value: "appointments", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appointments"
        }

        return NSLocalizedString("appointments", bundle: bundle, value: "appointments", comment: "")
      }

      /// Base translation: are you sure that you want to buy this theme '%@' for %@ 
      ///
      /// Locales: Base, en
      static func buyThemePopUpNormal(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("BuyThemePopUpNormal", bundle: hostingBundle, value: "are you sure that you want to buy this theme '%@' for %@ ", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BuyThemePopUpNormal"
        }

        let format = NSLocalizedString("BuyThemePopUpNormal", bundle: bundle, value: "are you sure that you want to buy this theme '%@' for %@ ", comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Base translation: are you sure that you want to cancel the appointment?
      ///
      /// Locales: Base, en
      static func invitationIncomingPopUpCancelAppointmentFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationIncomingPopUpCancelAppointmentFirst", bundle: hostingBundle, value: "are you sure that you want to cancel the appointment?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationIncomingPopUpCancelAppointmentFirst"
        }

        return NSLocalizedString("invitationIncomingPopUpCancelAppointmentFirst", bundle: bundle, value: "are you sure that you want to cancel the appointment?", comment: "")
      }

      /// Base translation: are you sure that you want to delete                 %@
      ///
      /// Locales: Base, en
      static func deleteAccountPopUp(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("deleteAccountPopUp", bundle: hostingBundle, value: "are you sure that you want to delete\n                %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteAccountPopUp"
        }

        let format = NSLocalizedString("deleteAccountPopUp", bundle: bundle, value: "are you sure that you want to delete\n                %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure that you want to delete                 %@?
      ///
      /// Locales: Base, en
      static func popUpDeleteMemo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("popUpDeleteMemo", bundle: hostingBundle, value: "are you sure that you want to delete\n                %@?", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "popUpDeleteMemo"
        }

        let format = NSLocalizedString("popUpDeleteMemo", bundle: bundle, value: "are you sure that you want to delete\n                %@?", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure that you want to delete %@
      ///
      /// Locales: Base, en
      static func memoPopUpDelete(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("MEMOPopUpDelete", bundle: hostingBundle, value: "are you sure that you want to delete %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MEMOPopUpDelete"
        }

        let format = NSLocalizedString("MEMOPopUpDelete", bundle: bundle, value: "are you sure that you want to delete %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure that you want to logout from                 %@
      ///
      /// Locales: Base, en
      static func logoutAccountPopUp(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("logoutAccountPopUp", bundle: hostingBundle, value: "are you sure that you want to logout from\n                %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logoutAccountPopUp"
        }

        let format = NSLocalizedString("logoutAccountPopUp", bundle: bundle, value: "are you sure that you want to logout from\n                %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure that you want to select %@ ?
      ///
      /// Locales: Base, en
      static func todoListfirstDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("todoListfirstDescription", bundle: hostingBundle, value: "are you sure that you want to select %@ ?", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "todoListfirstDescription"
        }

        let format = NSLocalizedString("todoListfirstDescription", bundle: bundle, value: "are you sure that you want to select %@ ?", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure you have one                 want to send a reminder of                 all participants?
      ///
      /// Locales: Base, en
      static func meetingPopUpSendReminderFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meetingPopUpSendReminderFirst", bundle: hostingBundle, value: "are you sure you have one\n                want to send a reminder of\n                all participants?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meetingPopUpSendReminderFirst"
        }

        return NSLocalizedString("meetingPopUpSendReminderFirst", bundle: bundle, value: "are you sure you have one\n                want to send a reminder of\n                all participants?", comment: "")
      }

      /// Base translation: are you sure you want to delete memo to                 %@?
      ///
      /// Locales: Base, en
      static func popUpRemoveMemoTo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("popUpRemoveMemoTo", bundle: hostingBundle, value: "are you sure you want to delete memo to\n                %@?", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "popUpRemoveMemoTo"
        }

        let format = NSLocalizedString("popUpRemoveMemoTo", bundle: bundle, value: "are you sure you want to delete memo to\n                %@?", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: are you sure you want to plan it on this day?
      ///
      /// Locales: Base, en
      static func popUpAddAppointmentOnHolidaySecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("popUpAddAppointmentOnHolidaySecond", bundle: hostingBundle, value: "are you sure you want to plan it on this day?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "popUpAddAppointmentOnHolidaySecond"
        }

        return NSLocalizedString("popUpAddAppointmentOnHolidaySecond", bundle: bundle, value: "are you sure you want to plan it on this day?", comment: "")
      }

      /// Base translation: are you sure you want to send a reminder to all participants which has not reacted yet?
      ///
      /// Locales: Base, en
      static func sendReminderPopUpNotReactedFirstDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendReminderPopUpNotReactedFirstDescription", bundle: hostingBundle, value: "are you sure you want to send a reminder to all participants which has not reacted yet?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendReminderPopUpNotReactedFirstDescription"
        }

        return NSLocalizedString("sendReminderPopUpNotReactedFirstDescription", bundle: bundle, value: "are you sure you want to send a reminder to all participants which has not reacted yet?", comment: "")
      }

      /// Base translation: are you sure you want to send a reminder to all participants?
      ///
      /// Locales: Base, en
      static func sendReminderPopUpFirstDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendReminderPopUpFirstDescription", bundle: hostingBundle, value: "are you sure you want to send a reminder to all participants?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendReminderPopUpFirstDescription"
        }

        return NSLocalizedString("sendReminderPopUpFirstDescription", bundle: bundle, value: "are you sure you want to send a reminder to all participants?", comment: "")
      }

      /// Base translation: bought
      ///
      /// Locales: Base, en
      static func bought(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bought", bundle: hostingBundle, value: "bought", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bought"
        }

        return NSLocalizedString("bought", bundle: bundle, value: "bought", comment: "")
      }

      /// Base translation: bussiness
      ///
      /// Locales: Base, en
      static func forBusiness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forBusiness", bundle: hostingBundle, value: "bussiness", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forBusiness"
        }

        return NSLocalizedString("forBusiness", bundle: bundle, value: "bussiness", comment: "")
      }

      /// Base translation: buy this theme
      ///
      /// Locales: Base, en
      static func buyThemeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buyThemeButtonTitle", bundle: hostingBundle, value: "buy this theme", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buyThemeButtonTitle"
        }

        return NSLocalizedString("buyThemeButtonTitle", bundle: bundle, value: "buy this theme", comment: "")
      }

      /// Base translation: cancel
      ///
      /// Locales: Base, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, value: "cancel", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, value: "cancel", comment: "")
      }

      /// Base translation: cancel invitation
      ///
      /// Locales: Base, en
      static func denyInvitation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denyInvitation", bundle: hostingBundle, value: "cancel\ninvitation", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "denyInvitation"
        }

        return NSLocalizedString("denyInvitation", bundle: bundle, value: "cancel\ninvitation", comment: "")
      }

      /// Base translation: change password
      ///
      /// Locales: Base, en
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changePassword", bundle: hostingBundle, value: "change password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changePassword"
        }

        return NSLocalizedString("changePassword", bundle: bundle, value: "change password", comment: "")
      }

      /// Base translation: chat background
      ///
      /// Locales: Base, en
      static func chatBackground(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chatBackground", bundle: hostingBundle, value: "chat background", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chatBackground"
        }

        return NSLocalizedString("chatBackground", bundle: bundle, value: "chat background", comment: "")
      }

      /// Base translation: client is not allowed to issue the request
      ///
      /// Locales: Base, en
      static func clientNotAllowedMakePayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clientNotAllowedMakePayment", bundle: hostingBundle, value: "client is not allowed to issue the request", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clientNotAllowedMakePayment"
        }

        return NSLocalizedString("clientNotAllowedMakePayment", bundle: bundle, value: "client is not allowed to issue the request", comment: "")
      }

      /// Base translation: complementary for a business profile (optional)
      ///
      /// Locales: Base, en
      static func bussinesProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bussinesProfile", bundle: hostingBundle, value: "complementary for a business profile (optional)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bussinesProfile"
        }

        return NSLocalizedString("bussinesProfile", bundle: bundle, value: "complementary for a business profile (optional)", comment: "")
      }

      /// Base translation: complementary for a business profile (optional)
      ///
      /// Locales: Base, en
      static func complementaryLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("complementaryLabel", bundle: hostingBundle, value: "complementary for a business profile (optional)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "complementaryLabel"
        }

        return NSLocalizedString("complementaryLabel", bundle: bundle, value: "complementary for a business profile (optional)", comment: "")
      }

      /// Base translation: connected
      ///
      /// Locales: Base, en
      static func connectedSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connectedSettings", bundle: hostingBundle, value: "connected", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connectedSettings"
        }

        return NSLocalizedString("connectedSettings", bundle: bundle, value: "connected", comment: "")
      }

      /// Base translation: contacts
      ///
      /// Locales: Base, en
      static func contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contacts", bundle: hostingBundle, value: "contacts", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contacts"
        }

        return NSLocalizedString("contacts", bundle: bundle, value: "contacts", comment: "")
      }

      /// Base translation: couldn't connect to the network
      ///
      /// Locales: Base, en
      static func networkError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("networkError", bundle: hostingBundle, value: "couldn't connect to the network", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "networkError"
        }

        return NSLocalizedString("networkError", bundle: bundle, value: "couldn't connect to the network", comment: "")
      }

      /// Base translation: data
      ///
      /// Locales: Base, en
      static func data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("data", bundle: hostingBundle, value: "data", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "data"
        }

        return NSLocalizedString("data", bundle: bundle, value: "data", comment: "")
      }

      /// Base translation: date notation
      ///
      /// Locales: Base, en
      static func dateNotation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dateNotation", bundle: hostingBundle, value: "date notation", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dateNotation"
        }

        return NSLocalizedString("dateNotation", bundle: bundle, value: "date notation", comment: "")
      }

      /// Base translation: day
      ///
      /// Locales: Base, en
      static func day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day", bundle: hostingBundle, value: "day", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day"
        }

        return NSLocalizedString("day", bundle: bundle, value: "day", comment: "")
      }

      /// Base translation: delete account
      ///
      /// Locales: Base, en
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteAccount", bundle: hostingBundle, value: "delete account", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteAccount"
        }

        return NSLocalizedString("deleteAccount", bundle: bundle, value: "delete account", comment: "")
      }

      /// Base translation: do you want to add %@ to your calendar?
      ///
      /// Locales: Base, en
      static func invitationIncomingPopUpAddAppointmentSecond(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invitationIncomingPopUpAddAppointmentSecond", bundle: hostingBundle, value: "do you want to add %@ to your calendar?", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationIncomingPopUpAddAppointmentSecond"
        }

        let format = NSLocalizedString("invitationIncomingPopUpAddAppointmentSecond", bundle: bundle, value: "do you want to add %@ to your calendar?", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: do you want to add it to your agenda?
      ///
      /// Locales: Base, en
      static func newIncomingMOMPopUpInvitationSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newIncomingMOMPopUpInvitationSecond", bundle: hostingBundle, value: "do you want to add it to your agenda?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newIncomingMOMPopUpInvitationSecond"
        }

        return NSLocalizedString("newIncomingMOMPopUpInvitationSecond", bundle: bundle, value: "do you want to add it to your agenda?", comment: "")
      }

      /// Base translation: do you want to add it?
      ///
      /// Locales: Base, en
      static func invitationPopUpOutgoingAddToCalendarSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationPopUpOutgoingAddToCalendarSecond", bundle: hostingBundle, value: "do you want to add it?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpOutgoingAddToCalendarSecond"
        }

        return NSLocalizedString("invitationPopUpOutgoingAddToCalendarSecond", bundle: bundle, value: "do you want to add it?", comment: "")
      }

      /// Base translation: do you want to excuse yourself for                 %@
      ///
      /// Locales: Base, en
      static func newIncomingMOMPopUpExcuse(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("newIncomingMOMPopUpExcuse", bundle: hostingBundle, value: "do you want to excuse yourself for\n                %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newIncomingMOMPopUpExcuse"
        }

        let format = NSLocalizedString("newIncomingMOMPopUpExcuse", bundle: bundle, value: "do you want to excuse yourself for\n                %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: do you want to log in now?
      ///
      /// Locales: Base, en
      static func invitationPopUpAddAppointmentLoginSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationPopUpAddAppointmentLoginSecond", bundle: hostingBundle, value: "do you want to log in now?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpAddAppointmentLoginSecond"
        }

        return NSLocalizedString("invitationPopUpAddAppointmentLoginSecond", bundle: bundle, value: "do you want to log in now?", comment: "")
      }

      /// Base translation: done
      ///
      /// Locales: Base, en
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: hostingBundle, value: "done", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, value: "done", comment: "")
      }

      /// Base translation: edit account
      ///
      /// Locales: Base, en
      static func editAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editAccount", bundle: hostingBundle, value: "edit account", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editAccount"
        }

        return NSLocalizedString("editAccount", bundle: bundle, value: "edit account", comment: "")
      }

      /// Base translation: email
      ///
      /// Locales: Base, en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, value: "email", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, value: "email", comment: "")
      }

      /// Base translation: enter your e-mail address below. You will receive an e-mail to change your password
      ///
      /// Locales: Base, en
      static func sendEmailDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendEmailDescription", bundle: hostingBundle, value: "enter your e-mail address below. You will receive an e-mail to change your password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendEmailDescription"
        }

        return NSLocalizedString("sendEmailDescription", bundle: bundle, value: "enter your e-mail address below. You will receive an e-mail to change your password", comment: "")
      }

      /// Base translation: events
      ///
      /// Locales: Base, en
      static func events(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("events", bundle: hostingBundle, value: "events", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "events"
        }

        return NSLocalizedString("events", bundle: bundle, value: "events", comment: "")
      }

      /// Base translation: facebook
      ///
      /// Locales: Base, en
      static func facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("facebook", bundle: hostingBundle, value: "facebook", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "facebook"
        }

        return NSLocalizedString("facebook", bundle: bundle, value: "facebook", comment: "")
      }

      /// Base translation: failed
      ///
      /// Locales: Base, en
      static func failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed", bundle: hostingBundle, value: "failed", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed"
        }

        return NSLocalizedString("failed", bundle: bundle, value: "failed", comment: "")
      }

      /// Base translation: fifth page
      ///
      /// Locales: Base, en
      static func tutorialDescription5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialDescription5", bundle: hostingBundle, value: "fifth page", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialDescription5"
        }

        return NSLocalizedString("tutorialDescription5", bundle: bundle, value: "fifth page", comment: "")
      }

      /// Base translation: first page
      ///
      /// Locales: Base, en
      static func tutorialDescription1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialDescription1", bundle: hostingBundle, value: "first page", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialDescription1"
        }

        return NSLocalizedString("tutorialDescription1", bundle: bundle, value: "first page", comment: "")
      }

      /// Base translation: for this theme                 you will need %@.                 you need ½@.                 do you want to buy credits?             
      ///
      /// Locales: Base, en
      static func buyThemePopUpNotEnoughCredit(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("BuyThemePopUpNotEnoughCredit", bundle: hostingBundle, value: "for this theme\n                you will need %@.\n                you need ½@.\n                do you want to buy credits?\n            ", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BuyThemePopUpNotEnoughCredit"
        }

        let format = NSLocalizedString("BuyThemePopUpNotEnoughCredit", bundle: bundle, value: "for this theme\n                you will need %@.\n                you need ½@.\n                do you want to buy credits?\n            ", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: forgot password?
      ///
      /// Locales: Base, en
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword", bundle: hostingBundle, value: "forgot password?", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword"
        }

        return NSLocalizedString("forgotPassword", bundle: bundle, value: "forgot password?", comment: "")
      }

      /// Base translation: fourth page
      ///
      /// Locales: Base, en
      static func tutorialDescription4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialDescription4", bundle: hostingBundle, value: "fourth page", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialDescription4"
        }

        return NSLocalizedString("tutorialDescription4", bundle: bundle, value: "fourth page", comment: "")
      }

      /// Base translation: fr
      ///
      /// Locales: Base, en
      static func fridayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fridayShort", bundle: hostingBundle, value: "fr", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fridayShort"
        }

        return NSLocalizedString("fridayShort", bundle: bundle, value: "fr", comment: "")
      }

      /// Base translation: function
      ///
      /// Locales: Base, en
      static func function(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("function", bundle: hostingBundle, value: "function", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "function"
        }

        return NSLocalizedString("function", bundle: bundle, value: "function", comment: "")
      }

      /// Base translation: general
      ///
      /// Locales: Base, en
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general", bundle: hostingBundle, value: "general", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general"
        }

        return NSLocalizedString("general", bundle: bundle, value: "general", comment: "")
      }

      /// Base translation: google
      ///
      /// Locales: Base, en
      static func google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("google", bundle: hostingBundle, value: "google", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "google"
        }

        return NSLocalizedString("google", bundle: bundle, value: "google", comment: "")
      }

      /// Base translation: group
      ///
      /// Locales: Base, en
      static func group(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("group", bundle: hostingBundle, value: "group", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "group"
        }

        return NSLocalizedString("group", bundle: bundle, value: "group", comment: "")
      }

      /// Base translation: group chat
      ///
      /// Locales: Base, en
      static func groupChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("groupChat", bundle: hostingBundle, value: "group chat", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "groupChat"
        }

        return NSLocalizedString("groupChat", bundle: bundle, value: "group chat", comment: "")
      }

      /// Base translation: holidays
      ///
      /// Locales: Base, en
      static func holidays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holidays", bundle: hostingBundle, value: "holidays", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holidays"
        }

        return NSLocalizedString("holidays", bundle: bundle, value: "holidays", comment: "")
      }

      /// Base translation: i already have an account
      ///
      /// Locales: Base, en
      static func haveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haveAccount", bundle: hostingBundle, value: "i already have an account", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "haveAccount"
        }

        return NSLocalizedString("haveAccount", bundle: bundle, value: "i already have an account", comment: "")
      }

      /// Base translation: i don't have an account yet
      ///
      /// Locales: Base, en
      static func dontHaveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dontHaveAccount", bundle: hostingBundle, value: "i don't have an account yet", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dontHaveAccount"
        }

        return NSLocalizedString("dontHaveAccount", bundle: bundle, value: "i don't have an account yet", comment: "")
      }

      /// Base translation: invitations
      ///
      /// Locales: Base, en
      static func invitations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitations", bundle: hostingBundle, value: "invitations", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitations"
        }

        return NSLocalizedString("invitations", bundle: bundle, value: "invitations", comment: "")
      }

      /// Base translation: legend
      ///
      /// Locales: Base
      static func legend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("legend", bundle: hostingBundle, value: "legend", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "legend"
        }

        return NSLocalizedString("legend", bundle: bundle, value: "legend", comment: "")
      }

      /// Base translation: legends
      ///
      /// Locales: Base, en
      static func legends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("legends", bundle: hostingBundle, value: "legends", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "legends"
        }

        return NSLocalizedString("legends", bundle: bundle, value: "legends", comment: "")
      }

      /// Base translation: linked with
      ///
      /// Locales: Base, en
      static func linkedWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("linkedWith", bundle: hostingBundle, value: "linked with", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "linkedWith"
        }

        return NSLocalizedString("linkedWith", bundle: bundle, value: "linked with", comment: "")
      }

      /// Base translation: login
      ///
      /// Locales: Base, en
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, value: "login", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, value: "login", comment: "")
      }

      /// Base translation: logout
      ///
      /// Locales: Base, en
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, value: "logout", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, value: "logout", comment: "")
      }

      /// Base translation: meeting
      ///
      /// Locales: Base, en
      static func meeting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meeting", bundle: hostingBundle, value: "meeting", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meeting"
        }

        return NSLocalizedString("meeting", bundle: bundle, value: "meeting", comment: "")
      }

      /// Base translation: meetings
      ///
      /// Locales: Base, en
      static func meetings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meetings", bundle: hostingBundle, value: "meetings", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meetings"
        }

        return NSLocalizedString("meetings", bundle: bundle, value: "meetings", comment: "")
      }

      /// Base translation: memo
      ///
      /// Locales: Base, en
      static func memo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("memo", bundle: hostingBundle, value: "memo", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "memo"
        }

        return NSLocalizedString("memo", bundle: bundle, value: "memo", comment: "")
      }

      /// Base translation: memo to
      ///
      /// Locales: Base, en
      static func memoTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("memoTo", bundle: hostingBundle, value: "memo to", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "memoTo"
        }

        return NSLocalizedString("memoTo", bundle: bundle, value: "memo to", comment: "")
      }

      /// Base translation: memo to
      ///
      /// Locales: Base, en
      static func memoToHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("memoToHome", bundle: hostingBundle, value: "memo to", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "memoToHome"
        }

        return NSLocalizedString("memoToHome", bundle: bundle, value: "memo to", comment: "")
      }

      /// Base translation: messages
      ///
      /// Locales: Base, en
      static func messages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("messages", bundle: hostingBundle, value: "messages", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "messages"
        }

        return NSLocalizedString("messages", bundle: bundle, value: "messages", comment: "")
      }

      /// Base translation: minutes of meeting
      ///
      /// Locales: Base, en
      static func minOfMeeting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minOfMeeting", bundle: hostingBundle, value: "minutes of meeting", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minOfMeeting"
        }

        return NSLocalizedString("minOfMeeting", bundle: bundle, value: "minutes of meeting", comment: "")
      }

      /// Base translation: mo
      ///
      /// Locales: Base, en
      static func mondayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mondayShort", bundle: hostingBundle, value: "mo", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mondayShort"
        }

        return NSLocalizedString("mondayShort", bundle: bundle, value: "mo", comment: "")
      }

      /// Base translation: month
      ///
      /// Locales: Base, en
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month", bundle: hostingBundle, value: "month", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month"
        }

        return NSLocalizedString("month", bundle: bundle, value: "month", comment: "")
      }

      /// Base translation: my themes
      ///
      /// Locales: Base, en
      static func myThemes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myThemes", bundle: hostingBundle, value: "my themes", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myThemes"
        }

        return NSLocalizedString("myThemes", bundle: bundle, value: "my themes", comment: "")
      }

      /// Base translation: name
      ///
      /// Locales: Base, en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, value: "name", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, value: "name", comment: "")
      }

      /// Base translation: new message
      ///
      /// Locales: Base, en
      static func newMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newMessage", bundle: hostingBundle, value: "new message", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newMessage"
        }

        return NSLocalizedString("newMessage", bundle: bundle, value: "new message", comment: "")
      }

      /// Base translation: new password
      ///
      /// Locales: Base, en
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newPassword", bundle: hostingBundle, value: "new password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newPassword"
        }

        return NSLocalizedString("newPassword", bundle: bundle, value: "new password", comment: "")
      }

      /// Base translation: next
      ///
      /// Locales: Base, en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, value: "next", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, value: "next", comment: "")
      }

      /// Base translation: no
      ///
      /// Locales: Base, en
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, value: "no", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, value: "no", comment: "")
      }

      /// Base translation: not allowed to make the payment
      ///
      /// Locales: Base, en
      static func notAllowedMakePurchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notAllowedMakePurchase", bundle: hostingBundle, value: "not allowed to make the payment", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notAllowedMakePurchase"
        }

        return NSLocalizedString("notAllowedMakePurchase", bundle: bundle, value: "not allowed to make the payment", comment: "")
      }

      /// Base translation: not purchased
      ///
      /// Locales: Base, en
      static func productIsNotPurchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("productIsNotPurchased", bundle: hostingBundle, value: "not purchased", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "productIsNotPurchased"
        }

        return NSLocalizedString("productIsNotPurchased", bundle: bundle, value: "not purchased", comment: "")
      }

      /// Base translation: off
      ///
      /// Locales: Base, en
      static func off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("off", bundle: hostingBundle, value: "off", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "off"
        }

        return NSLocalizedString("off", bundle: bundle, value: "off", comment: "")
      }

      /// Base translation: old password
      ///
      /// Locales: Base, en
      static func oldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oldPassword", bundle: hostingBundle, value: "old password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oldPassword"
        }

        return NSLocalizedString("oldPassword", bundle: bundle, value: "old password", comment: "")
      }

      /// Base translation: on
      ///
      /// Locales: Base, en
      static func on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("on", bundle: hostingBundle, value: "on", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "on"
        }

        return NSLocalizedString("on", bundle: bundle, value: "on", comment: "")
      }

      /// Base translation: optional
      ///
      /// Locales: Base, en
      static func optional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("optional", bundle: hostingBundle, value: "optional", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "optional"
        }

        return NSLocalizedString("optional", bundle: bundle, value: "optional", comment: "")
      }

      /// Base translation: other
      ///
      /// Locales: Base, en
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", bundle: hostingBundle, value: "other", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", bundle: bundle, value: "other", comment: "")
      }

      /// Base translation: outlook
      ///
      /// Locales: Base, en
      static func outlook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("outlook", bundle: hostingBundle, value: "outlook", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "outlook"
        }

        return NSLocalizedString("outlook", bundle: bundle, value: "outlook", comment: "")
      }

      /// Base translation: participant
      ///
      /// Locales: Base, en
      static func participant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("participant", bundle: hostingBundle, value: "participant", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "participant"
        }

        return NSLocalizedString("participant", bundle: bundle, value: "participant", comment: "")
      }

      /// Base translation: password
      ///
      /// Locales: Base, en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, value: "password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, value: "password", comment: "")
      }

      /// Base translation: planning
      ///
      /// Locales: Base, en
      static func planning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("planning", bundle: hostingBundle, value: "planning", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "planning"
        }

        return NSLocalizedString("planning", bundle: bundle, value: "planning", comment: "")
      }

      /// Base translation: postal code + residence
      ///
      /// Locales: Base, en
      static func postalCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("postalCode", bundle: hostingBundle, value: "postal code + residence", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "postalCode"
        }

        return NSLocalizedString("postalCode", bundle: bundle, value: "postal code + residence", comment: "")
      }

      /// Base translation: price
      ///
      /// Locales: Base, en
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price", bundle: hostingBundle, value: "price", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "price"
        }

        return NSLocalizedString("price", bundle: bundle, value: "price", comment: "")
      }

      /// Base translation: private chat
      ///
      /// Locales: Base, en
      static func privateChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privateChat", bundle: hostingBundle, value: "private chat", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privateChat"
        }

        return NSLocalizedString("privateChat", bundle: bundle, value: "private chat", comment: "")
      }

      /// Base translation: product is purchased
      ///
      /// Locales: Base, en
      static func productIsPurchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("productIsPurchased", bundle: hostingBundle, value: "product is purchased", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "productIsPurchased"
        }

        return NSLocalizedString("productIsPurchased", bundle: bundle, value: "product is purchased", comment: "")
      }

      /// Base translation: re enter password
      ///
      /// Locales: Base, en
      static func reNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reNewPassword", bundle: hostingBundle, value: "re enter password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reNewPassword"
        }

        return NSLocalizedString("reNewPassword", bundle: bundle, value: "re enter password", comment: "")
      }

      /// Base translation: re enter password
      ///
      /// Locales: Base, en
      static func rePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rePassword", bundle: hostingBundle, value: "re enter password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rePassword"
        }

        return NSLocalizedString("rePassword", bundle: bundle, value: "re enter password", comment: "")
      }

      /// Base translation: read
      ///
      /// Locales: Base, en
      static func isRead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("isRead", bundle: hostingBundle, value: "read", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "isRead"
        }

        return NSLocalizedString("isRead", bundle: bundle, value: "read", comment: "")
      }

      /// Base translation: register
      ///
      /// Locales: Base, en
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register", bundle: hostingBundle, value: "register", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register"
        }

        return NSLocalizedString("register", bundle: bundle, value: "register", comment: "")
      }

      /// Base translation: reject
      ///
      /// Locales: Base, en
      static func reject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reject", bundle: hostingBundle, value: "reject", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reject"
        }

        return NSLocalizedString("reject", bundle: bundle, value: "reject", comment: "")
      }

      /// Base translation: reminders
      ///
      /// Locales: Base, en
      static func reminders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminders", bundle: hostingBundle, value: "reminders", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminders"
        }

        return NSLocalizedString("reminders", bundle: bundle, value: "reminders", comment: "")
      }

      /// Base translation: sa
      ///
      /// Locales: Base, en
      static func saturdayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saturdayShort", bundle: hostingBundle, value: "sa", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saturdayShort"
        }

        return NSLocalizedString("saturdayShort", bundle: bundle, value: "sa", comment: "")
      }

      /// Base translation: save
      ///
      /// Locales: Base, en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, value: "save", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, value: "save", comment: "")
      }

      /// Base translation: save new password
      ///
      /// Locales: Base, en
      static func saveNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saveNewPassword", bundle: hostingBundle, value: "save new password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saveNewPassword"
        }

        return NSLocalizedString("saveNewPassword", bundle: bundle, value: "save new password", comment: "")
      }

      /// Base translation: search
      ///
      /// Locales: Base, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, value: "search", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, value: "search", comment: "")
      }

      /// Base translation: second page
      ///
      /// Locales: Base, en
      static func tutorialDescription2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialDescription2", bundle: hostingBundle, value: "second page", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialDescription2"
        }

        return NSLocalizedString("tutorialDescription2", bundle: bundle, value: "second page", comment: "")
      }

      /// Base translation: select
      ///
      /// Locales: Base, en
      static func select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select", bundle: hostingBundle, value: "select", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select"
        }

        return NSLocalizedString("select", bundle: bundle, value: "select", comment: "")
      }

      /// Base translation: select date notation
      ///
      /// Locales: Base, en
      static func selectDateNotation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectDateNotation", bundle: hostingBundle, value: "select date notation", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "selectDateNotation"
        }

        return NSLocalizedString("selectDateNotation", bundle: bundle, value: "select date notation", comment: "")
      }

      /// Base translation: selected
      ///
      /// Locales: Base, en
      static func selected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selected", bundle: hostingBundle, value: "selected", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "selected"
        }

        return NSLocalizedString("selected", bundle: bundle, value: "selected", comment: "")
      }

      /// Base translation: send
      ///
      /// Locales: Base, en
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send", bundle: hostingBundle, value: "send", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send"
        }

        return NSLocalizedString("send", bundle: bundle, value: "send", comment: "")
      }

      /// Base translation: send notification to the person whom not reacted yet
      ///
      /// Locales: Base, en
      static func notReactedNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notReactedNotification", bundle: hostingBundle, value: "send notification to the person whom not reacted yet", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notReactedNotification"
        }

        return NSLocalizedString("notReactedNotification", bundle: bundle, value: "send notification to the person whom not reacted yet", comment: "")
      }

      /// Base translation: send reminder of the appointment to participants
      ///
      /// Locales: Base, en
      static func reminderNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderNotification", bundle: hostingBundle, value: "send reminder of the appointment to participants", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderNotification"
        }

        return NSLocalizedString("reminderNotification", bundle: bundle, value: "send reminder of the appointment to participants", comment: "")
      }

      /// Base translation: send your availability
      ///
      /// Locales: Base, en
      static func giveAvailability(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("giveAvailability", bundle: hostingBundle, value: "send your availability", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "giveAvailability"
        }

        return NSLocalizedString("giveAvailability", bundle: bundle, value: "send your availability", comment: "")
      }

      /// Base translation: settings
      ///
      /// Locales: Base, en
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, value: "settings", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, value: "settings", comment: "")
      }

      /// Base translation: skip
      ///
      /// Locales: Base, en
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: hostingBundle, value: "skip", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, value: "skip", comment: "")
      }

      /// Base translation: standart
      ///
      /// Locales: Base, en
      static func standart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("standart", bundle: hostingBundle, value: "standart", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "standart"
        }

        return NSLocalizedString("standart", bundle: bundle, value: "standart", comment: "")
      }

      /// Base translation: su
      ///
      /// Locales: Base, en
      static func sundayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sundayShort", bundle: hostingBundle, value: "su", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sundayShort"
        }

        return NSLocalizedString("sundayShort", bundle: bundle, value: "su", comment: "")
      }

      /// Base translation: subject
      ///
      /// Locales: Base, en
      static func subject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subject", bundle: hostingBundle, value: "subject", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subject"
        }

        return NSLocalizedString("subject", bundle: bundle, value: "subject", comment: "")
      }

      /// Base translation: suggest
      ///
      /// Locales: Base, en
      static func suggest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suggest", bundle: hostingBundle, value: "suggest", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "suggest"
        }

        return NSLocalizedString("suggest", bundle: bundle, value: "suggest", comment: "")
      }

      /// Base translation: suggest  new date
      ///
      /// Locales: Base, en
      static func suggestDateInvitation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suggestDateInvitation", bundle: hostingBundle, value: "suggest \nnew date", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "suggestDateInvitation"
        }

        return NSLocalizedString("suggestDateInvitation", bundle: bundle, value: "suggest \nnew date", comment: "")
      }

      /// Base translation: surname
      ///
      /// Locales: Base, en
      static func surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("surname", bundle: hostingBundle, value: "surname", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "surname"
        }

        return NSLocalizedString("surname", bundle: bundle, value: "surname", comment: "")
      }

      /// Base translation: synchronise
      ///
      /// Locales: Base, en
      static func synchronise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("synchronise", bundle: hostingBundle, value: "synchronise", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "synchronise"
        }

        return NSLocalizedString("synchronise", bundle: bundle, value: "synchronise", comment: "")
      }

      /// Base translation: th
      ///
      /// Locales: Base, en
      static func thursdayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thursdayShort", bundle: hostingBundle, value: "th", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thursdayShort"
        }

        return NSLocalizedString("thursdayShort", bundle: bundle, value: "th", comment: "")
      }

      /// Base translation: the confirmed date of this group %@ isn't in your agenda.
      ///
      /// Locales: Base, en
      static func invitationPopUpOutgoingAddToCalendarFirst(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invitationPopUpOutgoingAddToCalendarFirst", bundle: hostingBundle, value: "the confirmed date of this group %@ isn't in your agenda.", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpOutgoingAddToCalendarFirst"
        }

        let format = NSLocalizedString("invitationPopUpOutgoingAddToCalendarFirst", bundle: bundle, value: "the confirmed date of this group %@ isn't in your agenda.", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: the invitation will disapear from your overview.
      ///
      /// Locales: Base, en
      static func invitationIncomingPopUpCancelAppointmentSecond(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invitationIncomingPopUpCancelAppointmentSecond", bundle: hostingBundle, value: "the invitation will disapear from your overview.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationIncomingPopUpCancelAppointmentSecond"
        }

        return NSLocalizedString("invitationIncomingPopUpCancelAppointmentSecond", bundle: bundle, value: "the invitation will disapear from your overview.", comment: "")
      }

      /// Base translation: there is a date pinned at:                 %@ between %@ - %@
      ///
      /// Locales: Base, en
      static func invitationIncomingPopUpAddAppointmentFirst(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invitationIncomingPopUpAddAppointmentFirst", bundle: hostingBundle, value: "there is a date pinned at:\n                %@ between %@ - %@", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationIncomingPopUpAddAppointmentFirst"
        }

        let format = NSLocalizedString("invitationIncomingPopUpAddAppointmentFirst", bundle: bundle, value: "there is a date pinned at:\n                %@ between %@ - %@", comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// Base translation: there is a date suggestion from %@ in %@ at:                 %@ between %@
      ///
      /// Locales: Base, en
      static func invitationOutgoingPopUpDateSuggestionFirst(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invitationOutgoingPopUpDateSuggestionFirst", bundle: hostingBundle, value: "there is a date suggestion from %@ in %@ at:\n                %@ between %@", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationOutgoingPopUpDateSuggestionFirst"
        }

        let format = NSLocalizedString("invitationOutgoingPopUpDateSuggestionFirst", bundle: bundle, value: "there is a date suggestion from %@ in %@ at:\n                %@ between %@", comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      /// Base translation: there is a new date suggestion from %@ at:                 %@                 between %@
      ///
      /// Locales: Base, en
      static func memoToPopUpDateSuggestionFirst(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("memoToPopUpDateSuggestionFirst", bundle: hostingBundle, value: "there is a new date suggestion from %@ at:\n                %@\n                between %@", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "memoToPopUpDateSuggestionFirst"
        }

        let format = NSLocalizedString("memoToPopUpDateSuggestionFirst", bundle: bundle, value: "there is a new date suggestion from %@ at:\n                %@\n                between %@", comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// Base translation: third page
      ///
      /// Locales: Base, en
      static func tutorialDescription3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialDescription3", bundle: hostingBundle, value: "third page", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialDescription3"
        }

        return NSLocalizedString("tutorialDescription3", bundle: bundle, value: "third page", comment: "")
      }

      /// Base translation: time format
      ///
      /// Locales: Base, en
      static func timeFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeFormat", bundle: hostingBundle, value: "time format", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeFormat"
        }

        return NSLocalizedString("timeFormat", bundle: bundle, value: "time format", comment: "")
      }

      /// Base translation: timeline
      ///
      /// Locales: Base, en
      static func timeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeline", bundle: hostingBundle, value: "timeline", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timeline"
        }

        return NSLocalizedString("timeline", bundle: bundle, value: "timeline", comment: "")
      }

      /// Base translation: timeline status
      ///
      /// Locales: Base, en
      static func timelineStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineStatus", bundle: hostingBundle, value: "timeline status", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timelineStatus"
        }

        return NSLocalizedString("timelineStatus", bundle: bundle, value: "timeline status", comment: "")
      }

      /// Base translation: timeline type
      ///
      /// Locales: Base, en
      static func timelineType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineType", bundle: hostingBundle, value: "timeline type", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timelineType"
        }

        return NSLocalizedString("timelineType", bundle: bundle, value: "timeline type", comment: "")
      }

      /// Base translation: tu
      ///
      /// Locales: Base, en
      static func tuesdayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuesdayShort", bundle: hostingBundle, value: "tu", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tuesdayShort"
        }

        return NSLocalizedString("tuesdayShort", bundle: bundle, value: "tu", comment: "")
      }

      /// Base translation: tutorial
      ///
      /// Locales: Base, en
      static func tutorial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial", bundle: hostingBundle, value: "tutorial", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial"
        }

        return NSLocalizedString("tutorial", bundle: bundle, value: "tutorial", comment: "")
      }

      /// Base translation: unread
      ///
      /// Locales: Base, en
      static func unRead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unRead", bundle: hostingBundle, value: "unread", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unRead"
        }

        return NSLocalizedString("unRead", bundle: bundle, value: "unread", comment: "")
      }

      /// Base translation: upgrades
      ///
      /// Locales: Base, en
      static func upgrades(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upgrades", bundle: hostingBundle, value: "upgrades", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upgrades"
        }

        return NSLocalizedString("upgrades", bundle: bundle, value: "upgrades", comment: "")
      }

      /// Base translation: use this theme
      ///
      /// Locales: Base, en
      static func useThemeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("useThemeButtonTitle", bundle: hostingBundle, value: "use this theme", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "useThemeButtonTitle"
        }

        return NSLocalizedString("useThemeButtonTitle", bundle: bundle, value: "use this theme", comment: "")
      }

      /// Base translation: we
      ///
      /// Locales: Base, en
      static func wednesdayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wednesdayShort", bundle: hostingBundle, value: "we", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wednesdayShort"
        }

        return NSLocalizedString("wednesdayShort", bundle: bundle, value: "we", comment: "")
      }

      /// Base translation: week
      ///
      /// Locales: Base, en
      static func week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("week", bundle: hostingBundle, value: "week", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "week"
        }

        return NSLocalizedString("week", bundle: bundle, value: "week", comment: "")
      }

      /// Base translation: yahoo
      ///
      /// Locales: Base
      static func yahoo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yahoo", bundle: hostingBundle, value: "yahoo", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yahoo"
        }

        return NSLocalizedString("yahoo", bundle: bundle, value: "yahoo", comment: "")
      }

      /// Base translation: year
      ///
      /// Locales: Base, en
      static func year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("year", bundle: hostingBundle, value: "year", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "year"
        }

        return NSLocalizedString("year", bundle: bundle, value: "year", comment: "")
      }

      /// Base translation: yes
      ///
      /// Locales: Base, en
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: hostingBundle, value: "yes", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, value: "yes", comment: "")
      }

      /// Base translation: you confirmed an invitation on %@ group at %@, between %@ %@
      ///
      /// Locales: Base, en
      static func invitationPopUpDateConfirmedFirst(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invitationPopUpDateConfirmedFirst", bundle: hostingBundle, value: "you confirmed an invitation on %@ group at %@, between %@ %@", comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invitationPopUpDateConfirmedFirst"
        }

        let format = NSLocalizedString("invitationPopUpDateConfirmedFirst", bundle: bundle, value: "you confirmed an invitation on %@ group at %@, between %@ %@", comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddToAgendaHeader.validate()
      try _AvailablityOverviewCell.validate()
      try _BottomMapView.validate()
      try _InvitationAddonView.validate()
      try _InvitationBasicInfoView.validate()
      try _InvitationDetailHeaderView.validate()
      try _InvitationProposedDateCell.validate()
      try _InvitationSelectDateCollectionCell.validate()
      try _InvitationSetupCell.validate()
      try _OldChatBubbleMessageView.validate()
      try _OldDateCell.validate()
      try _OldDateHeaderCell.validate()
      try _OldDiagramCircleView.validate()
      try _OldHomeTitleView.validate()
      try _OldPlanningView.validate()
      try _OldSideMenuHeaderView.validate()
      try _OldTimelineMenu.validate()
      try _PickedDateView.validate()
      try _SuggestedDateView.validate()
      try _TopDialogueView.validate()
      try _oldInvitationDateTableViewCell.validate()
      try _oldInvitationGeneralTableViewCell.validate()
      try _oldIsTypingView.validate()
      try _oldParticipantTableViewCell.validate()
      try _oldPlanningMonthDetailTableViewCell.validate()
    }

    struct _AddDateCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddDateCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDateCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDateCollectionCell
      }

      fileprivate init() {}
    }

    struct _AddToAgendaHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddToAgendaHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bell.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell.fill' is used in nib 'AddToAgendaHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddToAgendacell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddToAgendaCell

      let bundle = R.hostingBundle
      let identifier = "AddToAgendaCell"
      let name = "AddToAgendacell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddToAgendaCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddToAgendaCell
      }

      fileprivate init() {}
    }

    struct _AvailabilityHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AvailabilityHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AvailablityOverviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AvailablityOverviewCell

      let bundle = R.hostingBundle
      let identifier = "AvailablityOverviewCell"
      let name = "AvailablityOverviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AvailablityOverviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AvailablityOverviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Menu_Profile_Picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Profile_Picture' is used in nib 'AvailablityOverviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'AvailablityOverviewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appContactsGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appContactsGray' is used in storyboard 'AvailablityOverviewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'AvailablityOverviewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BottomMapView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BottomMapView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "popUp_cancel_appointment_outgoing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_cancel_appointment_outgoing' is used in nib 'BottomMapView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "popUp_invitation_incoming_appointment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_invitation_incoming_appointment' is used in nib 'BottomMapView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'BottomMapView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightRed' is used in storyboard 'BottomMapView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddDateHeaderView

      let bundle = R.hostingBundle
      let identifier = "CollectionReusableView"
      let name = "CollectionReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDateHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDateHeaderView
      }

      fileprivate init() {}
    }

    struct _CommentFieldView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentFieldView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _InvitationAddonView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvitationAddonView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_Right_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Black' is used in nib 'InvitationAddonView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "To_do_list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'To_do_list' is used in nib 'InvitationAddonView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'InvitationAddonView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationBasicInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvitationBasicInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "InvıtationItems/icn_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_location' is used in nib 'InvitationBasicInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_people' is used in nib 'InvitationBasicInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_user' is used in nib 'InvitationBasicInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'InvitationBasicInfoView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'InvitationBasicInfoView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'InvitationBasicInfoView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationDetailDateTitleView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InvitationDetailDateTitleView

      let bundle = R.hostingBundle
      let identifier = "InvitationDetailDateTitleView"
      let name = "InvitationDetailDateTitleView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailDateTitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailDateTitleView
      }

      fileprivate init() {}
    }

    struct _InvitationDetailFooterView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InvitationDetailFooterView

      let bundle = R.hostingBundle
      let identifier = "InvitationDetailFooterView"
      let name = "InvitationDetailFooterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailFooterView
      }

      fileprivate init() {}
    }

    struct _InvitationDetailHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InvitationDetailHeaderView

      let bundle = R.hostingBundle
      let identifier = "InvitationDetailHeaderView"
      let name = "InvitationDetailHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationDetailHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationDetailHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "InvıtationItems/icn_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_location' is used in nib 'InvitationDetailHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_people' is used in nib 'InvitationDetailHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_user' is used in nib 'InvitationDetailHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "popUp_invitation_incoming_hasAppointment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_invitation_incoming_hasAppointment' is used in nib 'InvitationDetailHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'InvitationDetailHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'InvitationDetailHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'InvitationDetailHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationProposedDateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InvitationProposedDateCell

      let bundle = R.hostingBundle
      let identifier = "InvitationProposedDateCell"
      let name = "InvitationProposedDateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationProposedDateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationProposedDateCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Checked' is used in nib 'InvitationProposedDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/ic_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/ic_date' is used in nib 'InvitationProposedDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_cross' is used in nib 'InvitationProposedDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_dots' is used in nib 'InvitationProposedDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_question' is used in nib 'InvitationProposedDateCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'InvitationProposedDateCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'InvitationProposedDateCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'InvitationProposedDateCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'InvitationProposedDateCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationSelectDateCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvitationSelectDateCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSelectDateCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSelectDateCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "InvıtationItems/icn_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_check' is used in nib 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_cross' is used in nib 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_dots' is used in nib 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_question' is used in nib 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark' is used in nib 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'InvitationSelectDateCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationSelectDateHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvitationSelectDateHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSelectDateHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSelectDateHeaderView
      }

      fileprivate init() {}
    }

    struct _InvitationSetupCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InvitationSetupCell

      let bundle = R.hostingBundle
      let identifier = "InvitationSetupCell"
      let name = "InvitationSetupCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationSetupCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationSetupCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "To_do_list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'To_do_list' is used in nib 'InvitationSetupCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'InvitationSetupCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InvitationTabView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvitationTabView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OldChatBubbleMessageView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OldChatBubbleMessageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ProfilePicture_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfilePicture_icon' is used in nib 'OldChatBubbleMessageView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldDateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "DateCell"
      let name = "OldDateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bussines_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bussines_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "group_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "memoTo_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'memoTo_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "memo_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'memo_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mom_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mom_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "standart_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'standart_header_white_icon' is used in nib 'OldDateCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldDateHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "DateHeaderCell"
      let name = "OldDateHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add_Icon_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add_Icon_White' is used in nib 'OldDateHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Left_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Left_Blue' is used in nib 'OldDateHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Right_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Blue' is used in nib 'OldDateHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Berichten_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Berichten_White' is used in nib 'OldDateHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'OldDateHeaderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'OldDateHeaderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'OldDateHeaderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OldDayCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UICollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "DayCollectionViewCell"
      let name = "OldDayCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
      }

      fileprivate init() {}
    }

    struct _OldDiagramCircleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OldDiagramCircleView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Appointment_regular_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Appointment_regular_white' is used in nib 'OldDiagramCircleView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldEmojiInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OldEmojiInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OldHomeTitleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OldHomeTitleView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Pointer_Down_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pointer_Down_Black' is used in nib 'OldHomeTitleView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldLoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OldLoadingView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OldPlanningDateView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OldPlanningDateView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OldPlanningDateViewCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UICollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PlanningDateViewCollectionViewCell"
      let name = "OldPlanningDateViewCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
      }

      fileprivate init() {}
    }

    struct _OldPlanningView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OldPlanningView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Menu_Business", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Business' is used in nib 'OldPlanningView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldSideMenuHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "SideMenuHeaderView"
      let name = "OldSideMenuHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ProfilePicture_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfilePicture_icon' is used in nib 'OldSideMenuHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldTimelineMenu: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OldTimelineMenu"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Day_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Day_blue' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Month_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Month_blue' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Planning_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Planning_blue' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search_blue' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Timeline_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Timeline_white' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Year_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Year_blue' is used in nib 'OldTimelineMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OldYearMonthHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "YearMonthTableViewCell"
      let name = "OldYearMonthHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      fileprivate init() {}
    }

    struct _PickedDateView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PickedDateView

      let bundle = R.hostingBundle
      let identifier = "PickedDateView"
      let name = "PickedDateView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickedDateView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickedDateView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "popUp_dateConfirmation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_dateConfirmation' is used in nib 'PickedDateView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'PickedDateView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'PickedDateView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SideMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideMenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SideMenuTableViewCell"
      let name = "SideMenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _SuggestedDateView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SuggestedDateView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Checked' is used in nib 'SuggestedDateView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/ic_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/ic_date' is used in nib 'SuggestedDateView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_cross' is used in nib 'SuggestedDateView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_dots' is used in nib 'SuggestedDateView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/icn_question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/icn_question' is used in nib 'SuggestedDateView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'SuggestedDateView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'SuggestedDateView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'SuggestedDateView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'SuggestedDateView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SyncAppCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SyncAppCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyncAppCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyncAppCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _TimelineDayCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimelineDayCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "TimelineDayCollectionViewCell"
      let name = "TimelineDayCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimelineDayCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimelineDayCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _TimelineHeaderCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimelineHeaderCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "TimelineHeaderCollectionViewCell"
      let name = "TimelineHeaderCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimelineHeaderCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimelineHeaderCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _TopDialogueView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TopDialogueView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "popUp_dateSugesstion_outgoing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_dateSugesstion_outgoing' is used in nib 'TopDialogueView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'TopDialogueView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'TopDialogueView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'TopDialogueView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TutorialSlide: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialSlide"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialSlide? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialSlide
      }

      fileprivate init() {}
    }

    struct _WeekMonthCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WeekMonthCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "WeekMonthCollectionViewCell"
      let name = "WeekMonthCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeekMonthCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeekMonthCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _oldAppointmentTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "AppointmentTableViewCell"
      let name = "oldAppointmentTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      fileprivate init() {}
    }

    struct _oldDayStackView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "oldDayStackView"

      fileprivate init() {}
    }

    struct _oldInvitationDateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "InvitationDateTableViewCell"
      let name = "oldInvitationDateTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_date' is used in nib 'oldInvitationDateTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_check' is used in nib 'oldInvitationDateTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_cross' is used in nib 'oldInvitationDateTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_dots' is used in nib 'oldInvitationDateTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_question' is used in nib 'oldInvitationDateTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _oldInvitationGeneralTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "InvitationGeneralTableViewCell"
      let name = "oldInvitationGeneralTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Appointment_Todo_List", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Appointment_Todo_List' is used in nib 'oldInvitationGeneralTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Right_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Black' is used in nib 'oldInvitationGeneralTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _oldIsTypingView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "oldIsTypingView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Menu_Appointments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Appointments' is used in nib 'oldIsTypingView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _oldMonthCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UICollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "MonthCollectionViewCell"
      let name = "oldMonthCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UICollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
      }

      fileprivate init() {}
    }

    struct _oldParticipantTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "ParticipantTableViewCell"
      let name = "oldParticipantTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Checkbox_Off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Checkbox_Off' is used in nib 'oldParticipantTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cross' is used in nib 'oldParticipantTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfilePicture_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfilePicture_icon' is used in nib 'oldParticipantTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'oldParticipantTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _oldPlanningMonthDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "PlanningMonthDetailTableViewCell"
      let name = "oldPlanningMonthDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Menu_Events", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Events' is used in nib 'oldPlanningMonthDetailTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'oldPlanningMonthDetailTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _oldPlanningSearchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell

      let bundle = R.hostingBundle
      let identifier = "PlanningSearchCell"
      let name = "oldPlanningSearchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }

      fileprivate init() {}
    }

    struct _oldPlanningYearHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "oldPlanningYearHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try chat.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customPopUp.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try forgotPassword.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try invitation.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try invitationDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try oldDateFormatPopup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try register.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sideMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splashScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sync.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try timeline.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tutorial.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct chat: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatViewController = StoryboardViewControllerResource<ChatViewController>(identifier: "ChatViewController")
      let name = "Chat"

      func chatViewController(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chat().chatViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatViewController' could not be loaded from storyboard 'Chat' as 'ChatViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customPopUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customPopupWithTwoButtons = StoryboardViewControllerResource<CustomPopupWithTwoButtonsViewController>(identifier: "CustomPopupWithTwoButtons")
      let multipleButtonAlertViewController = StoryboardViewControllerResource<MultipleButtonAlertViewController>(identifier: "MultipleButtonAlertViewController")
      let name = "CustomPopUp"

      func customPopupWithTwoButtons(_: Void = ()) -> CustomPopupWithTwoButtonsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customPopupWithTwoButtons)
      }

      func multipleButtonAlertViewController(_: Void = ()) -> MultipleButtonAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: multipleButtonAlertViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group' is used in storyboard 'CustomPopUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "popUp_New_Appointment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popUp_New_Appointment' is used in storyboard 'CustomPopUp', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.customPopUp().customPopupWithTwoButtons() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customPopupWithTwoButtons' could not be loaded from storyboard 'CustomPopUp' as 'CustomPopupWithTwoButtonsViewController'.") }
        if _R.storyboard.customPopUp().multipleButtonAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'multipleButtonAlertViewController' could not be loaded from storyboard 'CustomPopUp' as 'MultipleButtonAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct forgotPassword: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgotPassword"

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'ForgotPassword', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'ForgotPassword', but couldn't be loaded.") }
        }
        if _R.storyboard.forgotPassword().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPassword' as 'ForgotPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController

      let bundle = R.hostingBundle
      let homePageViewController = StoryboardViewControllerResource<HomePageViewController>(identifier: "HomePageViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"

      func homePageViewController(_: Void = ()) -> HomePageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homePageViewController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bussines_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bussines_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "group_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "memoTo_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'memoTo_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "memo_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'memo_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mom_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mom_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "standart_header_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'standart_header_white_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightGray' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().homePageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homePageViewController' could not be loaded from storyboard 'Home' as 'HomePageViewController'.") }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct invitation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let availabilityOverviewViewController = StoryboardViewControllerResource<AvailabilityOverviewViewController>(identifier: "AvailabilityOverviewViewController")
      let bundle = R.hostingBundle
      let inComingViewController = StoryboardViewControllerResource<InComingViewController>(identifier: "InComingViewController")
      let invitationContainerViewController = StoryboardViewControllerResource<InvitationContainerViewController>(identifier: "InvitationContainerViewController")
      let name = "Invitation"
      let outGoingViewController = StoryboardViewControllerResource<OutGoingViewController>(identifier: "OutGoingViewController")
      let setAvailabilityViewController = StoryboardViewControllerResource<SetAvailabilityViewController>(identifier: "SetAvailabilityViewController")

      func availabilityOverviewViewController(_: Void = ()) -> AvailabilityOverviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: availabilityOverviewViewController)
      }

      func inComingViewController(_: Void = ()) -> InComingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inComingViewController)
      }

      func invitationContainerViewController(_: Void = ()) -> InvitationContainerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationContainerViewController)
      }

      func outGoingViewController(_: Void = ()) -> OutGoingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outGoingViewController)
      }

      func setAvailabilityViewController(_: Void = ()) -> SetAvailabilityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setAvailabilityViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add_Icon_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add_Icon_White' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Appointment_icon_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Appointment_icon_logo' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Left_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Left_Blue' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Right_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Blue' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_blue' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkmark_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkmark_white' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross_white' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_message_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_message_white' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_questionmark_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_questionmark_white' is used in storyboard 'Invitation', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'Invitation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGray' is used in storyboard 'Invitation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'Invitation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Invitation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightRed' is used in storyboard 'Invitation', but couldn't be loaded.") }
        }
        if _R.storyboard.invitation().availabilityOverviewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'availabilityOverviewViewController' could not be loaded from storyboard 'Invitation' as 'AvailabilityOverviewViewController'.") }
        if _R.storyboard.invitation().inComingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inComingViewController' could not be loaded from storyboard 'Invitation' as 'InComingViewController'.") }
        if _R.storyboard.invitation().invitationContainerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationContainerViewController' could not be loaded from storyboard 'Invitation' as 'InvitationContainerViewController'.") }
        if _R.storyboard.invitation().outGoingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outGoingViewController' could not be loaded from storyboard 'Invitation' as 'OutGoingViewController'.") }
        if _R.storyboard.invitation().setAvailabilityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setAvailabilityViewController' could not be loaded from storyboard 'Invitation' as 'SetAvailabilityViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct invitationDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addDateViewController = StoryboardViewControllerResource<AddDateViewController>(identifier: "AddDateViewController")
      let addToAgendaViewController = StoryboardViewControllerResource<AddToAgendaViewController>(identifier: "AddToAgendaViewController")
      let bundle = R.hostingBundle
      let dayCalendarViewController = StoryboardViewControllerResource<DayCalendarViewController>(identifier: "DayCalendarViewController")
      let invitationDetailViewController = StoryboardViewControllerResource<InvitationDetailViewController>(identifier: "InvitationDetailViewController")
      let invitationSelectDateViewController = StoryboardViewControllerResource<InvitationSelectDateViewController>(identifier: "InvitationSelectDateViewController")
      let name = "InvitationDetail"
      let newInvitationDetailViewController = StoryboardViewControllerResource<NewInvitationDetailViewController>(identifier: "NewInvitationDetailViewController")

      func addDateViewController(_: Void = ()) -> AddDateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDateViewController)
      }

      func addToAgendaViewController(_: Void = ()) -> AddToAgendaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addToAgendaViewController)
      }

      func dayCalendarViewController(_: Void = ()) -> DayCalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dayCalendarViewController)
      }

      func invitationDetailViewController(_: Void = ()) -> InvitationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationDetailViewController)
      }

      func invitationSelectDateViewController(_: Void = ()) -> InvitationSelectDateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationSelectDateViewController)
      }

      func newInvitationDetailViewController(_: Void = ()) -> NewInvitationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newInvitationDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "InvıtationItems/ic_suggest_new_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/ic_suggest_new_date' is used in storyboard 'InvitationDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InvıtationItems/ic_weiger_afspraak", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvıtationItems/ic_weiger_afspraak' is used in storyboard 'InvitationDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "weiger_afspraak", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weiger_afspraak' is used in storyboard 'InvitationDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'InvitationDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'InvitationDetail', but couldn't be loaded.") }
        }
        if _R.storyboard.invitationDetail().addDateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDateViewController' could not be loaded from storyboard 'InvitationDetail' as 'AddDateViewController'.") }
        if _R.storyboard.invitationDetail().addToAgendaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addToAgendaViewController' could not be loaded from storyboard 'InvitationDetail' as 'AddToAgendaViewController'.") }
        if _R.storyboard.invitationDetail().dayCalendarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dayCalendarViewController' could not be loaded from storyboard 'InvitationDetail' as 'DayCalendarViewController'.") }
        if _R.storyboard.invitationDetail().invitationDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationDetailViewController' could not be loaded from storyboard 'InvitationDetail' as 'InvitationDetailViewController'.") }
        if _R.storyboard.invitationDetail().invitationSelectDateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationSelectDateViewController' could not be loaded from storyboard 'InvitationDetail' as 'InvitationSelectDateViewController'.") }
        if _R.storyboard.invitationDetail().newInvitationDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newInvitationDetailViewController' could not be loaded from storyboard 'InvitationDetail' as 'NewInvitationDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ApplicationNavigationController

      let bundle = R.hostingBundle
      let loginOverviewViewController = StoryboardViewControllerResource<LoginOverviewViewController>(identifier: "LoginOverviewViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"

      func loginOverviewViewController(_: Void = ()) -> LoginOverviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginOverviewViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_Right_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Black' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Right_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Blue' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NavigationBar_Back_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NavigationBar_Back_White' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StartScreen_CalendarIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StartScreen_CalendarIcon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StartScreen_Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StartScreen_Logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'Login', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'Login', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'Login', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Login', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightGray' is used in storyboard 'Login', but couldn't be loaded.") }
        }
        if _R.storyboard.login().loginOverviewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginOverviewViewController' could not be loaded from storyboard 'Login' as 'LoginOverviewViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct oldDateFormatPopup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let dateFormatPopupViewController = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "DateFormatPopupViewController")
      let name = "OldDateFormatPopup"

      func dateFormatPopupViewController(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dateFormatPopupViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'OldDateFormatPopup', but couldn't be loaded.") }
        }
        if _R.storyboard.oldDateFormatPopup().dateFormatPopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dateFormatPopupViewController' could not be loaded from storyboard 'OldDateFormatPopup' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Onboarding"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct register: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Register"
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_Right_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Blue' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Profile_Picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Profile_Picture' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PointerBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PointerBottom' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add_button_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_button_blue' is used in storyboard 'Register', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'Register', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Register', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightGray' is used in storyboard 'Register', but couldn't be loaded.") }
        }
        if _R.storyboard.register().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Register' as 'RegisterViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController

      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_Right_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Black' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sideMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SideMenuViewController

      let bundle = R.hostingBundle
      let name = "SideMenu"
      let sideMenuViewController = StoryboardViewControllerResource<SideMenuViewController>(identifier: "SideMenuViewController")

      func sideMenuViewController(_: Void = ()) -> SideMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Deelnemers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Deelnemers' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDimGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDimGray' is used in storyboard 'SideMenu', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightGray' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        }
        if _R.storyboard.sideMenu().sideMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuViewController' could not be loaded from storyboard 'SideMenu' as 'SideMenuViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splashScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashScreenViewController

      let bundle = R.hostingBundle
      let name = "SplashScreen"
      let splashScreenViewController = StoryboardViewControllerResource<SplashScreenViewController>(identifier: "SplashScreenViewController")

      func splashScreenViewController(_: Void = ()) -> SplashScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashScreenViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splashScreen().splashScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashScreenViewController' could not be loaded from storyboard 'SplashScreen' as 'SplashScreenViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sync: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Sync"
      let syncViewController = StoryboardViewControllerResource<SyncViewController>(identifier: "SyncViewController")

      func syncViewController(_: Void = ()) -> SyncViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: syncViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Facebook' is used in storyboard 'Sync', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Gmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Gmail' is used in storyboard 'Sync', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Linked_Yahoo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Linked_Yahoo' is used in storyboard 'Sync', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outlook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Outlook' is used in storyboard 'Sync', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBlue' is used in storyboard 'Sync', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'Sync', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appGrayChateau", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayChateau' is used in storyboard 'Sync', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appOutlookBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appOutlookBlue' is used in storyboard 'Sync', but couldn't be loaded.") }
        }
        if _R.storyboard.sync().syncViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'syncViewController' could not be loaded from storyboard 'Sync' as 'SyncViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct timeline: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TimelineViewController

      let bundle = R.hostingBundle
      let name = "Timeline"
      let timelineViewController = StoryboardViewControllerResource<TimelineViewController>(identifier: "TimelineViewController")

      func timelineViewController(_: Void = ()) -> TimelineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: timelineViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_Left_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Left_Blue' is used in storyboard 'Timeline', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow_Right_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_Right_Blue' is used in storyboard 'Timeline', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appGrayMagnesium", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appGrayMagnesium' is used in storyboard 'Timeline', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightGray' is used in storyboard 'Timeline', but couldn't be loaded.") }
        }
        if _R.storyboard.timeline().timelineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'timelineViewController' could not be loaded from storyboard 'Timeline' as 'TimelineViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tutorial: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Tutorial"
      let tutorialViewController = StoryboardViewControllerResource<TutorialViewController>(identifier: "TutorialViewController")

      func tutorialViewController(_: Void = ()) -> TutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appDarkRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appDarkRed' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        }
        if _R.storyboard.tutorial().tutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialViewController' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
